                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module matrix
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _CY
                                     12 	.globl _AC
                                     13 	.globl _F0
                                     14 	.globl _RS1
                                     15 	.globl _RS0
                                     16 	.globl _OV
                                     17 	.globl _F1
                                     18 	.globl _P
                                     19 	.globl _PS
                                     20 	.globl _PT1
                                     21 	.globl _PX1
                                     22 	.globl _PT0
                                     23 	.globl _PX0
                                     24 	.globl _RD
                                     25 	.globl _WR
                                     26 	.globl _T1
                                     27 	.globl _T0
                                     28 	.globl _INT1
                                     29 	.globl _INT0
                                     30 	.globl _TXD
                                     31 	.globl _RXD
                                     32 	.globl _P3_7
                                     33 	.globl _P3_6
                                     34 	.globl _P3_5
                                     35 	.globl _P3_4
                                     36 	.globl _P3_3
                                     37 	.globl _P3_2
                                     38 	.globl _P3_1
                                     39 	.globl _P3_0
                                     40 	.globl _EA
                                     41 	.globl _ES
                                     42 	.globl _ET1
                                     43 	.globl _EX1
                                     44 	.globl _ET0
                                     45 	.globl _EX0
                                     46 	.globl _P2_7
                                     47 	.globl _P2_6
                                     48 	.globl _P2_5
                                     49 	.globl _P2_4
                                     50 	.globl _P2_3
                                     51 	.globl _P2_2
                                     52 	.globl _P2_1
                                     53 	.globl _P2_0
                                     54 	.globl _SM0
                                     55 	.globl _SM1
                                     56 	.globl _SM2
                                     57 	.globl _REN
                                     58 	.globl _TB8
                                     59 	.globl _RB8
                                     60 	.globl _TI
                                     61 	.globl _RI
                                     62 	.globl _P1_7
                                     63 	.globl _P1_6
                                     64 	.globl _P1_5
                                     65 	.globl _P1_4
                                     66 	.globl _P1_3
                                     67 	.globl _P1_2
                                     68 	.globl _P1_1
                                     69 	.globl _P1_0
                                     70 	.globl _TF1
                                     71 	.globl _TR1
                                     72 	.globl _TF0
                                     73 	.globl _TR0
                                     74 	.globl _IE1
                                     75 	.globl _IT1
                                     76 	.globl _IE0
                                     77 	.globl _IT0
                                     78 	.globl _P0_7
                                     79 	.globl _P0_6
                                     80 	.globl _P0_5
                                     81 	.globl _P0_4
                                     82 	.globl _P0_3
                                     83 	.globl _P0_2
                                     84 	.globl _P0_1
                                     85 	.globl _P0_0
                                     86 	.globl _B
                                     87 	.globl _ACC
                                     88 	.globl _PSW
                                     89 	.globl _IP
                                     90 	.globl _P3
                                     91 	.globl _IE
                                     92 	.globl _P2
                                     93 	.globl _SBUF
                                     94 	.globl _SCON
                                     95 	.globl _P1
                                     96 	.globl _TH1
                                     97 	.globl _TH0
                                     98 	.globl _TL1
                                     99 	.globl _TL0
                                    100 	.globl _TMOD
                                    101 	.globl _TCON
                                    102 	.globl _PCON
                                    103 	.globl _DPH
                                    104 	.globl _DPL
                                    105 	.globl _SP
                                    106 	.globl _P0
                                    107 	.globl _set_col
                                    108 	.globl _reset_col
                                    109 	.globl _set_row
                                    110 	.globl _reset_row
                                    111 	.globl _matrix_draw
                                    112 	.globl _matrix_setup
                                    113 	.globl _matrix_reset
                                    114 	.globl _matrix_reset_rows
                                    115 	.globl _matrix_reset_cols
                                    116 ;--------------------------------------------------------
                                    117 ; special function registers
                                    118 ;--------------------------------------------------------
                                    119 	.area RSEG    (ABS,DATA)
      000000                        120 	.org 0x0000
                           000080   121 _P0	=	0x0080
                           000081   122 _SP	=	0x0081
                           000082   123 _DPL	=	0x0082
                           000083   124 _DPH	=	0x0083
                           000087   125 _PCON	=	0x0087
                           000088   126 _TCON	=	0x0088
                           000089   127 _TMOD	=	0x0089
                           00008A   128 _TL0	=	0x008a
                           00008B   129 _TL1	=	0x008b
                           00008C   130 _TH0	=	0x008c
                           00008D   131 _TH1	=	0x008d
                           000090   132 _P1	=	0x0090
                           000098   133 _SCON	=	0x0098
                           000099   134 _SBUF	=	0x0099
                           0000A0   135 _P2	=	0x00a0
                           0000A8   136 _IE	=	0x00a8
                           0000B0   137 _P3	=	0x00b0
                           0000B8   138 _IP	=	0x00b8
                           0000D0   139 _PSW	=	0x00d0
                           0000E0   140 _ACC	=	0x00e0
                           0000F0   141 _B	=	0x00f0
                                    142 ;--------------------------------------------------------
                                    143 ; special function bits
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0_0	=	0x0080
                           000081   148 _P0_1	=	0x0081
                           000082   149 _P0_2	=	0x0082
                           000083   150 _P0_3	=	0x0083
                           000084   151 _P0_4	=	0x0084
                           000085   152 _P0_5	=	0x0085
                           000086   153 _P0_6	=	0x0086
                           000087   154 _P0_7	=	0x0087
                           000088   155 _IT0	=	0x0088
                           000089   156 _IE0	=	0x0089
                           00008A   157 _IT1	=	0x008a
                           00008B   158 _IE1	=	0x008b
                           00008C   159 _TR0	=	0x008c
                           00008D   160 _TF0	=	0x008d
                           00008E   161 _TR1	=	0x008e
                           00008F   162 _TF1	=	0x008f
                           000090   163 _P1_0	=	0x0090
                           000091   164 _P1_1	=	0x0091
                           000092   165 _P1_2	=	0x0092
                           000093   166 _P1_3	=	0x0093
                           000094   167 _P1_4	=	0x0094
                           000095   168 _P1_5	=	0x0095
                           000096   169 _P1_6	=	0x0096
                           000097   170 _P1_7	=	0x0097
                           000098   171 _RI	=	0x0098
                           000099   172 _TI	=	0x0099
                           00009A   173 _RB8	=	0x009a
                           00009B   174 _TB8	=	0x009b
                           00009C   175 _REN	=	0x009c
                           00009D   176 _SM2	=	0x009d
                           00009E   177 _SM1	=	0x009e
                           00009F   178 _SM0	=	0x009f
                           0000A0   179 _P2_0	=	0x00a0
                           0000A1   180 _P2_1	=	0x00a1
                           0000A2   181 _P2_2	=	0x00a2
                           0000A3   182 _P2_3	=	0x00a3
                           0000A4   183 _P2_4	=	0x00a4
                           0000A5   184 _P2_5	=	0x00a5
                           0000A6   185 _P2_6	=	0x00a6
                           0000A7   186 _P2_7	=	0x00a7
                           0000A8   187 _EX0	=	0x00a8
                           0000A9   188 _ET0	=	0x00a9
                           0000AA   189 _EX1	=	0x00aa
                           0000AB   190 _ET1	=	0x00ab
                           0000AC   191 _ES	=	0x00ac
                           0000AF   192 _EA	=	0x00af
                           0000B0   193 _P3_0	=	0x00b0
                           0000B1   194 _P3_1	=	0x00b1
                           0000B2   195 _P3_2	=	0x00b2
                           0000B3   196 _P3_3	=	0x00b3
                           0000B4   197 _P3_4	=	0x00b4
                           0000B5   198 _P3_5	=	0x00b5
                           0000B6   199 _P3_6	=	0x00b6
                           0000B7   200 _P3_7	=	0x00b7
                           0000B0   201 _RXD	=	0x00b0
                           0000B1   202 _TXD	=	0x00b1
                           0000B2   203 _INT0	=	0x00b2
                           0000B3   204 _INT1	=	0x00b3
                           0000B4   205 _T0	=	0x00b4
                           0000B5   206 _T1	=	0x00b5
                           0000B6   207 _WR	=	0x00b6
                           0000B7   208 _RD	=	0x00b7
                           0000B8   209 _PX0	=	0x00b8
                           0000B9   210 _PT0	=	0x00b9
                           0000BA   211 _PX1	=	0x00ba
                           0000BB   212 _PT1	=	0x00bb
                           0000BC   213 _PS	=	0x00bc
                           0000D0   214 _P	=	0x00d0
                           0000D1   215 _F1	=	0x00d1
                           0000D2   216 _OV	=	0x00d2
                           0000D3   217 _RS0	=	0x00d3
                           0000D4   218 _RS1	=	0x00d4
                           0000D5   219 _F0	=	0x00d5
                           0000D6   220 _AC	=	0x00d6
                           0000D7   221 _CY	=	0x00d7
                                    222 ;--------------------------------------------------------
                                    223 ; overlayable register banks
                                    224 ;--------------------------------------------------------
                                    225 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        226 	.ds 8
                                    227 ;--------------------------------------------------------
                                    228 ; internal ram data
                                    229 ;--------------------------------------------------------
                                    230 	.area DSEG    (DATA)
      00000A                        231 _matrix_draw_active_muster_65536_33:
      00000A                        232 	.ds 8
      000012                        233 _matrix_draw_i_131072_35:
      000012                        234 	.ds 2
      000014                        235 _matrix_draw_j_262144_37:
      000014                        236 	.ds 2
                                    237 ;--------------------------------------------------------
                                    238 ; overlayable items in internal ram 
                                    239 ;--------------------------------------------------------
                                    240 	.area	OSEG    (OVR,DATA)
                                    241 	.area	OSEG    (OVR,DATA)
                                    242 	.area	OSEG    (OVR,DATA)
                                    243 	.area	OSEG    (OVR,DATA)
                                    244 	.area	OSEG    (OVR,DATA)
                                    245 	.area	OSEG    (OVR,DATA)
                                    246 	.area	OSEG    (OVR,DATA)
                                    247 ;--------------------------------------------------------
                                    248 ; indirectly addressable internal ram data
                                    249 ;--------------------------------------------------------
                                    250 	.area ISEG    (DATA)
                                    251 ;--------------------------------------------------------
                                    252 ; absolute internal ram data
                                    253 ;--------------------------------------------------------
                                    254 	.area IABS    (ABS,DATA)
                                    255 	.area IABS    (ABS,DATA)
                                    256 ;--------------------------------------------------------
                                    257 ; bit data
                                    258 ;--------------------------------------------------------
                                    259 	.area BSEG    (BIT)
                                    260 ;--------------------------------------------------------
                                    261 ; paged external ram data
                                    262 ;--------------------------------------------------------
                                    263 	.area PSEG    (PAG,XDATA)
                                    264 ;--------------------------------------------------------
                                    265 ; external ram data
                                    266 ;--------------------------------------------------------
                                    267 	.area XSEG    (XDATA)
                                    268 ;--------------------------------------------------------
                                    269 ; absolute external ram data
                                    270 ;--------------------------------------------------------
                                    271 	.area XABS    (ABS,XDATA)
                                    272 ;--------------------------------------------------------
                                    273 ; external initialized ram data
                                    274 ;--------------------------------------------------------
                                    275 	.area XISEG   (XDATA)
                                    276 	.area HOME    (CODE)
                                    277 	.area GSINIT0 (CODE)
                                    278 	.area GSINIT1 (CODE)
                                    279 	.area GSINIT2 (CODE)
                                    280 	.area GSINIT3 (CODE)
                                    281 	.area GSINIT4 (CODE)
                                    282 	.area GSINIT5 (CODE)
                                    283 	.area GSINIT  (CODE)
                                    284 	.area GSFINAL (CODE)
                                    285 	.area CSEG    (CODE)
                                    286 ;--------------------------------------------------------
                                    287 ; global & static initialisations
                                    288 ;--------------------------------------------------------
                                    289 	.area HOME    (CODE)
                                    290 	.area GSINIT  (CODE)
                                    291 	.area GSFINAL (CODE)
                                    292 	.area GSINIT  (CODE)
                                    293 ;--------------------------------------------------------
                                    294 ; Home
                                    295 ;--------------------------------------------------------
                                    296 	.area HOME    (CODE)
                                    297 	.area HOME    (CODE)
                                    298 ;--------------------------------------------------------
                                    299 ; code
                                    300 ;--------------------------------------------------------
                                    301 	.area CSEG    (CODE)
                                    302 ;------------------------------------------------------------
                                    303 ;Allocation info for local variables in function 'is_col_port3'
                                    304 ;------------------------------------------------------------
                                    305 ;col                       Allocated to registers r6 r7 
                                    306 ;------------------------------------------------------------
                                    307 ;	matrix.c:22: static bool is_col_port3(int col) {
                                    308 ;	-----------------------------------------
                                    309 ;	 function is_col_port3
                                    310 ;	-----------------------------------------
      0000F2                        311 _is_col_port3:
                           000007   312 	ar7 = 0x07
                           000006   313 	ar6 = 0x06
                           000005   314 	ar5 = 0x05
                           000004   315 	ar4 = 0x04
                           000003   316 	ar3 = 0x03
                           000002   317 	ar2 = 0x02
                           000001   318 	ar1 = 0x01
                           000000   319 	ar0 = 0x00
      0000F2 AE 82            [24]  320 	mov	r6,dpl
      0000F4 AF 83            [24]  321 	mov	r7,dph
                                    322 ;	matrix.c:23: if (col == 0) {
      0000F6 EE               [12]  323 	mov	a,r6
      0000F7 4F               [12]  324 	orl	a,r7
                                    325 ;	matrix.c:24: return false;
      0000F8 70 03            [24]  326 	jnz	00102$
      0000FA F5 82            [12]  327 	mov	dpl,a
      0000FC 22               [24]  328 	ret
      0000FD                        329 00102$:
                                    330 ;	matrix.c:26: return true;
      0000FD 75 82 01         [24]  331 	mov	dpl,#0x01
                                    332 ;	matrix.c:27: }
      000100 22               [24]  333 	ret
                                    334 ;------------------------------------------------------------
                                    335 ;Allocation info for local variables in function 'get_pin_of_col'
                                    336 ;------------------------------------------------------------
                                    337 ;col                       Allocated to registers r6 r7 
                                    338 ;------------------------------------------------------------
                                    339 ;	matrix.c:29: static bool get_pin_of_col(int col) {
                                    340 ;	-----------------------------------------
                                    341 ;	 function get_pin_of_col
                                    342 ;	-----------------------------------------
      000101                        343 _get_pin_of_col:
      000101 AE 82            [24]  344 	mov	r6,dpl
      000103 AF 83            [24]  345 	mov	r7,dph
                                    346 ;	matrix.c:30: if (col == 1) {
      000105 BE 01 07         [24]  347 	cjne	r6,#0x01,00102$
      000108 BF 00 04         [24]  348 	cjne	r7,#0x00,00102$
                                    349 ;	matrix.c:31: return 7;
      00010B 75 82 01         [24]  350 	mov	dpl,#0x01
      00010E 22               [24]  351 	ret
      00010F                        352 00102$:
                                    353 ;	matrix.c:34: if (col == 2) {
      00010F BE 02 07         [24]  354 	cjne	r6,#0x02,00104$
      000112 BF 00 04         [24]  355 	cjne	r7,#0x00,00104$
                                    356 ;	matrix.c:35: return 5;
      000115 75 82 01         [24]  357 	mov	dpl,#0x01
      000118 22               [24]  358 	ret
      000119                        359 00104$:
                                    360 ;	matrix.c:38: if (col == 3) {
      000119 BE 03 07         [24]  361 	cjne	r6,#0x03,00106$
      00011C BF 00 04         [24]  362 	cjne	r7,#0x00,00106$
                                    363 ;	matrix.c:39: return 4;
      00011F 75 82 01         [24]  364 	mov	dpl,#0x01
      000122 22               [24]  365 	ret
      000123                        366 00106$:
                                    367 ;	matrix.c:42: if (col == 4) {
      000123 BE 04 07         [24]  368 	cjne	r6,#0x04,00108$
      000126 BF 00 04         [24]  369 	cjne	r7,#0x00,00108$
                                    370 ;	matrix.c:43: return 3;
      000129 75 82 01         [24]  371 	mov	dpl,#0x01
      00012C 22               [24]  372 	ret
      00012D                        373 00108$:
                                    374 ;	matrix.c:46: return -1;
      00012D 75 82 01         [24]  375 	mov	dpl,#0x01
                                    376 ;	matrix.c:47: }
      000130 22               [24]  377 	ret
                                    378 ;------------------------------------------------------------
                                    379 ;Allocation info for local variables in function 'set_col'
                                    380 ;------------------------------------------------------------
                                    381 ;col                       Allocated to registers r6 r7 
                                    382 ;------------------------------------------------------------
                                    383 ;	matrix.c:49: void set_col(int col) {
                                    384 ;	-----------------------------------------
                                    385 ;	 function set_col
                                    386 ;	-----------------------------------------
      000131                        387 _set_col:
      000131 AE 82            [24]  388 	mov	r6,dpl
      000133 AF 83            [24]  389 	mov	r7,dph
                                    390 ;	matrix.c:50: switch (col) {
      000135 BE 00 05         [24]  391 	cjne	r6,#0x00,00129$
      000138 BF 00 02         [24]  392 	cjne	r7,#0x00,00129$
      00013B 80 20            [24]  393 	sjmp	00101$
      00013D                        394 00129$:
      00013D BE 01 05         [24]  395 	cjne	r6,#0x01,00130$
      000140 BF 00 02         [24]  396 	cjne	r7,#0x00,00130$
      000143 80 1B            [24]  397 	sjmp	00102$
      000145                        398 00130$:
      000145 BE 02 05         [24]  399 	cjne	r6,#0x02,00131$
      000148 BF 00 02         [24]  400 	cjne	r7,#0x00,00131$
      00014B 80 16            [24]  401 	sjmp	00103$
      00014D                        402 00131$:
      00014D BE 03 05         [24]  403 	cjne	r6,#0x03,00132$
      000150 BF 00 02         [24]  404 	cjne	r7,#0x00,00132$
      000153 80 11            [24]  405 	sjmp	00104$
      000155                        406 00132$:
                                    407 ;	matrix.c:51: case 0: P1_0 = 1;
      000155 BE 04 13         [24]  408 	cjne	r6,#0x04,00107$
      000158 BF 00 10         [24]  409 	cjne	r7,#0x00,00107$
      00015B 80 0C            [24]  410 	sjmp	00105$
      00015D                        411 00101$:
                                    412 ;	assignBit
      00015D D2 90            [12]  413 	setb	_P1_0
                                    414 ;	matrix.c:52: break;
                                    415 ;	matrix.c:53: case 1: P3_7 = 1;
      00015F 22               [24]  416 	ret
      000160                        417 00102$:
                                    418 ;	assignBit
      000160 D2 B7            [12]  419 	setb	_P3_7
                                    420 ;	matrix.c:54: break;
                                    421 ;	matrix.c:55: case 2: P3_5 = 1;
      000162 22               [24]  422 	ret
      000163                        423 00103$:
                                    424 ;	assignBit
      000163 D2 B5            [12]  425 	setb	_P3_5
                                    426 ;	matrix.c:56: break;
                                    427 ;	matrix.c:57: case 3: P3_4 = 1;
      000165 22               [24]  428 	ret
      000166                        429 00104$:
                                    430 ;	assignBit
      000166 D2 B4            [12]  431 	setb	_P3_4
                                    432 ;	matrix.c:58: break;
                                    433 ;	matrix.c:59: case 4: P3_3 = 1;
      000168 22               [24]  434 	ret
      000169                        435 00105$:
                                    436 ;	assignBit
      000169 D2 B3            [12]  437 	setb	_P3_3
                                    438 ;	matrix.c:61: };
      00016B                        439 00107$:
                                    440 ;	matrix.c:62: }
      00016B 22               [24]  441 	ret
                                    442 ;------------------------------------------------------------
                                    443 ;Allocation info for local variables in function 'reset_col'
                                    444 ;------------------------------------------------------------
                                    445 ;col                       Allocated to registers r6 r7 
                                    446 ;------------------------------------------------------------
                                    447 ;	matrix.c:64: void reset_col(int col) {
                                    448 ;	-----------------------------------------
                                    449 ;	 function reset_col
                                    450 ;	-----------------------------------------
      00016C                        451 _reset_col:
      00016C AE 82            [24]  452 	mov	r6,dpl
      00016E AF 83            [24]  453 	mov	r7,dph
                                    454 ;	matrix.c:65: switch (col) {
      000170 BE 00 05         [24]  455 	cjne	r6,#0x00,00129$
      000173 BF 00 02         [24]  456 	cjne	r7,#0x00,00129$
      000176 80 20            [24]  457 	sjmp	00101$
      000178                        458 00129$:
      000178 BE 01 05         [24]  459 	cjne	r6,#0x01,00130$
      00017B BF 00 02         [24]  460 	cjne	r7,#0x00,00130$
      00017E 80 1B            [24]  461 	sjmp	00102$
      000180                        462 00130$:
      000180 BE 02 05         [24]  463 	cjne	r6,#0x02,00131$
      000183 BF 00 02         [24]  464 	cjne	r7,#0x00,00131$
      000186 80 16            [24]  465 	sjmp	00103$
      000188                        466 00131$:
      000188 BE 03 05         [24]  467 	cjne	r6,#0x03,00132$
      00018B BF 00 02         [24]  468 	cjne	r7,#0x00,00132$
      00018E 80 11            [24]  469 	sjmp	00104$
      000190                        470 00132$:
                                    471 ;	matrix.c:66: case 0: P1_0 = 0;
      000190 BE 04 13         [24]  472 	cjne	r6,#0x04,00107$
      000193 BF 00 10         [24]  473 	cjne	r7,#0x00,00107$
      000196 80 0C            [24]  474 	sjmp	00105$
      000198                        475 00101$:
                                    476 ;	assignBit
      000198 C2 90            [12]  477 	clr	_P1_0
                                    478 ;	matrix.c:67: break;
                                    479 ;	matrix.c:68: case 1: P3_7 = 0;
      00019A 22               [24]  480 	ret
      00019B                        481 00102$:
                                    482 ;	assignBit
      00019B C2 B7            [12]  483 	clr	_P3_7
                                    484 ;	matrix.c:69: break;
                                    485 ;	matrix.c:70: case 2: P3_5 = 0;
      00019D 22               [24]  486 	ret
      00019E                        487 00103$:
                                    488 ;	assignBit
      00019E C2 B5            [12]  489 	clr	_P3_5
                                    490 ;	matrix.c:71: break;
                                    491 ;	matrix.c:72: case 3: P3_4 = 0;
      0001A0 22               [24]  492 	ret
      0001A1                        493 00104$:
                                    494 ;	assignBit
      0001A1 C2 B4            [12]  495 	clr	_P3_4
                                    496 ;	matrix.c:73: break;
                                    497 ;	matrix.c:74: case 4: P3_3 = 0;
      0001A3 22               [24]  498 	ret
      0001A4                        499 00105$:
                                    500 ;	assignBit
      0001A4 C2 B3            [12]  501 	clr	_P3_3
                                    502 ;	matrix.c:76: };
      0001A6                        503 00107$:
                                    504 ;	matrix.c:77: }
      0001A6 22               [24]  505 	ret
                                    506 ;------------------------------------------------------------
                                    507 ;Allocation info for local variables in function 'set_row'
                                    508 ;------------------------------------------------------------
                                    509 ;row                       Allocated to registers r6 r7 
                                    510 ;------------------------------------------------------------
                                    511 ;	matrix.c:79: void set_row(int row) {
                                    512 ;	-----------------------------------------
                                    513 ;	 function set_row
                                    514 ;	-----------------------------------------
      0001A7                        515 _set_row:
                                    516 ;	matrix.c:80: P1 = P1 | (1 << (row + 1));
      0001A7 E5 82            [12]  517 	mov	a,dpl
      0001A9 04               [12]  518 	inc	a
      0001AA F5 F0            [12]  519 	mov	b,a
      0001AC 05 F0            [12]  520 	inc	b
      0001AE 74 01            [12]  521 	mov	a,#0x01
      0001B0 80 02            [24]  522 	sjmp	00105$
      0001B2                        523 00103$:
      0001B2 25 E0            [12]  524 	add	a,acc
      0001B4                        525 00105$:
      0001B4 D5 F0 FB         [24]  526 	djnz	b,00103$
      0001B7 AE 90            [24]  527 	mov	r6,_P1
      0001B9 4E               [12]  528 	orl	a,r6
      0001BA F5 90            [12]  529 	mov	_P1,a
                                    530 ;	matrix.c:81: }
      0001BC 22               [24]  531 	ret
                                    532 ;------------------------------------------------------------
                                    533 ;Allocation info for local variables in function 'reset_row'
                                    534 ;------------------------------------------------------------
                                    535 ;row                       Allocated to registers r6 r7 
                                    536 ;------------------------------------------------------------
                                    537 ;	matrix.c:83: void reset_row(int row) {
                                    538 ;	-----------------------------------------
                                    539 ;	 function reset_row
                                    540 ;	-----------------------------------------
      0001BD                        541 _reset_row:
                                    542 ;	matrix.c:84: P1 = P1 & (0xFF - (1 << (row+1)));
      0001BD E5 82            [12]  543 	mov	a,dpl
      0001BF 04               [12]  544 	inc	a
      0001C0 F5 F0            [12]  545 	mov	b,a
      0001C2 05 F0            [12]  546 	inc	b
      0001C4 74 01            [12]  547 	mov	a,#0x01
      0001C6 80 02            [24]  548 	sjmp	00105$
      0001C8                        549 00103$:
      0001C8 25 E0            [12]  550 	add	a,acc
      0001CA                        551 00105$:
      0001CA D5 F0 FB         [24]  552 	djnz	b,00103$
      0001CD FF               [12]  553 	mov	r7,a
      0001CE 74 FF            [12]  554 	mov	a,#0xff
      0001D0 C3               [12]  555 	clr	c
      0001D1 9F               [12]  556 	subb	a,r7
      0001D2 AE 90            [24]  557 	mov	r6,_P1
      0001D4 5E               [12]  558 	anl	a,r6
      0001D5 F5 90            [12]  559 	mov	_P1,a
                                    560 ;	matrix.c:85: }
      0001D7 22               [24]  561 	ret
                                    562 ;------------------------------------------------------------
                                    563 ;Allocation info for local variables in function 'charToMuster'
                                    564 ;------------------------------------------------------------
                                    565 ;c                         Allocated to registers r7 
                                    566 ;------------------------------------------------------------
                                    567 ;	matrix.c:87: static uint64_t charToMuster(char c) {
                                    568 ;	-----------------------------------------
                                    569 ;	 function charToMuster
                                    570 ;	-----------------------------------------
      0001D8                        571 _charToMuster:
      0001D8 AF 82            [24]  572 	mov	r7,dpl
                                    573 ;	matrix.c:88: switch (c) {
      0001DA BF 2B 00         [24]  574 	cjne	r7,#0x2b,00150$
      0001DD                        575 00150$:
      0001DD 50 03            [24]  576 	jnc	00151$
      0001DF 02 04 CF         [24]  577 	ljmp	00138$
      0001E2                        578 00151$:
      0001E2 EF               [12]  579 	mov	a,r7
      0001E3 24 A5            [12]  580 	add	a,#0xff - 0x5a
      0001E5 50 03            [24]  581 	jnc	00152$
      0001E7 02 04 CF         [24]  582 	ljmp	00138$
      0001EA                        583 00152$:
      0001EA EF               [12]  584 	mov	a,r7
      0001EB 24 D5            [12]  585 	add	a,#0xd5
      0001ED FF               [12]  586 	mov	r7,a
      0001EE 24 0A            [12]  587 	add	a,#(00153$-3-.)
      0001F0 83               [24]  588 	movc	a,@a+pc
      0001F1 F5 82            [12]  589 	mov	dpl,a
      0001F3 EF               [12]  590 	mov	a,r7
      0001F4 24 34            [12]  591 	add	a,#(00154$-3-.)
      0001F6 83               [24]  592 	movc	a,@a+pc
      0001F7 F5 83            [12]  593 	mov	dph,a
      0001F9 E4               [12]  594 	clr	a
      0001FA 73               [24]  595 	jmp	@a+dptr
      0001FB                        596 00153$:
      0001FB BF                     597 	.db	00137$
      0001FC CF                     598 	.db	00138$
      0001FD CF                     599 	.db	00138$
      0001FE CF                     600 	.db	00138$
      0001FF CF                     601 	.db	00138$
      000200 15                     602 	.db	00127$
      000201 26                     603 	.db	00128$
      000202 37                     604 	.db	00129$
      000203 48                     605 	.db	00130$
      000204 59                     606 	.db	00131$
      000205 6A                     607 	.db	00132$
      000206 7B                     608 	.db	00133$
      000207 8C                     609 	.db	00134$
      000208 9D                     610 	.db	00135$
      000209 AE                     611 	.db	00136$
      00020A CF                     612 	.db	00138$
      00020B CF                     613 	.db	00138$
      00020C CF                     614 	.db	00138$
      00020D CF                     615 	.db	00138$
      00020E CF                     616 	.db	00138$
      00020F CF                     617 	.db	00138$
      000210 CF                     618 	.db	00138$
      000211 5B                     619 	.db	00101$
      000212 6C                     620 	.db	00102$
      000213 7D                     621 	.db	00103$
      000214 8E                     622 	.db	00104$
      000215 9F                     623 	.db	00105$
      000216 B0                     624 	.db	00106$
      000217 C1                     625 	.db	00107$
      000218 D2                     626 	.db	00108$
      000219 E3                     627 	.db	00109$
      00021A F4                     628 	.db	00110$
      00021B 05                     629 	.db	00111$
      00021C 16                     630 	.db	00112$
      00021D 27                     631 	.db	00113$
      00021E 38                     632 	.db	00114$
      00021F 49                     633 	.db	00115$
      000220 5A                     634 	.db	00116$
      000221 6B                     635 	.db	00117$
      000222 7C                     636 	.db	00118$
      000223 8D                     637 	.db	00119$
      000224 9E                     638 	.db	00120$
      000225 AF                     639 	.db	00121$
      000226 C0                     640 	.db	00122$
      000227 D1                     641 	.db	00123$
      000228 E2                     642 	.db	00124$
      000229 F3                     643 	.db	00125$
      00022A 04                     644 	.db	00126$
      00022B                        645 00154$:
      00022B 04                     646 	.db	00137$>>8
      00022C 04                     647 	.db	00138$>>8
      00022D 04                     648 	.db	00138$>>8
      00022E 04                     649 	.db	00138$>>8
      00022F 04                     650 	.db	00138$>>8
      000230 04                     651 	.db	00127$>>8
      000231 04                     652 	.db	00128$>>8
      000232 04                     653 	.db	00129$>>8
      000233 04                     654 	.db	00130$>>8
      000234 04                     655 	.db	00131$>>8
      000235 04                     656 	.db	00132$>>8
      000236 04                     657 	.db	00133$>>8
      000237 04                     658 	.db	00134$>>8
      000238 04                     659 	.db	00135$>>8
      000239 04                     660 	.db	00136$>>8
      00023A 04                     661 	.db	00138$>>8
      00023B 04                     662 	.db	00138$>>8
      00023C 04                     663 	.db	00138$>>8
      00023D 04                     664 	.db	00138$>>8
      00023E 04                     665 	.db	00138$>>8
      00023F 04                     666 	.db	00138$>>8
      000240 04                     667 	.db	00138$>>8
      000241 02                     668 	.db	00101$>>8
      000242 02                     669 	.db	00102$>>8
      000243 02                     670 	.db	00103$>>8
      000244 02                     671 	.db	00104$>>8
      000245 02                     672 	.db	00105$>>8
      000246 02                     673 	.db	00106$>>8
      000247 02                     674 	.db	00107$>>8
      000248 02                     675 	.db	00108$>>8
      000249 02                     676 	.db	00109$>>8
      00024A 02                     677 	.db	00110$>>8
      00024B 03                     678 	.db	00111$>>8
      00024C 03                     679 	.db	00112$>>8
      00024D 03                     680 	.db	00113$>>8
      00024E 03                     681 	.db	00114$>>8
      00024F 03                     682 	.db	00115$>>8
      000250 03                     683 	.db	00116$>>8
      000251 03                     684 	.db	00117$>>8
      000252 03                     685 	.db	00118$>>8
      000253 03                     686 	.db	00119$>>8
      000254 03                     687 	.db	00120$>>8
      000255 03                     688 	.db	00121$>>8
      000256 03                     689 	.db	00122$>>8
      000257 03                     690 	.db	00123$>>8
      000258 03                     691 	.db	00124$>>8
      000259 03                     692 	.db	00125$>>8
      00025A 04                     693 	.db	00126$>>8
                                    694 ;	matrix.c:89: case 'A': return musterA;
      00025B                        695 00101$:
      00025B 90 C6 31         [24]  696 	mov	dptr,#0xc631
      00025E 75 F0 1F         [24]  697 	mov	b,#0x1f
      000261 74 A3            [12]  698 	mov	a,#0xa3
      000263 7C 03            [12]  699 	mov	r4,#0x03
      000265 7D 00            [12]  700 	mov	r5,#0x00
      000267 7E 00            [12]  701 	mov	r6,#0x00
      000269 7F 00            [12]  702 	mov	r7,#0x00
      00026B 22               [24]  703 	ret
                                    704 ;	matrix.c:91: case 'B': return musterB;
      00026C                        705 00102$:
      00026C 90 46 3E         [24]  706 	mov	dptr,#0x463e
      00026F 75 F0 1F         [24]  707 	mov	b,#0x1f
      000272 74 A3            [12]  708 	mov	a,#0xa3
      000274 7C 07            [12]  709 	mov	r4,#0x07
      000276 7D 00            [12]  710 	mov	r5,#0x00
      000278 7E 00            [12]  711 	mov	r6,#0x00
      00027A 7F 00            [12]  712 	mov	r7,#0x00
      00027C 22               [24]  713 	ret
                                    714 ;	matrix.c:93: case 'C': return musterC;
      00027D                        715 00103$:
      00027D 90 42 0F         [24]  716 	mov	dptr,#0x420f
      000280 75 F0 08         [24]  717 	mov	b,#0x08
      000283 74 E1            [12]  718 	mov	a,#0xe1
      000285 7C 03            [12]  719 	mov	r4,#0x03
      000287 7D 00            [12]  720 	mov	r5,#0x00
      000289 7E 00            [12]  721 	mov	r6,#0x00
      00028B 7F 00            [12]  722 	mov	r7,#0x00
      00028D 22               [24]  723 	ret
                                    724 ;	matrix.c:95: case 'D': return musterD;
      00028E                        725 00104$:
      00028E 90 C6 3E         [24]  726 	mov	dptr,#0xc63e
      000291 75 F0 18         [24]  727 	mov	b,#0x18
      000294 74 A3            [12]  728 	mov	a,#0xa3
      000296 7C 07            [12]  729 	mov	r4,#0x07
      000298 7D 00            [12]  730 	mov	r5,#0x00
      00029A 7E 00            [12]  731 	mov	r6,#0x00
      00029C 7F 00            [12]  732 	mov	r7,#0x00
      00029E 22               [24]  733 	ret
                                    734 ;	matrix.c:97: case 'E': return musterE;
      00029F                        735 00105$:
      00029F 90 C2 1F         [24]  736 	mov	dptr,#0xc21f
      0002A2 75 F0 0F         [24]  737 	mov	b,#0x0f
      0002A5 74 E1            [12]  738 	mov	a,#0xe1
      0002A7 7C 07            [12]  739 	mov	r4,#0x07
      0002A9 7D 00            [12]  740 	mov	r5,#0x00
      0002AB 7E 00            [12]  741 	mov	r6,#0x00
      0002AD 7F 00            [12]  742 	mov	r7,#0x00
      0002AF 22               [24]  743 	ret
                                    744 ;	matrix.c:99: case 'F': return musterF;
      0002B0                        745 00106$:
      0002B0 90 42 10         [24]  746 	mov	dptr,#0x4210
      0002B3 75 F0 0F         [24]  747 	mov	b,#0x0f
      0002B6 74 E1            [12]  748 	mov	a,#0xe1
      0002B8 7C 07            [12]  749 	mov	r4,#0x07
      0002BA 7D 00            [12]  750 	mov	r5,#0x00
      0002BC 7E 00            [12]  751 	mov	r6,#0x00
      0002BE 7F 00            [12]  752 	mov	r7,#0x00
      0002C0 22               [24]  753 	ret
                                    754 ;	matrix.c:101: case 'G': return musterG;
      0002C1                        755 00107$:
      0002C1 90 C6 2E         [24]  756 	mov	dptr,#0xc62e
      0002C4 75 F0 0B         [24]  757 	mov	b,#0x0b
      0002C7 74 E1            [12]  758 	mov	a,#0xe1
      0002C9 7C 03            [12]  759 	mov	r4,#0x03
      0002CB 7D 00            [12]  760 	mov	r5,#0x00
      0002CD 7E 00            [12]  761 	mov	r6,#0x00
      0002CF 7F 00            [12]  762 	mov	r7,#0x00
      0002D1 22               [24]  763 	ret
                                    764 ;	matrix.c:103: case 'H': return musterH;
      0002D2                        765 00108$:
      0002D2 90 C6 31         [24]  766 	mov	dptr,#0xc631
      0002D5 75 F0 1F         [24]  767 	mov	b,#0x1f
      0002D8 74 63            [12]  768 	mov	a,#0x63
      0002DA 7C 04            [12]  769 	mov	r4,#0x04
      0002DC 7D 00            [12]  770 	mov	r5,#0x00
      0002DE 7E 00            [12]  771 	mov	r6,#0x00
      0002E0 7F 00            [12]  772 	mov	r7,#0x00
      0002E2 22               [24]  773 	ret
                                    774 ;	matrix.c:105: case 'I': return musterI;
      0002E3                        775 00109$:
      0002E3 90 10 9F         [24]  776 	mov	dptr,#0x109f
      0002E6 75 F0 42         [24]  777 	mov	b,#0x42
      0002E9 74 C8            [12]  778 	mov	a,#0xc8
      0002EB 7C 07            [12]  779 	mov	r4,#0x07
      0002ED 7D 00            [12]  780 	mov	r5,#0x00
      0002EF 7E 00            [12]  781 	mov	r6,#0x00
      0002F1 7F 00            [12]  782 	mov	r7,#0x00
      0002F3 22               [24]  783 	ret
                                    784 ;	matrix.c:107: case 'J': return musterJ;
      0002F4                        785 00110$:
      0002F4 90 4A 4C         [24]  786 	mov	dptr,#0x4a4c
      0002F7 75 F0 21         [24]  787 	mov	b,#0x21
      0002FA 74 84            [12]  788 	mov	a,#0x84
      0002FC 7C 00            [12]  789 	mov	r4,#0x00
      0002FE 7D 00            [12]  790 	mov	r5,#0x00
      000300 7E 00            [12]  791 	mov	r6,#0x00
      000302 7F 00            [12]  792 	mov	r7,#0x00
      000304 22               [24]  793 	ret
                                    794 ;	matrix.c:109: case 'K': return musterK;
      000305                        795 00111$:
      000305 90 52 51         [24]  796 	mov	dptr,#0x5251
      000308 75 F0 4C         [24]  797 	mov	b,#0x4c
      00030B 74 65            [12]  798 	mov	a,#0x65
      00030D 7C 04            [12]  799 	mov	r4,#0x04
      00030F 7D 00            [12]  800 	mov	r5,#0x00
      000311 7E 00            [12]  801 	mov	r6,#0x00
      000313 7F 00            [12]  802 	mov	r7,#0x00
      000315 22               [24]  803 	ret
                                    804 ;	matrix.c:111: case 'L': return musterL;
      000316                        805 00112$:
      000316 90 42 1F         [24]  806 	mov	dptr,#0x421f
      000319 75 F0 08         [24]  807 	mov	b,#0x08
      00031C 74 21            [12]  808 	mov	a,#0x21
      00031E 7C 04            [12]  809 	mov	r4,#0x04
      000320 7D 00            [12]  810 	mov	r5,#0x00
      000322 7E 00            [12]  811 	mov	r6,#0x00
      000324 7F 00            [12]  812 	mov	r7,#0x00
      000326 22               [24]  813 	ret
                                    814 ;	matrix.c:113: case 'M': return musterM;
      000327                        815 00113$:
      000327 90 C6 31         [24]  816 	mov	dptr,#0xc631
      00032A 75 F0 58         [24]  817 	mov	b,#0x58
      00032D 74 77            [12]  818 	mov	a,#0x77
      00032F 7C 04            [12]  819 	mov	r4,#0x04
      000331 7D 00            [12]  820 	mov	r5,#0x00
      000333 7E 00            [12]  821 	mov	r6,#0x00
      000335 7F 00            [12]  822 	mov	r7,#0x00
      000337 22               [24]  823 	ret
                                    824 ;	matrix.c:115: case 'N': return musterN;
      000338                        825 00114$:
      000338 90 CE 31         [24]  826 	mov	dptr,#0xce31
      00033B 75 F0 9A         [24]  827 	mov	b,#0x9a
      00033E 74 63            [12]  828 	mov	a,#0x63
      000340 7C 04            [12]  829 	mov	r4,#0x04
      000342 7D 00            [12]  830 	mov	r5,#0x00
      000344 7E 00            [12]  831 	mov	r6,#0x00
      000346 7F 00            [12]  832 	mov	r7,#0x00
      000348 22               [24]  833 	ret
                                    834 ;	matrix.c:117: case 'O': return musterO;
      000349                        835 00115$:
      000349 90 C6 2E         [24]  836 	mov	dptr,#0xc62e
      00034C 75 F0 18         [24]  837 	mov	b,#0x18
      00034F 74 A3            [12]  838 	mov	a,#0xa3
      000351 7C 03            [12]  839 	mov	r4,#0x03
      000353 7D 00            [12]  840 	mov	r5,#0x00
      000355 7E 00            [12]  841 	mov	r6,#0x00
      000357 7F 00            [12]  842 	mov	r7,#0x00
      000359 22               [24]  843 	ret
                                    844 ;	matrix.c:119: case 'P': return musterP;
      00035A                        845 00116$:
      00035A 90 42 10         [24]  846 	mov	dptr,#0x4210
      00035D 75 F0 1F         [24]  847 	mov	b,#0x1f
      000360 74 A3            [12]  848 	mov	a,#0xa3
      000362 7C 07            [12]  849 	mov	r4,#0x07
      000364 7D 00            [12]  850 	mov	r5,#0x00
      000366 7E 00            [12]  851 	mov	r6,#0x00
      000368 7F 00            [12]  852 	mov	r7,#0x00
      00036A 22               [24]  853 	ret
                                    854 ;	matrix.c:121: case 'Q': return musterQ;
      00036B                        855 00117$:
      00036B 90 D6 6F         [24]  856 	mov	dptr,#0xd66f
      00036E 75 F0 18         [24]  857 	mov	b,#0x18
      000371 74 A3            [12]  858 	mov	a,#0xa3
      000373 7C 03            [12]  859 	mov	r4,#0x03
      000375 7D 00            [12]  860 	mov	r5,#0x00
      000377 7E 00            [12]  861 	mov	r6,#0x00
      000379 7F 00            [12]  862 	mov	r7,#0x00
      00037B 22               [24]  863 	ret
                                    864 ;	matrix.c:123: case 'R': return musterR;
      00037C                        865 00118$:
      00037C 90 52 51         [24]  866 	mov	dptr,#0x5251
      00037F 75 F0 1F         [24]  867 	mov	b,#0x1f
      000382 74 A3            [12]  868 	mov	a,#0xa3
      000384 7C 07            [12]  869 	mov	r4,#0x07
      000386 7D 00            [12]  870 	mov	r5,#0x00
      000388 7E 00            [12]  871 	mov	r6,#0x00
      00038A 7F 00            [12]  872 	mov	r7,#0x00
      00038C 22               [24]  873 	ret
                                    874 ;	matrix.c:125: case 'S': return musterS;
      00038D                        875 00119$:
      00038D 90 04 3E         [24]  876 	mov	dptr,#0x043e
      000390 75 F0 07         [24]  877 	mov	b,#0x07
      000393 74 E1            [12]  878 	mov	a,#0xe1
      000395 7C 03            [12]  879 	mov	r4,#0x03
      000397 7D 00            [12]  880 	mov	r5,#0x00
      000399 7E 00            [12]  881 	mov	r6,#0x00
      00039B 7F 00            [12]  882 	mov	r7,#0x00
      00039D 22               [24]  883 	ret
                                    884 ;	matrix.c:127: case 'T': return musterT;
      00039E                        885 00120$:
      00039E 90 10 84         [24]  886 	mov	dptr,#0x1084
      0003A1 75 F0 42         [24]  887 	mov	b,#0x42
      0003A4 74 C8            [12]  888 	mov	a,#0xc8
      0003A6 7C 07            [12]  889 	mov	r4,#0x07
      0003A8 7D 00            [12]  890 	mov	r5,#0x00
      0003AA 7E 00            [12]  891 	mov	r6,#0x00
      0003AC 7F 00            [12]  892 	mov	r7,#0x00
      0003AE 22               [24]  893 	ret
                                    894 ;	matrix.c:129: case 'U': return musterU;
      0003AF                        895 00121$:
      0003AF 90 C6 2E         [24]  896 	mov	dptr,#0xc62e
      0003B2 75 F0 18         [24]  897 	mov	b,#0x18
      0003B5 74 63            [12]  898 	mov	a,#0x63
      0003B7 7C 04            [12]  899 	mov	r4,#0x04
      0003B9 7D 00            [12]  900 	mov	r5,#0x00
      0003BB 7E 00            [12]  901 	mov	r6,#0x00
      0003BD 7F 00            [12]  902 	mov	r7,#0x00
      0003BF 22               [24]  903 	ret
                                    904 ;	matrix.c:131: case 'V': return musterV;
      0003C0                        905 00122$:
      0003C0 90 C5 44         [24]  906 	mov	dptr,#0xc544
      0003C3 75 F0 18         [24]  907 	mov	b,#0x18
      0003C6 74 63            [12]  908 	mov	a,#0x63
      0003C8 7C 04            [12]  909 	mov	r4,#0x04
      0003CA 7D 00            [12]  910 	mov	r5,#0x00
      0003CC 7E 00            [12]  911 	mov	r6,#0x00
      0003CE 7F 00            [12]  912 	mov	r7,#0x00
      0003D0 22               [24]  913 	ret
                                    914 ;	matrix.c:133: case 'W': return musterW;
      0003D1                        915 00123$:
      0003D1 90 D7 71         [24]  916 	mov	dptr,#0xd771
      0003D4 75 F0 18         [24]  917 	mov	b,#0x18
      0003D7 74 63            [12]  918 	mov	a,#0x63
      0003D9 7C 04            [12]  919 	mov	r4,#0x04
      0003DB 7D 00            [12]  920 	mov	r5,#0x00
      0003DD 7E 00            [12]  921 	mov	r6,#0x00
      0003DF 7F 00            [12]  922 	mov	r7,#0x00
      0003E1 22               [24]  923 	ret
                                    924 ;	matrix.c:135: case 'X': return musterX;
      0003E2                        925 00124$:
      0003E2 90 2A 31         [24]  926 	mov	dptr,#0x2a31
      0003E5 75 F0 A2         [24]  927 	mov	b,#0xa2
      0003E8 74 62            [12]  928 	mov	a,#0x62
      0003EA 7C 04            [12]  929 	mov	r4,#0x04
      0003EC 7D 00            [12]  930 	mov	r5,#0x00
      0003EE 7E 00            [12]  931 	mov	r6,#0x00
      0003F0 7F 00            [12]  932 	mov	r7,#0x00
      0003F2 22               [24]  933 	ret
                                    934 ;	matrix.c:137: case 'Y': return musterY;
      0003F3                        935 00125$:
      0003F3 90 10 84         [24]  936 	mov	dptr,#0x1084
      0003F6 75 F0 A2         [24]  937 	mov	b,#0xa2
      0003F9 74 62            [12]  938 	mov	a,#0x62
      0003FB 7C 04            [12]  939 	mov	r4,#0x04
      0003FD 7D 00            [12]  940 	mov	r5,#0x00
      0003FF 7E 00            [12]  941 	mov	r6,#0x00
      000401 7F 00            [12]  942 	mov	r7,#0x00
      000403 22               [24]  943 	ret
                                    944 ;	matrix.c:139: case 'Z': return musterZ;
      000404                        945 00126$:
      000404 90 22 1F         [24]  946 	mov	dptr,#0x221f
      000407 75 F0 22         [24]  947 	mov	b,#0x22
      00040A 74 C2            [12]  948 	mov	a,#0xc2
      00040C 7C 07            [12]  949 	mov	r4,#0x07
      00040E 7D 00            [12]  950 	mov	r5,#0x00
      000410 7E 00            [12]  951 	mov	r6,#0x00
      000412 7F 00            [12]  952 	mov	r7,#0x00
      000414 22               [24]  953 	ret
                                    954 ;	matrix.c:142: case '0': return muster0;
      000415                        955 00127$:
      000415 90 E7 2E         [24]  956 	mov	dptr,#0xe72e
      000418 75 F0 3A         [24]  957 	mov	b,#0x3a
      00041B 74 A7            [12]  958 	mov	a,#0xa7
      00041D 7C 03            [12]  959 	mov	r4,#0x03
      00041F 7D 00            [12]  960 	mov	r5,#0x00
      000421 7E 00            [12]  961 	mov	r6,#0x00
      000423 7F 00            [12]  962 	mov	r7,#0x00
      000425 22               [24]  963 	ret
                                    964 ;	matrix.c:144: case '1': return muster1;
      000426                        965 00128$:
      000426 90 10 9F         [24]  966 	mov	dptr,#0x109f
      000429 75 F0 42         [24]  967 	mov	b,#0x42
      00042C 74 19            [12]  968 	mov	a,#0x19
      00042E 7C 01            [12]  969 	mov	r4,#0x01
      000430 7D 00            [12]  970 	mov	r5,#0x00
      000432 7E 00            [12]  971 	mov	r6,#0x00
      000434 7F 00            [12]  972 	mov	r7,#0x00
      000436 22               [24]  973 	ret
                                    974 ;	matrix.c:146: case '2': return muster2;
      000437                        975 00129$:
      000437 90 11 1F         [24]  976 	mov	dptr,#0x111f
      00043A 75 F0 11         [24]  977 	mov	b,#0x11
      00043D 74 A2            [12]  978 	mov	a,#0xa2
      00043F 7C 03            [12]  979 	mov	r4,#0x03
      000441 7D 00            [12]  980 	mov	r5,#0x00
      000443 7E 00            [12]  981 	mov	r6,#0x00
      000445 7F 00            [12]  982 	mov	r7,#0x00
      000447 22               [24]  983 	ret
                                    984 ;	matrix.c:148: case '3': return muster3;
      000448                        985 00130$:
      000448 90 06 2E         [24]  986 	mov	dptr,#0x062e
      00044B 75 F0 13         [24]  987 	mov	b,#0x13
      00044E 74 A2            [12]  988 	mov	a,#0xa2
      000450 7C 03            [12]  989 	mov	r4,#0x03
      000452 7D 00            [12]  990 	mov	r5,#0x00
      000454 7E 00            [12]  991 	mov	r6,#0x00
      000456 7F 00            [12]  992 	mov	r7,#0x00
      000458 22               [24]  993 	ret
                                    994 ;	matrix.c:150: case '4': return muster4;
      000459                        995 00131$:
      000459 90 7C 42         [24]  996 	mov	dptr,#0x7c42
      00045C 75 F0 A9         [24]  997 	mov	b,#0xa9
      00045F 74 8C            [12]  998 	mov	a,#0x8c
      000461 7C 00            [12]  999 	mov	r4,#0x00
      000463 7D 00            [12] 1000 	mov	r5,#0x00
      000465 7E 00            [12] 1001 	mov	r6,#0x00
      000467 7F 00            [12] 1002 	mov	r7,#0x00
      000469 22               [24] 1003 	ret
                                   1004 ;	matrix.c:152: case '5': return muster5;
      00046A                       1005 00132$:
      00046A 90 86 2E         [24] 1006 	mov	dptr,#0x862e
      00046D 75 F0 E0         [24] 1007 	mov	b,#0xe0
      000470 74 E1            [12] 1008 	mov	a,#0xe1
      000472 7C 07            [12] 1009 	mov	r4,#0x07
      000474 7D 00            [12] 1010 	mov	r5,#0x00
      000476 7E 00            [12] 1011 	mov	r6,#0x00
      000478 7F 00            [12] 1012 	mov	r7,#0x00
      00047A 22               [24] 1013 	ret
                                   1014 ;	matrix.c:154: case '6': return muster6;
      00047B                       1015 00133$:
      00047B 90 46 2E         [24] 1016 	mov	dptr,#0x462e
      00047E 75 F0 0F         [24] 1017 	mov	b,#0x0f
      000481 74 A3            [12] 1018 	mov	a,#0xa3
      000483 7C 03            [12] 1019 	mov	r4,#0x03
      000485 7D 00            [12] 1020 	mov	r5,#0x00
      000487 7E 00            [12] 1021 	mov	r6,#0x00
      000489 7F 00            [12] 1022 	mov	r7,#0x00
                                   1023 ;	matrix.c:156: case '7': return muster7;
      00048B 22               [24] 1024 	ret
      00048C                       1025 00134$:
      00048C 90 10 84         [24] 1026 	mov	dptr,#0x1084
      00048F 75 F0 22         [24] 1027 	mov	b,#0x22
      000492 74 C2            [12] 1028 	mov	a,#0xc2
      000494 7C 07            [12] 1029 	mov	r4,#0x07
      000496 7D 00            [12] 1030 	mov	r5,#0x00
      000498 7E 00            [12] 1031 	mov	r6,#0x00
      00049A 7F 00            [12] 1032 	mov	r7,#0x00
                                   1033 ;	matrix.c:158: case '8': return muster8;
      00049C 22               [24] 1034 	ret
      00049D                       1035 00135$:
      00049D 90 46 2E         [24] 1036 	mov	dptr,#0x462e
      0004A0 75 F0 17         [24] 1037 	mov	b,#0x17
      0004A3 74 A3            [12] 1038 	mov	a,#0xa3
      0004A5 7C 03            [12] 1039 	mov	r4,#0x03
      0004A7 7D 00            [12] 1040 	mov	r5,#0x00
      0004A9 7E 00            [12] 1041 	mov	r6,#0x00
      0004AB 7F 00            [12] 1042 	mov	r7,#0x00
                                   1043 ;	matrix.c:160: case '9': return muster9;
      0004AD 22               [24] 1044 	ret
      0004AE                       1045 00136$:
      0004AE 90 86 2E         [24] 1046 	mov	dptr,#0x862e
      0004B1 75 F0 17         [24] 1047 	mov	b,#0x17
      0004B4 74 A3            [12] 1048 	mov	a,#0xa3
      0004B6 7C 03            [12] 1049 	mov	r4,#0x03
      0004B8 7D 00            [12] 1050 	mov	r5,#0x00
      0004BA 7E 00            [12] 1051 	mov	r6,#0x00
      0004BC 7F 00            [12] 1052 	mov	r7,#0x00
                                   1053 ;	matrix.c:163: case '+': return musterErr;
      0004BE 22               [24] 1054 	ret
      0004BF                       1055 00137$:
      0004BF 90 FF FF         [24] 1056 	mov	dptr,#0xffff
      0004C2 74 FF            [12] 1057 	mov	a,#0xff
      0004C4 F5 F0            [12] 1058 	mov	b,a
      0004C6 7C 07            [12] 1059 	mov	r4,#0x07
      0004C8 7D 00            [12] 1060 	mov	r5,#0x00
      0004CA 7E 00            [12] 1061 	mov	r6,#0x00
      0004CC 7F 00            [12] 1062 	mov	r7,#0x00
                                   1063 ;	matrix.c:166: default: return musterErr;
      0004CE 22               [24] 1064 	ret
      0004CF                       1065 00138$:
      0004CF 90 FF FF         [24] 1066 	mov	dptr,#0xffff
      0004D2 74 FF            [12] 1067 	mov	a,#0xff
      0004D4 F5 F0            [12] 1068 	mov	b,a
      0004D6 7C 07            [12] 1069 	mov	r4,#0x07
      0004D8 7D 00            [12] 1070 	mov	r5,#0x00
      0004DA 7E 00            [12] 1071 	mov	r6,#0x00
      0004DC 7F 00            [12] 1072 	mov	r7,#0x00
                                   1073 ;	matrix.c:168: }
                                   1074 ;	matrix.c:169: }
      0004DE 22               [24] 1075 	ret
                                   1076 ;------------------------------------------------------------
                                   1077 ;Allocation info for local variables in function 'matrix_draw'
                                   1078 ;------------------------------------------------------------
                                   1079 ;c                         Allocated to registers r7 
                                   1080 ;active_muster             Allocated with name '_matrix_draw_active_muster_65536_33'
                                   1081 ;i                         Allocated with name '_matrix_draw_i_131072_35'
                                   1082 ;j                         Allocated with name '_matrix_draw_j_262144_37'
                                   1083 ;index                     Allocated to registers 
                                   1084 ;val                       Allocated to registers r7 
                                   1085 ;------------------------------------------------------------
                                   1086 ;	matrix.c:171: void matrix_draw(char c) {
                                   1087 ;	-----------------------------------------
                                   1088 ;	 function matrix_draw
                                   1089 ;	-----------------------------------------
      0004DF                       1090 _matrix_draw:
                                   1091 ;	matrix.c:174: if (c > 0x60 && c < 0x7b) {
      0004DF E5 82            [12] 1092 	mov	a,dpl
      0004E1 FF               [12] 1093 	mov	r7,a
      0004E2 24 9F            [12] 1094 	add	a,#0xff - 0x60
      0004E4 50 0B            [24] 1095 	jnc	00102$
      0004E6 BF 7B 00         [24] 1096 	cjne	r7,#0x7b,00147$
      0004E9                       1097 00147$:
      0004E9 50 06            [24] 1098 	jnc	00102$
                                   1099 ;	matrix.c:175: c -= 32;
      0004EB 8F 06            [24] 1100 	mov	ar6,r7
      0004ED EE               [12] 1101 	mov	a,r6
      0004EE 24 E0            [12] 1102 	add	a,#0xe0
      0004F0 FF               [12] 1103 	mov	r7,a
      0004F1                       1104 00102$:
                                   1105 ;	matrix.c:178: active_muster = charToMuster(c);
      0004F1 8F 82            [24] 1106 	mov	dpl,r7
      0004F3 12 01 D8         [24] 1107 	lcall	_charToMuster
      0004F6 85 82 0A         [24] 1108 	mov	_matrix_draw_active_muster_65536_33,dpl
      0004F9 85 83 0B         [24] 1109 	mov	(_matrix_draw_active_muster_65536_33 + 1),dph
      0004FC 85 F0 0C         [24] 1110 	mov	(_matrix_draw_active_muster_65536_33 + 2),b
      0004FF F5 0D            [12] 1111 	mov	(_matrix_draw_active_muster_65536_33 + 3),a
      000501 8C 0E            [24] 1112 	mov	(_matrix_draw_active_muster_65536_33 + 4),r4
      000503 8D 0F            [24] 1113 	mov	(_matrix_draw_active_muster_65536_33 + 5),r5
      000505 8E 10            [24] 1114 	mov	(_matrix_draw_active_muster_65536_33 + 6),r6
      000507 8F 11            [24] 1115 	mov	(_matrix_draw_active_muster_65536_33 + 7),r7
                                   1116 ;	matrix.c:180: for (int i=0; i<5; i++) {
      000509 E4               [12] 1117 	clr	a
      00050A F5 12            [12] 1118 	mov	_matrix_draw_i_131072_35,a
      00050C F5 13            [12] 1119 	mov	(_matrix_draw_i_131072_35 + 1),a
      00050E                       1120 00112$:
      00050E C3               [12] 1121 	clr	c
      00050F E5 12            [12] 1122 	mov	a,_matrix_draw_i_131072_35
      000511 94 05            [12] 1123 	subb	a,#0x05
      000513 E5 13            [12] 1124 	mov	a,(_matrix_draw_i_131072_35 + 1)
      000515 64 80            [12] 1125 	xrl	a,#0x80
      000517 94 80            [12] 1126 	subb	a,#0x80
      000519 40 01            [24] 1127 	jc	00149$
      00051B 22               [24] 1128 	ret
      00051C                       1129 00149$:
                                   1130 ;	matrix.c:181: matrix_reset_cols();
      00051C 12 05 D9         [24] 1131 	lcall	_matrix_reset_cols
                                   1132 ;	matrix.c:182: matrix_reset_rows();
      00051F 12 05 B3         [24] 1133 	lcall	_matrix_reset_rows
                                   1134 ;	matrix.c:183: reset_col(i);
      000522 85 12 82         [24] 1135 	mov	dpl,_matrix_draw_i_131072_35
      000525 85 13 83         [24] 1136 	mov	dph,(_matrix_draw_i_131072_35 + 1)
      000528 12 01 6C         [24] 1137 	lcall	_reset_col
                                   1138 ;	matrix.c:185: for (int j = 0; j<7; j++) {
      00052B E4               [12] 1139 	clr	a
      00052C F5 14            [12] 1140 	mov	_matrix_draw_j_262144_37,a
      00052E F5 15            [12] 1141 	mov	(_matrix_draw_j_262144_37 + 1),a
      000530                       1142 00109$:
      000530 C3               [12] 1143 	clr	c
      000531 E5 14            [12] 1144 	mov	a,_matrix_draw_j_262144_37
      000533 94 07            [12] 1145 	subb	a,#0x07
      000535 E5 15            [12] 1146 	mov	a,(_matrix_draw_j_262144_37 + 1)
      000537 64 80            [12] 1147 	xrl	a,#0x80
      000539 94 80            [12] 1148 	subb	a,#0x80
      00053B 50 62            [24] 1149 	jnc	00113$
                                   1150 ;	matrix.c:186: int index = 5*(6-j) + (4 - i);
      00053D AB 14            [24] 1151 	mov	r3,_matrix_draw_j_262144_37
      00053F 74 06            [12] 1152 	mov	a,#0x06
      000541 C3               [12] 1153 	clr	c
      000542 9B               [12] 1154 	subb	a,r3
      000543 75 F0 05         [24] 1155 	mov	b,#0x05
      000546 A4               [48] 1156 	mul	ab
      000547 FB               [12] 1157 	mov	r3,a
      000548 AA 12            [24] 1158 	mov	r2,_matrix_draw_i_131072_35
      00054A 74 04            [12] 1159 	mov	a,#0x04
      00054C C3               [12] 1160 	clr	c
      00054D 9A               [12] 1161 	subb	a,r2
      00054E 2B               [12] 1162 	add	a,r3
                                   1163 ;	matrix.c:187: bool val = (active_muster >> (34 - index)) & 1;
      00054F D3               [12] 1164 	setb	c
      000550 94 22            [12] 1165 	subb	a,#0x22
      000552 F4               [12] 1166 	cpl	a
      000553 FB               [12] 1167 	mov	r3,a
      000554 8B F0            [24] 1168 	mov	b,r3
      000556 05 F0            [12] 1169 	inc	b
      000558 A8 0A            [24] 1170 	mov	r0,_matrix_draw_active_muster_65536_33
      00055A A9 0B            [24] 1171 	mov	r1,(_matrix_draw_active_muster_65536_33 + 1)
      00055C AA 0C            [24] 1172 	mov	r2,(_matrix_draw_active_muster_65536_33 + 2)
      00055E AB 0D            [24] 1173 	mov	r3,(_matrix_draw_active_muster_65536_33 + 3)
      000560 AC 0E            [24] 1174 	mov	r4,(_matrix_draw_active_muster_65536_33 + 4)
      000562 AD 0F            [24] 1175 	mov	r5,(_matrix_draw_active_muster_65536_33 + 5)
      000564 AE 10            [24] 1176 	mov	r6,(_matrix_draw_active_muster_65536_33 + 6)
      000566 AF 11            [24] 1177 	mov	r7,(_matrix_draw_active_muster_65536_33 + 7)
      000568 80 19            [24] 1178 	sjmp	00152$
      00056A                       1179 00151$:
      00056A C3               [12] 1180 	clr	c
      00056B EF               [12] 1181 	mov	a,r7
      00056C 13               [12] 1182 	rrc	a
      00056D FF               [12] 1183 	mov	r7,a
      00056E EE               [12] 1184 	mov	a,r6
      00056F 13               [12] 1185 	rrc	a
      000570 FE               [12] 1186 	mov	r6,a
      000571 ED               [12] 1187 	mov	a,r5
      000572 13               [12] 1188 	rrc	a
      000573 FD               [12] 1189 	mov	r5,a
      000574 EC               [12] 1190 	mov	a,r4
      000575 13               [12] 1191 	rrc	a
      000576 FC               [12] 1192 	mov	r4,a
      000577 EB               [12] 1193 	mov	a,r3
      000578 13               [12] 1194 	rrc	a
      000579 FB               [12] 1195 	mov	r3,a
      00057A EA               [12] 1196 	mov	a,r2
      00057B 13               [12] 1197 	rrc	a
      00057C FA               [12] 1198 	mov	r2,a
      00057D E9               [12] 1199 	mov	a,r1
      00057E 13               [12] 1200 	rrc	a
      00057F F9               [12] 1201 	mov	r1,a
      000580 E8               [12] 1202 	mov	a,r0
      000581 13               [12] 1203 	rrc	a
      000582 F8               [12] 1204 	mov	r0,a
      000583                       1205 00152$:
      000583 D5 F0 E4         [24] 1206 	djnz	b,00151$
      000586 E8               [12] 1207 	mov	a,r0
      000587 54 01            [12] 1208 	anl	a,#0x01
                                   1209 ;	matrix.c:188: if (val) {
      000589 FF               [12] 1210 	mov	r7,a
      00058A 60 09            [24] 1211 	jz	00110$
                                   1212 ;	matrix.c:189: set_row(j);
      00058C 85 14 82         [24] 1213 	mov	dpl,_matrix_draw_j_262144_37
      00058F 85 15 83         [24] 1214 	mov	dph,(_matrix_draw_j_262144_37 + 1)
      000592 12 01 A7         [24] 1215 	lcall	_set_row
      000595                       1216 00110$:
                                   1217 ;	matrix.c:185: for (int j = 0; j<7; j++) {
      000595 05 14            [12] 1218 	inc	_matrix_draw_j_262144_37
      000597 E4               [12] 1219 	clr	a
      000598 B5 14 95         [24] 1220 	cjne	a,_matrix_draw_j_262144_37,00109$
      00059B 05 15            [12] 1221 	inc	(_matrix_draw_j_262144_37 + 1)
      00059D 80 91            [24] 1222 	sjmp	00109$
      00059F                       1223 00113$:
                                   1224 ;	matrix.c:180: for (int i=0; i<5; i++) {
      00059F 05 12            [12] 1225 	inc	_matrix_draw_i_131072_35
      0005A1 E4               [12] 1226 	clr	a
      0005A2 B5 12 02         [24] 1227 	cjne	a,_matrix_draw_i_131072_35,00155$
      0005A5 05 13            [12] 1228 	inc	(_matrix_draw_i_131072_35 + 1)
      0005A7                       1229 00155$:
                                   1230 ;	matrix.c:193: }
      0005A7 02 05 0E         [24] 1231 	ljmp	00112$
                                   1232 ;------------------------------------------------------------
                                   1233 ;Allocation info for local variables in function 'matrix_setup'
                                   1234 ;------------------------------------------------------------
                                   1235 ;	matrix.c:195: void matrix_setup() {
                                   1236 ;	-----------------------------------------
                                   1237 ;	 function matrix_setup
                                   1238 ;	-----------------------------------------
      0005AA                       1239 _matrix_setup:
                                   1240 ;	matrix.c:196: matrix_reset();
                                   1241 ;	matrix.c:197: }
      0005AA 02 05 AD         [24] 1242 	ljmp	_matrix_reset
                                   1243 ;------------------------------------------------------------
                                   1244 ;Allocation info for local variables in function 'matrix_reset'
                                   1245 ;------------------------------------------------------------
                                   1246 ;	matrix.c:199: void matrix_reset() {
                                   1247 ;	-----------------------------------------
                                   1248 ;	 function matrix_reset
                                   1249 ;	-----------------------------------------
      0005AD                       1250 _matrix_reset:
                                   1251 ;	matrix.c:200: matrix_reset_rows();
      0005AD 12 05 B3         [24] 1252 	lcall	_matrix_reset_rows
                                   1253 ;	matrix.c:202: matrix_reset_cols();
                                   1254 ;	matrix.c:203: }
      0005B0 02 05 D9         [24] 1255 	ljmp	_matrix_reset_cols
                                   1256 ;------------------------------------------------------------
                                   1257 ;Allocation info for local variables in function 'matrix_reset_rows'
                                   1258 ;------------------------------------------------------------
                                   1259 ;i                         Allocated to registers r6 r7 
                                   1260 ;------------------------------------------------------------
                                   1261 ;	matrix.c:205: void matrix_reset_rows() {
                                   1262 ;	-----------------------------------------
                                   1263 ;	 function matrix_reset_rows
                                   1264 ;	-----------------------------------------
      0005B3                       1265 _matrix_reset_rows:
                                   1266 ;	matrix.c:206: for (int i = 0; i<7; i++) {
      0005B3 7E 00            [12] 1267 	mov	r6,#0x00
      0005B5 7F 00            [12] 1268 	mov	r7,#0x00
      0005B7                       1269 00103$:
      0005B7 C3               [12] 1270 	clr	c
      0005B8 EE               [12] 1271 	mov	a,r6
      0005B9 94 07            [12] 1272 	subb	a,#0x07
      0005BB EF               [12] 1273 	mov	a,r7
      0005BC 64 80            [12] 1274 	xrl	a,#0x80
      0005BE 94 80            [12] 1275 	subb	a,#0x80
      0005C0 50 16            [24] 1276 	jnc	00105$
                                   1277 ;	matrix.c:207: reset_row(i);
      0005C2 8E 82            [24] 1278 	mov	dpl,r6
      0005C4 8F 83            [24] 1279 	mov	dph,r7
      0005C6 C0 07            [24] 1280 	push	ar7
      0005C8 C0 06            [24] 1281 	push	ar6
      0005CA 12 01 BD         [24] 1282 	lcall	_reset_row
      0005CD D0 06            [24] 1283 	pop	ar6
      0005CF D0 07            [24] 1284 	pop	ar7
                                   1285 ;	matrix.c:206: for (int i = 0; i<7; i++) {
      0005D1 0E               [12] 1286 	inc	r6
      0005D2 BE 00 E2         [24] 1287 	cjne	r6,#0x00,00103$
      0005D5 0F               [12] 1288 	inc	r7
      0005D6 80 DF            [24] 1289 	sjmp	00103$
      0005D8                       1290 00105$:
                                   1291 ;	matrix.c:209: }
      0005D8 22               [24] 1292 	ret
                                   1293 ;------------------------------------------------------------
                                   1294 ;Allocation info for local variables in function 'matrix_reset_cols'
                                   1295 ;------------------------------------------------------------
                                   1296 ;i                         Allocated to registers r6 r7 
                                   1297 ;------------------------------------------------------------
                                   1298 ;	matrix.c:211: void matrix_reset_cols() {
                                   1299 ;	-----------------------------------------
                                   1300 ;	 function matrix_reset_cols
                                   1301 ;	-----------------------------------------
      0005D9                       1302 _matrix_reset_cols:
                                   1303 ;	matrix.c:212: for (int i = 0; i<5; i++) {
      0005D9 7E 00            [12] 1304 	mov	r6,#0x00
      0005DB 7F 00            [12] 1305 	mov	r7,#0x00
      0005DD                       1306 00103$:
      0005DD C3               [12] 1307 	clr	c
      0005DE EE               [12] 1308 	mov	a,r6
      0005DF 94 05            [12] 1309 	subb	a,#0x05
      0005E1 EF               [12] 1310 	mov	a,r7
      0005E2 64 80            [12] 1311 	xrl	a,#0x80
      0005E4 94 80            [12] 1312 	subb	a,#0x80
      0005E6 50 16            [24] 1313 	jnc	00105$
                                   1314 ;	matrix.c:213: set_col(i);
      0005E8 8E 82            [24] 1315 	mov	dpl,r6
      0005EA 8F 83            [24] 1316 	mov	dph,r7
      0005EC C0 07            [24] 1317 	push	ar7
      0005EE C0 06            [24] 1318 	push	ar6
      0005F0 12 01 31         [24] 1319 	lcall	_set_col
      0005F3 D0 06            [24] 1320 	pop	ar6
      0005F5 D0 07            [24] 1321 	pop	ar7
                                   1322 ;	matrix.c:212: for (int i = 0; i<5; i++) {
      0005F7 0E               [12] 1323 	inc	r6
      0005F8 BE 00 E2         [24] 1324 	cjne	r6,#0x00,00103$
      0005FB 0F               [12] 1325 	inc	r7
      0005FC 80 DF            [24] 1326 	sjmp	00103$
      0005FE                       1327 00105$:
                                   1328 ;	matrix.c:215: }
      0005FE 22               [24] 1329 	ret
                                   1330 	.area CSEG    (CODE)
                                   1331 	.area CONST   (CODE)
                                   1332 	.area XINIT   (CODE)
                                   1333 	.area CABS    (ABS,CODE)

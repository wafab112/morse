                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _morse_cpy_PARM_2
                                     12 	.globl _ISR_Timer0
                                     13 	.globl _main
                                     14 	.globl _morse_cpy
                                     15 	.globl _matrix_setup
                                     16 	.globl _matrix_draw
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _F1
                                     24 	.globl _P
                                     25 	.globl _PS
                                     26 	.globl _PT1
                                     27 	.globl _PX1
                                     28 	.globl _PT0
                                     29 	.globl _PX0
                                     30 	.globl _RD
                                     31 	.globl _WR
                                     32 	.globl _T1
                                     33 	.globl _T0
                                     34 	.globl _INT1
                                     35 	.globl _INT0
                                     36 	.globl _TXD
                                     37 	.globl _RXD
                                     38 	.globl _P3_7
                                     39 	.globl _P3_6
                                     40 	.globl _P3_5
                                     41 	.globl _P3_4
                                     42 	.globl _P3_3
                                     43 	.globl _P3_2
                                     44 	.globl _P3_1
                                     45 	.globl _P3_0
                                     46 	.globl _EA
                                     47 	.globl _ES
                                     48 	.globl _ET1
                                     49 	.globl _EX1
                                     50 	.globl _ET0
                                     51 	.globl _EX0
                                     52 	.globl _P2_7
                                     53 	.globl _P2_6
                                     54 	.globl _P2_5
                                     55 	.globl _P2_4
                                     56 	.globl _P2_3
                                     57 	.globl _P2_2
                                     58 	.globl _P2_1
                                     59 	.globl _P2_0
                                     60 	.globl _SM0
                                     61 	.globl _SM1
                                     62 	.globl _SM2
                                     63 	.globl _REN
                                     64 	.globl _TB8
                                     65 	.globl _RB8
                                     66 	.globl _TI
                                     67 	.globl _RI
                                     68 	.globl _P1_7
                                     69 	.globl _P1_6
                                     70 	.globl _P1_5
                                     71 	.globl _P1_4
                                     72 	.globl _P1_3
                                     73 	.globl _P1_2
                                     74 	.globl _P1_1
                                     75 	.globl _P1_0
                                     76 	.globl _TF1
                                     77 	.globl _TR1
                                     78 	.globl _TF0
                                     79 	.globl _TR0
                                     80 	.globl _IE1
                                     81 	.globl _IT1
                                     82 	.globl _IE0
                                     83 	.globl _IT0
                                     84 	.globl _P0_7
                                     85 	.globl _P0_6
                                     86 	.globl _P0_5
                                     87 	.globl _P0_4
                                     88 	.globl _P0_3
                                     89 	.globl _P0_2
                                     90 	.globl _P0_1
                                     91 	.globl _P0_0
                                     92 	.globl _B
                                     93 	.globl _ACC
                                     94 	.globl _PSW
                                     95 	.globl _IP
                                     96 	.globl _P3
                                     97 	.globl _IE
                                     98 	.globl _P2
                                     99 	.globl _SBUF
                                    100 	.globl _SCON
                                    101 	.globl _P1
                                    102 	.globl _TH1
                                    103 	.globl _TH0
                                    104 	.globl _TL1
                                    105 	.globl _TL0
                                    106 	.globl _TMOD
                                    107 	.globl _TCON
                                    108 	.globl _PCON
                                    109 	.globl _DPH
                                    110 	.globl _DPL
                                    111 	.globl _SP
                                    112 	.globl _P0
                                    113 	.globl _lastChar
                                    114 	.globl _t
                                    115 	.globl _loop
                                    116 ;--------------------------------------------------------
                                    117 ; special function registers
                                    118 ;--------------------------------------------------------
                                    119 	.area RSEG    (ABS,DATA)
      000000                        120 	.org 0x0000
                           000080   121 _P0	=	0x0080
                           000081   122 _SP	=	0x0081
                           000082   123 _DPL	=	0x0082
                           000083   124 _DPH	=	0x0083
                           000087   125 _PCON	=	0x0087
                           000088   126 _TCON	=	0x0088
                           000089   127 _TMOD	=	0x0089
                           00008A   128 _TL0	=	0x008a
                           00008B   129 _TL1	=	0x008b
                           00008C   130 _TH0	=	0x008c
                           00008D   131 _TH1	=	0x008d
                           000090   132 _P1	=	0x0090
                           000098   133 _SCON	=	0x0098
                           000099   134 _SBUF	=	0x0099
                           0000A0   135 _P2	=	0x00a0
                           0000A8   136 _IE	=	0x00a8
                           0000B0   137 _P3	=	0x00b0
                           0000B8   138 _IP	=	0x00b8
                           0000D0   139 _PSW	=	0x00d0
                           0000E0   140 _ACC	=	0x00e0
                           0000F0   141 _B	=	0x00f0
                                    142 ;--------------------------------------------------------
                                    143 ; special function bits
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0_0	=	0x0080
                           000081   148 _P0_1	=	0x0081
                           000082   149 _P0_2	=	0x0082
                           000083   150 _P0_3	=	0x0083
                           000084   151 _P0_4	=	0x0084
                           000085   152 _P0_5	=	0x0085
                           000086   153 _P0_6	=	0x0086
                           000087   154 _P0_7	=	0x0087
                           000088   155 _IT0	=	0x0088
                           000089   156 _IE0	=	0x0089
                           00008A   157 _IT1	=	0x008a
                           00008B   158 _IE1	=	0x008b
                           00008C   159 _TR0	=	0x008c
                           00008D   160 _TF0	=	0x008d
                           00008E   161 _TR1	=	0x008e
                           00008F   162 _TF1	=	0x008f
                           000090   163 _P1_0	=	0x0090
                           000091   164 _P1_1	=	0x0091
                           000092   165 _P1_2	=	0x0092
                           000093   166 _P1_3	=	0x0093
                           000094   167 _P1_4	=	0x0094
                           000095   168 _P1_5	=	0x0095
                           000096   169 _P1_6	=	0x0096
                           000097   170 _P1_7	=	0x0097
                           000098   171 _RI	=	0x0098
                           000099   172 _TI	=	0x0099
                           00009A   173 _RB8	=	0x009a
                           00009B   174 _TB8	=	0x009b
                           00009C   175 _REN	=	0x009c
                           00009D   176 _SM2	=	0x009d
                           00009E   177 _SM1	=	0x009e
                           00009F   178 _SM0	=	0x009f
                           0000A0   179 _P2_0	=	0x00a0
                           0000A1   180 _P2_1	=	0x00a1
                           0000A2   181 _P2_2	=	0x00a2
                           0000A3   182 _P2_3	=	0x00a3
                           0000A4   183 _P2_4	=	0x00a4
                           0000A5   184 _P2_5	=	0x00a5
                           0000A6   185 _P2_6	=	0x00a6
                           0000A7   186 _P2_7	=	0x00a7
                           0000A8   187 _EX0	=	0x00a8
                           0000A9   188 _ET0	=	0x00a9
                           0000AA   189 _EX1	=	0x00aa
                           0000AB   190 _ET1	=	0x00ab
                           0000AC   191 _ES	=	0x00ac
                           0000AF   192 _EA	=	0x00af
                           0000B0   193 _P3_0	=	0x00b0
                           0000B1   194 _P3_1	=	0x00b1
                           0000B2   195 _P3_2	=	0x00b2
                           0000B3   196 _P3_3	=	0x00b3
                           0000B4   197 _P3_4	=	0x00b4
                           0000B5   198 _P3_5	=	0x00b5
                           0000B6   199 _P3_6	=	0x00b6
                           0000B7   200 _P3_7	=	0x00b7
                           0000B0   201 _RXD	=	0x00b0
                           0000B1   202 _TXD	=	0x00b1
                           0000B2   203 _INT0	=	0x00b2
                           0000B3   204 _INT1	=	0x00b3
                           0000B4   205 _T0	=	0x00b4
                           0000B5   206 _T1	=	0x00b5
                           0000B6   207 _WR	=	0x00b6
                           0000B7   208 _RD	=	0x00b7
                           0000B8   209 _PX0	=	0x00b8
                           0000B9   210 _PT0	=	0x00b9
                           0000BA   211 _PX1	=	0x00ba
                           0000BB   212 _PT1	=	0x00bb
                           0000BC   213 _PS	=	0x00bc
                           0000D0   214 _P	=	0x00d0
                           0000D1   215 _F1	=	0x00d1
                           0000D2   216 _OV	=	0x00d2
                           0000D3   217 _RS0	=	0x00d3
                           0000D4   218 _RS1	=	0x00d4
                           0000D5   219 _F0	=	0x00d5
                           0000D6   220 _AC	=	0x00d6
                           0000D7   221 _CY	=	0x00d7
                                    222 ;--------------------------------------------------------
                                    223 ; overlayable register banks
                                    224 ;--------------------------------------------------------
                                    225 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        226 	.ds 8
                                    227 ;--------------------------------------------------------
                                    228 ; overlayable bit register bank
                                    229 ;--------------------------------------------------------
                                    230 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        231 bits:
      000000                        232 	.ds 1
                           008000   233 	b0 = bits[0]
                           008100   234 	b1 = bits[1]
                           008200   235 	b2 = bits[2]
                           008300   236 	b3 = bits[3]
                           008400   237 	b4 = bits[4]
                           008500   238 	b5 = bits[5]
                           008600   239 	b6 = bits[6]
                           008700   240 	b7 = bits[7]
                                    241 ;--------------------------------------------------------
                                    242 ; internal ram data
                                    243 ;--------------------------------------------------------
                                    244 	.area DSEG    (DATA)
      000000                        245 _t::
      000000                        246 	.ds 4
      000004                        247 _lastChar::
      000004                        248 	.ds 1
                                    249 ;--------------------------------------------------------
                                    250 ; overlayable items in internal ram 
                                    251 ;--------------------------------------------------------
                                    252 	.area	OSEG    (OVR,DATA)
      000000                        253 _morse_cpy_PARM_2:
      000000                        254 	.ds 3
                                    255 ;--------------------------------------------------------
                                    256 ; Stack segment in internal ram 
                                    257 ;--------------------------------------------------------
                                    258 	.area	SSEG
      000000                        259 __start__stack:
      000000                        260 	.ds	1
                                    261 
                                    262 ;--------------------------------------------------------
                                    263 ; indirectly addressable internal ram data
                                    264 ;--------------------------------------------------------
                                    265 	.area ISEG    (DATA)
                                    266 ;--------------------------------------------------------
                                    267 ; absolute internal ram data
                                    268 ;--------------------------------------------------------
                                    269 	.area IABS    (ABS,DATA)
                                    270 	.area IABS    (ABS,DATA)
                                    271 ;--------------------------------------------------------
                                    272 ; bit data
                                    273 ;--------------------------------------------------------
                                    274 	.area BSEG    (BIT)
                                    275 ;--------------------------------------------------------
                                    276 ; paged external ram data
                                    277 ;--------------------------------------------------------
                                    278 	.area PSEG    (PAG,XDATA)
                                    279 ;--------------------------------------------------------
                                    280 ; external ram data
                                    281 ;--------------------------------------------------------
                                    282 	.area XSEG    (XDATA)
                                    283 ;--------------------------------------------------------
                                    284 ; absolute external ram data
                                    285 ;--------------------------------------------------------
                                    286 	.area XABS    (ABS,XDATA)
                                    287 ;--------------------------------------------------------
                                    288 ; external initialized ram data
                                    289 ;--------------------------------------------------------
                                    290 	.area XISEG   (XDATA)
                                    291 	.area HOME    (CODE)
                                    292 	.area GSINIT0 (CODE)
                                    293 	.area GSINIT1 (CODE)
                                    294 	.area GSINIT2 (CODE)
                                    295 	.area GSINIT3 (CODE)
                                    296 	.area GSINIT4 (CODE)
                                    297 	.area GSINIT5 (CODE)
                                    298 	.area GSINIT  (CODE)
                                    299 	.area GSFINAL (CODE)
                                    300 	.area CSEG    (CODE)
                                    301 ;--------------------------------------------------------
                                    302 ; interrupt vector 
                                    303 ;--------------------------------------------------------
                                    304 	.area HOME    (CODE)
      000000                        305 __interrupt_vect:
      000000 02r00r00         [24]  306 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  307 	reti
      000004                        308 	.ds	7
      00000B 02r00r57         [24]  309 	ljmp	_ISR_Timer0
                                    310 ;--------------------------------------------------------
                                    311 ; global & static initialisations
                                    312 ;--------------------------------------------------------
                                    313 	.area HOME    (CODE)
                                    314 	.area GSINIT  (CODE)
                                    315 	.area GSFINAL (CODE)
                                    316 	.area GSINIT  (CODE)
                                    317 	.globl __sdcc_gsinit_startup
                                    318 	.globl __sdcc_program_startup
                                    319 	.globl __start__stack
                                    320 	.globl __mcs51_genXINIT
                                    321 	.globl __mcs51_genXRAMCLEAR
                                    322 	.globl __mcs51_genRAMCLEAR
                                    323 ;	main.c:11: volatile uint32_t t = 0;
      000000 E4               [12]  324 	clr	a
      000001 F5*00            [12]  325 	mov	_t,a
      000003 F5*01            [12]  326 	mov	(_t + 1),a
      000005 F5*02            [12]  327 	mov	(_t + 2),a
      000007 F5*03            [12]  328 	mov	(_t + 3),a
                                    329 ;	main.c:12: char lastChar = 'A'-1;
      000009 75*04 40         [24]  330 	mov	_lastChar,#0x40
                                    331 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  332 	ljmp	__sdcc_program_startup
                                    333 ;--------------------------------------------------------
                                    334 ; Home
                                    335 ;--------------------------------------------------------
                                    336 	.area HOME    (CODE)
                                    337 	.area HOME    (CODE)
      00000E                        338 __sdcc_program_startup:
      00000E 02r00r3A         [24]  339 	ljmp	_main
                                    340 ;	return from main will return to caller
                                    341 ;--------------------------------------------------------
                                    342 ; code
                                    343 ;--------------------------------------------------------
                                    344 	.area CSEG    (CODE)
                                    345 ;------------------------------------------------------------
                                    346 ;Allocation info for local variables in function 'morse_cpy'
                                    347 ;------------------------------------------------------------
                                    348 ;src                       Allocated with name '_morse_cpy_PARM_2'
                                    349 ;dest                      Allocated to registers r5 r6 r7 
                                    350 ;------------------------------------------------------------
                                    351 ;	morse.h:14: void morse_cpy(morse_t* dest, morse_t* src) {
                                    352 ;	-----------------------------------------
                                    353 ;	 function morse_cpy
                                    354 ;	-----------------------------------------
      000000                        355 _morse_cpy:
                           000007   356 	ar7 = 0x07
                           000006   357 	ar6 = 0x06
                           000005   358 	ar5 = 0x05
                           000004   359 	ar4 = 0x04
                           000003   360 	ar3 = 0x03
                           000002   361 	ar2 = 0x02
                           000001   362 	ar1 = 0x01
                           000000   363 	ar0 = 0x00
      000000 AD 82            [24]  364 	mov	r5,dpl
      000002 AE 83            [24]  365 	mov	r6,dph
      000004 AF F0            [24]  366 	mov	r7,b
                                    367 ;	morse.h:15: dest->pattern = src->pattern;
      000006 AA*00            [24]  368 	mov	r2,_morse_cpy_PARM_2
      000008 AB*01            [24]  369 	mov	r3,(_morse_cpy_PARM_2 + 1)
      00000A AC*02            [24]  370 	mov	r4,(_morse_cpy_PARM_2 + 2)
      00000C 8A 82            [24]  371 	mov	dpl,r2
      00000E 8B 83            [24]  372 	mov	dph,r3
      000010 8C F0            [24]  373 	mov	b,r4
      000012 12r00r00         [24]  374 	lcall	__gptrget
      000015 8D 82            [24]  375 	mov	dpl,r5
      000017 8E 83            [24]  376 	mov	dph,r6
      000019 8F F0            [24]  377 	mov	b,r7
      00001B 12r00r00         [24]  378 	lcall	__gptrput
                                    379 ;	morse.h:16: dest->size = src->size;
      00001E 0D               [12]  380 	inc	r5
      00001F BD 00 01         [24]  381 	cjne	r5,#0x00,00103$
      000022 0E               [12]  382 	inc	r6
      000023                        383 00103$:
      000023 0A               [12]  384 	inc	r2
      000024 BA 00 01         [24]  385 	cjne	r2,#0x00,00104$
      000027 0B               [12]  386 	inc	r3
      000028                        387 00104$:
      000028 8A 82            [24]  388 	mov	dpl,r2
      00002A 8B 83            [24]  389 	mov	dph,r3
      00002C 8C F0            [24]  390 	mov	b,r4
      00002E 12r00r00         [24]  391 	lcall	__gptrget
      000031 8D 82            [24]  392 	mov	dpl,r5
      000033 8E 83            [24]  393 	mov	dph,r6
      000035 8F F0            [24]  394 	mov	b,r7
                                    395 ;	morse.h:17: }
      000037 02r00r00         [24]  396 	ljmp	__gptrput
                                    397 ;------------------------------------------------------------
                                    398 ;Allocation info for local variables in function 'main'
                                    399 ;------------------------------------------------------------
                                    400 ;	main.c:16: int main() {
                                    401 ;	-----------------------------------------
                                    402 ;	 function main
                                    403 ;	-----------------------------------------
      00003A                        404 _main:
                                    405 ;	main.c:17: matrix_setup();
      00003A 12r00r00         [24]  406 	lcall	_matrix_setup
                                    407 ;	main.c:19: TMOD = 0x01;
      00003D 75 89 01         [24]  408 	mov	_TMOD,#0x01
                                    409 ;	main.c:20: TH0 = 0xFC;
      000040 75 8C FC         [24]  410 	mov	_TH0,#0xfc
                                    411 ;	main.c:21: TL0 = 0x18;
      000043 75 8A 18         [24]  412 	mov	_TL0,#0x18
                                    413 ;	main.c:23: ET0 = 1;
                                    414 ;	assignBit
      000046 D2 A9            [12]  415 	setb	_ET0
                                    416 ;	main.c:24: EA = 1;
                                    417 ;	assignBit
      000048 D2 AF            [12]  418 	setb	_EA
                                    419 ;	main.c:26: TR0 = 1;
                                    420 ;	assignBit
      00004A D2 8C            [12]  421 	setb	_TR0
                                    422 ;	main.c:28: while(1) {
      00004C                        423 00102$:
                                    424 ;	main.c:29: loop();
      00004C 12r00r51         [24]  425 	lcall	_loop
                                    426 ;	main.c:31: }
      00004F 80 FB            [24]  427 	sjmp	00102$
                                    428 ;------------------------------------------------------------
                                    429 ;Allocation info for local variables in function 'loop'
                                    430 ;------------------------------------------------------------
                                    431 ;	main.c:33: void loop() {
                                    432 ;	-----------------------------------------
                                    433 ;	 function loop
                                    434 ;	-----------------------------------------
      000051                        435 _loop:
                                    436 ;	main.c:34: matrix_draw(lastChar);
      000051 85*04 82         [24]  437 	mov	dpl,_lastChar
                                    438 ;	main.c:35: }
      000054 02r00r00         [24]  439 	ljmp	_matrix_draw
                                    440 ;------------------------------------------------------------
                                    441 ;Allocation info for local variables in function 'ISR_Timer0'
                                    442 ;------------------------------------------------------------
                                    443 ;	main.c:37: void ISR_Timer0(void) __interrupt 1 {
                                    444 ;	-----------------------------------------
                                    445 ;	 function ISR_Timer0
                                    446 ;	-----------------------------------------
      000057                        447 _ISR_Timer0:
      000057 C0*00            [24]  448 	push	bits
      000059 C0 E0            [24]  449 	push	acc
      00005B C0 F0            [24]  450 	push	b
      00005D C0 82            [24]  451 	push	dpl
      00005F C0 83            [24]  452 	push	dph
      000061 C0 07            [24]  453 	push	(0+7)
      000063 C0 06            [24]  454 	push	(0+6)
      000065 C0 05            [24]  455 	push	(0+5)
      000067 C0 04            [24]  456 	push	(0+4)
      000069 C0 03            [24]  457 	push	(0+3)
      00006B C0 02            [24]  458 	push	(0+2)
      00006D C0 01            [24]  459 	push	(0+1)
      00006F C0 00            [24]  460 	push	(0+0)
      000071 C0 D0            [24]  461 	push	psw
      000073 75 D0 00         [24]  462 	mov	psw,#0x00
                                    463 ;	main.c:38: TH0 = 0xFC;
      000076 75 8C FC         [24]  464 	mov	_TH0,#0xfc
                                    465 ;	main.c:39: TL0 = 0x18;
      000079 75 8A 18         [24]  466 	mov	_TL0,#0x18
                                    467 ;	main.c:41: t++;
      00007C 74 01            [12]  468 	mov	a,#0x01
      00007E 25*00            [12]  469 	add	a,_t
      000080 F5*00            [12]  470 	mov	_t,a
      000082 E4               [12]  471 	clr	a
      000083 35*01            [12]  472 	addc	a,(_t + 1)
      000085 F5*01            [12]  473 	mov	(_t + 1),a
      000087 E4               [12]  474 	clr	a
      000088 35*02            [12]  475 	addc	a,(_t + 2)
      00008A F5*02            [12]  476 	mov	(_t + 2),a
      00008C E4               [12]  477 	clr	a
      00008D 35*03            [12]  478 	addc	a,(_t + 3)
      00008F F5*03            [12]  479 	mov	(_t + 3),a
                                    480 ;	main.c:43: t = t % 1000;
      000091 75*00 E8         [24]  481 	mov	__modulong_PARM_2,#0xe8
      000094 75*01 03         [24]  482 	mov	(__modulong_PARM_2 + 1),#0x03
      000097 E4               [12]  483 	clr	a
      000098 F5*02            [12]  484 	mov	(__modulong_PARM_2 + 2),a
      00009A F5*03            [12]  485 	mov	(__modulong_PARM_2 + 3),a
      00009C 85*00 82         [24]  486 	mov	dpl,_t
      00009F 85*01 83         [24]  487 	mov	dph,(_t + 1)
      0000A2 85*02 F0         [24]  488 	mov	b,(_t + 2)
      0000A5 E5*03            [12]  489 	mov	a,(_t + 3)
      0000A7 12r00r00         [24]  490 	lcall	__modulong
      0000AA 85 82*00         [24]  491 	mov	_t,dpl
      0000AD 85 83*01         [24]  492 	mov	(_t + 1),dph
      0000B0 85 F0*02         [24]  493 	mov	(_t + 2),b
      0000B3 F5*03            [12]  494 	mov	(_t + 3),a
                                    495 ;	main.c:45: if (t == 0) {
      0000B5 E5*00            [12]  496 	mov	a,_t
      0000B7 45*01            [12]  497 	orl	a,(_t + 1)
      0000B9 45*02            [12]  498 	orl	a,(_t + 2)
      0000BB 45*03            [12]  499 	orl	a,(_t + 3)
      0000BD 70 02            [24]  500 	jnz	00103$
                                    501 ;	main.c:46: lastChar++;
      0000BF 05*04            [12]  502 	inc	_lastChar
      0000C1                        503 00103$:
                                    504 ;	main.c:48: }
      0000C1 D0 D0            [24]  505 	pop	psw
      0000C3 D0 00            [24]  506 	pop	(0+0)
      0000C5 D0 01            [24]  507 	pop	(0+1)
      0000C7 D0 02            [24]  508 	pop	(0+2)
      0000C9 D0 03            [24]  509 	pop	(0+3)
      0000CB D0 04            [24]  510 	pop	(0+4)
      0000CD D0 05            [24]  511 	pop	(0+5)
      0000CF D0 06            [24]  512 	pop	(0+6)
      0000D1 D0 07            [24]  513 	pop	(0+7)
      0000D3 D0 83            [24]  514 	pop	dph
      0000D5 D0 82            [24]  515 	pop	dpl
      0000D7 D0 F0            [24]  516 	pop	b
      0000D9 D0 E0            [24]  517 	pop	acc
      0000DB D0*00            [24]  518 	pop	bits
      0000DD 32               [24]  519 	reti
                                    520 	.area CSEG    (CODE)
                                    521 	.area CONST   (CODE)
                                    522 	.area XINIT   (CODE)
                                    523 	.area CABS    (ABS,CODE)

                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module matrix
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _reset_row
                                     12 	.globl _set_row
                                     13 	.globl _reset_col
                                     14 	.globl _set_col
                                     15 	.globl _CY
                                     16 	.globl _AC
                                     17 	.globl _F0
                                     18 	.globl _RS1
                                     19 	.globl _RS0
                                     20 	.globl _OV
                                     21 	.globl _F1
                                     22 	.globl _P
                                     23 	.globl _PS
                                     24 	.globl _PT1
                                     25 	.globl _PX1
                                     26 	.globl _PT0
                                     27 	.globl _PX0
                                     28 	.globl _RD
                                     29 	.globl _WR
                                     30 	.globl _T1
                                     31 	.globl _T0
                                     32 	.globl _INT1
                                     33 	.globl _INT0
                                     34 	.globl _TXD
                                     35 	.globl _RXD
                                     36 	.globl _P3_7
                                     37 	.globl _P3_6
                                     38 	.globl _P3_5
                                     39 	.globl _P3_4
                                     40 	.globl _P3_3
                                     41 	.globl _P3_2
                                     42 	.globl _P3_1
                                     43 	.globl _P3_0
                                     44 	.globl _EA
                                     45 	.globl _ES
                                     46 	.globl _ET1
                                     47 	.globl _EX1
                                     48 	.globl _ET0
                                     49 	.globl _EX0
                                     50 	.globl _P2_7
                                     51 	.globl _P2_6
                                     52 	.globl _P2_5
                                     53 	.globl _P2_4
                                     54 	.globl _P2_3
                                     55 	.globl _P2_2
                                     56 	.globl _P2_1
                                     57 	.globl _P2_0
                                     58 	.globl _SM0
                                     59 	.globl _SM1
                                     60 	.globl _SM2
                                     61 	.globl _REN
                                     62 	.globl _TB8
                                     63 	.globl _RB8
                                     64 	.globl _TI
                                     65 	.globl _RI
                                     66 	.globl _P1_7
                                     67 	.globl _P1_6
                                     68 	.globl _P1_5
                                     69 	.globl _P1_4
                                     70 	.globl _P1_3
                                     71 	.globl _P1_2
                                     72 	.globl _P1_1
                                     73 	.globl _P1_0
                                     74 	.globl _TF1
                                     75 	.globl _TR1
                                     76 	.globl _TF0
                                     77 	.globl _TR0
                                     78 	.globl _IE1
                                     79 	.globl _IT1
                                     80 	.globl _IE0
                                     81 	.globl _IT0
                                     82 	.globl _P0_7
                                     83 	.globl _P0_6
                                     84 	.globl _P0_5
                                     85 	.globl _P0_4
                                     86 	.globl _P0_3
                                     87 	.globl _P0_2
                                     88 	.globl _P0_1
                                     89 	.globl _P0_0
                                     90 	.globl _B
                                     91 	.globl _ACC
                                     92 	.globl _PSW
                                     93 	.globl _IP
                                     94 	.globl _P3
                                     95 	.globl _IE
                                     96 	.globl _P2
                                     97 	.globl _SBUF
                                     98 	.globl _SCON
                                     99 	.globl _P1
                                    100 	.globl _TH1
                                    101 	.globl _TH0
                                    102 	.globl _TL1
                                    103 	.globl _TL0
                                    104 	.globl _TMOD
                                    105 	.globl _TCON
                                    106 	.globl _PCON
                                    107 	.globl _DPH
                                    108 	.globl _DPL
                                    109 	.globl _SP
                                    110 	.globl _P0
                                    111 	.globl _matrix_draw
                                    112 	.globl _matrix_setup
                                    113 	.globl _matrix_reset
                                    114 	.globl _matrix_reset_rows
                                    115 	.globl _matrix_reset_cols
                                    116 ;--------------------------------------------------------
                                    117 ; special function registers
                                    118 ;--------------------------------------------------------
                                    119 	.area RSEG    (ABS,DATA)
      000000                        120 	.org 0x0000
                           000080   121 _P0	=	0x0080
                           000081   122 _SP	=	0x0081
                           000082   123 _DPL	=	0x0082
                           000083   124 _DPH	=	0x0083
                           000087   125 _PCON	=	0x0087
                           000088   126 _TCON	=	0x0088
                           000089   127 _TMOD	=	0x0089
                           00008A   128 _TL0	=	0x008a
                           00008B   129 _TL1	=	0x008b
                           00008C   130 _TH0	=	0x008c
                           00008D   131 _TH1	=	0x008d
                           000090   132 _P1	=	0x0090
                           000098   133 _SCON	=	0x0098
                           000099   134 _SBUF	=	0x0099
                           0000A0   135 _P2	=	0x00a0
                           0000A8   136 _IE	=	0x00a8
                           0000B0   137 _P3	=	0x00b0
                           0000B8   138 _IP	=	0x00b8
                           0000D0   139 _PSW	=	0x00d0
                           0000E0   140 _ACC	=	0x00e0
                           0000F0   141 _B	=	0x00f0
                                    142 ;--------------------------------------------------------
                                    143 ; special function bits
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0_0	=	0x0080
                           000081   148 _P0_1	=	0x0081
                           000082   149 _P0_2	=	0x0082
                           000083   150 _P0_3	=	0x0083
                           000084   151 _P0_4	=	0x0084
                           000085   152 _P0_5	=	0x0085
                           000086   153 _P0_6	=	0x0086
                           000087   154 _P0_7	=	0x0087
                           000088   155 _IT0	=	0x0088
                           000089   156 _IE0	=	0x0089
                           00008A   157 _IT1	=	0x008a
                           00008B   158 _IE1	=	0x008b
                           00008C   159 _TR0	=	0x008c
                           00008D   160 _TF0	=	0x008d
                           00008E   161 _TR1	=	0x008e
                           00008F   162 _TF1	=	0x008f
                           000090   163 _P1_0	=	0x0090
                           000091   164 _P1_1	=	0x0091
                           000092   165 _P1_2	=	0x0092
                           000093   166 _P1_3	=	0x0093
                           000094   167 _P1_4	=	0x0094
                           000095   168 _P1_5	=	0x0095
                           000096   169 _P1_6	=	0x0096
                           000097   170 _P1_7	=	0x0097
                           000098   171 _RI	=	0x0098
                           000099   172 _TI	=	0x0099
                           00009A   173 _RB8	=	0x009a
                           00009B   174 _TB8	=	0x009b
                           00009C   175 _REN	=	0x009c
                           00009D   176 _SM2	=	0x009d
                           00009E   177 _SM1	=	0x009e
                           00009F   178 _SM0	=	0x009f
                           0000A0   179 _P2_0	=	0x00a0
                           0000A1   180 _P2_1	=	0x00a1
                           0000A2   181 _P2_2	=	0x00a2
                           0000A3   182 _P2_3	=	0x00a3
                           0000A4   183 _P2_4	=	0x00a4
                           0000A5   184 _P2_5	=	0x00a5
                           0000A6   185 _P2_6	=	0x00a6
                           0000A7   186 _P2_7	=	0x00a7
                           0000A8   187 _EX0	=	0x00a8
                           0000A9   188 _ET0	=	0x00a9
                           0000AA   189 _EX1	=	0x00aa
                           0000AB   190 _ET1	=	0x00ab
                           0000AC   191 _ES	=	0x00ac
                           0000AF   192 _EA	=	0x00af
                           0000B0   193 _P3_0	=	0x00b0
                           0000B1   194 _P3_1	=	0x00b1
                           0000B2   195 _P3_2	=	0x00b2
                           0000B3   196 _P3_3	=	0x00b3
                           0000B4   197 _P3_4	=	0x00b4
                           0000B5   198 _P3_5	=	0x00b5
                           0000B6   199 _P3_6	=	0x00b6
                           0000B7   200 _P3_7	=	0x00b7
                           0000B0   201 _RXD	=	0x00b0
                           0000B1   202 _TXD	=	0x00b1
                           0000B2   203 _INT0	=	0x00b2
                           0000B3   204 _INT1	=	0x00b3
                           0000B4   205 _T0	=	0x00b4
                           0000B5   206 _T1	=	0x00b5
                           0000B6   207 _WR	=	0x00b6
                           0000B7   208 _RD	=	0x00b7
                           0000B8   209 _PX0	=	0x00b8
                           0000B9   210 _PT0	=	0x00b9
                           0000BA   211 _PX1	=	0x00ba
                           0000BB   212 _PT1	=	0x00bb
                           0000BC   213 _PS	=	0x00bc
                           0000D0   214 _P	=	0x00d0
                           0000D1   215 _F1	=	0x00d1
                           0000D2   216 _OV	=	0x00d2
                           0000D3   217 _RS0	=	0x00d3
                           0000D4   218 _RS1	=	0x00d4
                           0000D5   219 _F0	=	0x00d5
                           0000D6   220 _AC	=	0x00d6
                           0000D7   221 _CY	=	0x00d7
                                    222 ;--------------------------------------------------------
                                    223 ; overlayable register banks
                                    224 ;--------------------------------------------------------
                                    225 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        226 	.ds 8
                                    227 ;--------------------------------------------------------
                                    228 ; internal ram data
                                    229 ;--------------------------------------------------------
                                    230 	.area DSEG    (DATA)
      00000D                        231 _matrix_draw_active_muster_65536_29:
      00000D                        232 	.ds 8
      000015                        233 _matrix_draw_i_131072_31:
      000015                        234 	.ds 2
      000017                        235 _matrix_draw_j_262144_33:
      000017                        236 	.ds 2
                                    237 ;--------------------------------------------------------
                                    238 ; overlayable items in internal ram 
                                    239 ;--------------------------------------------------------
                                    240 	.area	OSEG    (OVR,DATA)
                                    241 	.area	OSEG    (OVR,DATA)
                                    242 	.area	OSEG    (OVR,DATA)
                                    243 	.area	OSEG    (OVR,DATA)
                                    244 	.area	OSEG    (OVR,DATA)
                                    245 	.area	OSEG    (OVR,DATA)
                                    246 	.area	OSEG    (OVR,DATA)
                                    247 ;--------------------------------------------------------
                                    248 ; indirectly addressable internal ram data
                                    249 ;--------------------------------------------------------
                                    250 	.area ISEG    (DATA)
                                    251 ;--------------------------------------------------------
                                    252 ; absolute internal ram data
                                    253 ;--------------------------------------------------------
                                    254 	.area IABS    (ABS,DATA)
                                    255 	.area IABS    (ABS,DATA)
                                    256 ;--------------------------------------------------------
                                    257 ; bit data
                                    258 ;--------------------------------------------------------
                                    259 	.area BSEG    (BIT)
                                    260 ;--------------------------------------------------------
                                    261 ; paged external ram data
                                    262 ;--------------------------------------------------------
                                    263 	.area PSEG    (PAG,XDATA)
                                    264 ;--------------------------------------------------------
                                    265 ; external ram data
                                    266 ;--------------------------------------------------------
                                    267 	.area XSEG    (XDATA)
                                    268 ;--------------------------------------------------------
                                    269 ; absolute external ram data
                                    270 ;--------------------------------------------------------
                                    271 	.area XABS    (ABS,XDATA)
                                    272 ;--------------------------------------------------------
                                    273 ; external initialized ram data
                                    274 ;--------------------------------------------------------
                                    275 	.area XISEG   (XDATA)
                                    276 	.area HOME    (CODE)
                                    277 	.area GSINIT0 (CODE)
                                    278 	.area GSINIT1 (CODE)
                                    279 	.area GSINIT2 (CODE)
                                    280 	.area GSINIT3 (CODE)
                                    281 	.area GSINIT4 (CODE)
                                    282 	.area GSINIT5 (CODE)
                                    283 	.area GSINIT  (CODE)
                                    284 	.area GSFINAL (CODE)
                                    285 	.area CSEG    (CODE)
                                    286 ;--------------------------------------------------------
                                    287 ; global & static initialisations
                                    288 ;--------------------------------------------------------
                                    289 	.area HOME    (CODE)
                                    290 	.area GSINIT  (CODE)
                                    291 	.area GSFINAL (CODE)
                                    292 	.area GSINIT  (CODE)
                                    293 ;--------------------------------------------------------
                                    294 ; Home
                                    295 ;--------------------------------------------------------
                                    296 	.area HOME    (CODE)
                                    297 	.area HOME    (CODE)
                                    298 ;--------------------------------------------------------
                                    299 ; code
                                    300 ;--------------------------------------------------------
                                    301 	.area CSEG    (CODE)
                                    302 ;------------------------------------------------------------
                                    303 ;Allocation info for local variables in function 'is_col_port3'
                                    304 ;------------------------------------------------------------
                                    305 ;col                       Allocated to registers r6 r7 
                                    306 ;------------------------------------------------------------
                                    307 ;	matrix.c:22: static bool is_col_port3(int col) {
                                    308 ;	-----------------------------------------
                                    309 ;	 function is_col_port3
                                    310 ;	-----------------------------------------
      000157                        311 _is_col_port3:
                           000007   312 	ar7 = 0x07
                           000006   313 	ar6 = 0x06
                           000005   314 	ar5 = 0x05
                           000004   315 	ar4 = 0x04
                           000003   316 	ar3 = 0x03
                           000002   317 	ar2 = 0x02
                           000001   318 	ar1 = 0x01
                           000000   319 	ar0 = 0x00
      000157 AE 82            [24]  320 	mov	r6,dpl
      000159 AF 83            [24]  321 	mov	r7,dph
                                    322 ;	matrix.c:23: if (col == 0) {
      00015B EE               [12]  323 	mov	a,r6
      00015C 4F               [12]  324 	orl	a,r7
                                    325 ;	matrix.c:24: return false;
      00015D 70 03            [24]  326 	jnz	00102$
      00015F F5 82            [12]  327 	mov	dpl,a
      000161 22               [24]  328 	ret
      000162                        329 00102$:
                                    330 ;	matrix.c:26: return true;
      000162 75 82 01         [24]  331 	mov	dpl,#0x01
                                    332 ;	matrix.c:27: }
      000165 22               [24]  333 	ret
                                    334 ;------------------------------------------------------------
                                    335 ;Allocation info for local variables in function 'get_pin_of_col'
                                    336 ;------------------------------------------------------------
                                    337 ;col                       Allocated to registers r6 r7 
                                    338 ;------------------------------------------------------------
                                    339 ;	matrix.c:29: static bool get_pin_of_col(int col) {
                                    340 ;	-----------------------------------------
                                    341 ;	 function get_pin_of_col
                                    342 ;	-----------------------------------------
      000166                        343 _get_pin_of_col:
      000166 AE 82            [24]  344 	mov	r6,dpl
      000168 AF 83            [24]  345 	mov	r7,dph
                                    346 ;	matrix.c:30: if (col == 1) {
      00016A BE 01 07         [24]  347 	cjne	r6,#0x01,00102$
      00016D BF 00 04         [24]  348 	cjne	r7,#0x00,00102$
                                    349 ;	matrix.c:31: return 7;
      000170 75 82 01         [24]  350 	mov	dpl,#0x01
      000173 22               [24]  351 	ret
      000174                        352 00102$:
                                    353 ;	matrix.c:34: if (col == 2) {
      000174 BE 02 07         [24]  354 	cjne	r6,#0x02,00104$
      000177 BF 00 04         [24]  355 	cjne	r7,#0x00,00104$
                                    356 ;	matrix.c:35: return 5;
      00017A 75 82 01         [24]  357 	mov	dpl,#0x01
      00017D 22               [24]  358 	ret
      00017E                        359 00104$:
                                    360 ;	matrix.c:38: if (col == 3) {
      00017E BE 03 07         [24]  361 	cjne	r6,#0x03,00106$
      000181 BF 00 04         [24]  362 	cjne	r7,#0x00,00106$
                                    363 ;	matrix.c:39: return 4;
      000184 75 82 01         [24]  364 	mov	dpl,#0x01
      000187 22               [24]  365 	ret
      000188                        366 00106$:
                                    367 ;	matrix.c:42: if (col == 4) {
      000188 BE 04 07         [24]  368 	cjne	r6,#0x04,00108$
      00018B BF 00 04         [24]  369 	cjne	r7,#0x00,00108$
                                    370 ;	matrix.c:43: return 3;
      00018E 75 82 01         [24]  371 	mov	dpl,#0x01
      000191 22               [24]  372 	ret
      000192                        373 00108$:
                                    374 ;	matrix.c:46: return -1;
      000192 75 82 01         [24]  375 	mov	dpl,#0x01
                                    376 ;	matrix.c:47: }
      000195 22               [24]  377 	ret
                                    378 ;------------------------------------------------------------
                                    379 ;Allocation info for local variables in function 'set_col'
                                    380 ;------------------------------------------------------------
                                    381 ;col                       Allocated to registers r6 r7 
                                    382 ;------------------------------------------------------------
                                    383 ;	matrix.c:49: void set_col(int col) {
                                    384 ;	-----------------------------------------
                                    385 ;	 function set_col
                                    386 ;	-----------------------------------------
      000196                        387 _set_col:
      000196 AE 82            [24]  388 	mov	r6,dpl
      000198 AF 83            [24]  389 	mov	r7,dph
                                    390 ;	matrix.c:50: switch (col) {
      00019A BE 00 05         [24]  391 	cjne	r6,#0x00,00129$
      00019D BF 00 02         [24]  392 	cjne	r7,#0x00,00129$
      0001A0 80 20            [24]  393 	sjmp	00101$
      0001A2                        394 00129$:
      0001A2 BE 01 05         [24]  395 	cjne	r6,#0x01,00130$
      0001A5 BF 00 02         [24]  396 	cjne	r7,#0x00,00130$
      0001A8 80 1B            [24]  397 	sjmp	00102$
      0001AA                        398 00130$:
      0001AA BE 02 05         [24]  399 	cjne	r6,#0x02,00131$
      0001AD BF 00 02         [24]  400 	cjne	r7,#0x00,00131$
      0001B0 80 16            [24]  401 	sjmp	00103$
      0001B2                        402 00131$:
      0001B2 BE 03 05         [24]  403 	cjne	r6,#0x03,00132$
      0001B5 BF 00 02         [24]  404 	cjne	r7,#0x00,00132$
      0001B8 80 11            [24]  405 	sjmp	00104$
      0001BA                        406 00132$:
                                    407 ;	matrix.c:51: case 0: P1_0 = 1;
      0001BA BE 04 13         [24]  408 	cjne	r6,#0x04,00107$
      0001BD BF 00 10         [24]  409 	cjne	r7,#0x00,00107$
      0001C0 80 0C            [24]  410 	sjmp	00105$
      0001C2                        411 00101$:
                                    412 ;	assignBit
      0001C2 D2 90            [12]  413 	setb	_P1_0
                                    414 ;	matrix.c:52: break;
                                    415 ;	matrix.c:53: case 1: P3_7 = 1;
      0001C4 22               [24]  416 	ret
      0001C5                        417 00102$:
                                    418 ;	assignBit
      0001C5 D2 B7            [12]  419 	setb	_P3_7
                                    420 ;	matrix.c:54: break;
                                    421 ;	matrix.c:55: case 2: P3_5 = 1;
      0001C7 22               [24]  422 	ret
      0001C8                        423 00103$:
                                    424 ;	assignBit
      0001C8 D2 B5            [12]  425 	setb	_P3_5
                                    426 ;	matrix.c:56: break;
                                    427 ;	matrix.c:57: case 3: P3_4 = 1;
      0001CA 22               [24]  428 	ret
      0001CB                        429 00104$:
                                    430 ;	assignBit
      0001CB D2 B4            [12]  431 	setb	_P3_4
                                    432 ;	matrix.c:58: break;
                                    433 ;	matrix.c:59: case 4: P3_3 = 1;
      0001CD 22               [24]  434 	ret
      0001CE                        435 00105$:
                                    436 ;	assignBit
      0001CE D2 B3            [12]  437 	setb	_P3_3
                                    438 ;	matrix.c:61: };
      0001D0                        439 00107$:
                                    440 ;	matrix.c:62: }
      0001D0 22               [24]  441 	ret
                                    442 ;------------------------------------------------------------
                                    443 ;Allocation info for local variables in function 'reset_col'
                                    444 ;------------------------------------------------------------
                                    445 ;col                       Allocated to registers r6 r7 
                                    446 ;------------------------------------------------------------
                                    447 ;	matrix.c:64: void reset_col(int col) {
                                    448 ;	-----------------------------------------
                                    449 ;	 function reset_col
                                    450 ;	-----------------------------------------
      0001D1                        451 _reset_col:
      0001D1 AE 82            [24]  452 	mov	r6,dpl
      0001D3 AF 83            [24]  453 	mov	r7,dph
                                    454 ;	matrix.c:65: switch (col) {
      0001D5 BE 00 05         [24]  455 	cjne	r6,#0x00,00129$
      0001D8 BF 00 02         [24]  456 	cjne	r7,#0x00,00129$
      0001DB 80 20            [24]  457 	sjmp	00101$
      0001DD                        458 00129$:
      0001DD BE 01 05         [24]  459 	cjne	r6,#0x01,00130$
      0001E0 BF 00 02         [24]  460 	cjne	r7,#0x00,00130$
      0001E3 80 1B            [24]  461 	sjmp	00102$
      0001E5                        462 00130$:
      0001E5 BE 02 05         [24]  463 	cjne	r6,#0x02,00131$
      0001E8 BF 00 02         [24]  464 	cjne	r7,#0x00,00131$
      0001EB 80 16            [24]  465 	sjmp	00103$
      0001ED                        466 00131$:
      0001ED BE 03 05         [24]  467 	cjne	r6,#0x03,00132$
      0001F0 BF 00 02         [24]  468 	cjne	r7,#0x00,00132$
      0001F3 80 11            [24]  469 	sjmp	00104$
      0001F5                        470 00132$:
                                    471 ;	matrix.c:66: case 0: P1_0 = 0;
      0001F5 BE 04 13         [24]  472 	cjne	r6,#0x04,00107$
      0001F8 BF 00 10         [24]  473 	cjne	r7,#0x00,00107$
      0001FB 80 0C            [24]  474 	sjmp	00105$
      0001FD                        475 00101$:
                                    476 ;	assignBit
      0001FD C2 90            [12]  477 	clr	_P1_0
                                    478 ;	matrix.c:67: break;
                                    479 ;	matrix.c:68: case 1: P3_7 = 0;
      0001FF 22               [24]  480 	ret
      000200                        481 00102$:
                                    482 ;	assignBit
      000200 C2 B7            [12]  483 	clr	_P3_7
                                    484 ;	matrix.c:69: break;
                                    485 ;	matrix.c:70: case 2: P3_5 = 0;
      000202 22               [24]  486 	ret
      000203                        487 00103$:
                                    488 ;	assignBit
      000203 C2 B5            [12]  489 	clr	_P3_5
                                    490 ;	matrix.c:71: break;
                                    491 ;	matrix.c:72: case 3: P3_4 = 0;
      000205 22               [24]  492 	ret
      000206                        493 00104$:
                                    494 ;	assignBit
      000206 C2 B4            [12]  495 	clr	_P3_4
                                    496 ;	matrix.c:73: break;
                                    497 ;	matrix.c:74: case 4: P3_3 = 0;
      000208 22               [24]  498 	ret
      000209                        499 00105$:
                                    500 ;	assignBit
      000209 C2 B3            [12]  501 	clr	_P3_3
                                    502 ;	matrix.c:76: };
      00020B                        503 00107$:
                                    504 ;	matrix.c:77: }
      00020B 22               [24]  505 	ret
                                    506 ;------------------------------------------------------------
                                    507 ;Allocation info for local variables in function 'set_row'
                                    508 ;------------------------------------------------------------
                                    509 ;row                       Allocated to registers r6 r7 
                                    510 ;------------------------------------------------------------
                                    511 ;	matrix.c:79: void set_row(int row) {
                                    512 ;	-----------------------------------------
                                    513 ;	 function set_row
                                    514 ;	-----------------------------------------
      00020C                        515 _set_row:
                                    516 ;	matrix.c:80: P1 = P1 | (1 << (row + 1));
      00020C E5 82            [12]  517 	mov	a,dpl
      00020E 04               [12]  518 	inc	a
      00020F F5 F0            [12]  519 	mov	b,a
      000211 05 F0            [12]  520 	inc	b
      000213 74 01            [12]  521 	mov	a,#0x01
      000215 80 02            [24]  522 	sjmp	00105$
      000217                        523 00103$:
      000217 25 E0            [12]  524 	add	a,acc
      000219                        525 00105$:
      000219 D5 F0 FB         [24]  526 	djnz	b,00103$
      00021C AE 90            [24]  527 	mov	r6,_P1
      00021E 4E               [12]  528 	orl	a,r6
      00021F F5 90            [12]  529 	mov	_P1,a
                                    530 ;	matrix.c:81: }
      000221 22               [24]  531 	ret
                                    532 ;------------------------------------------------------------
                                    533 ;Allocation info for local variables in function 'reset_row'
                                    534 ;------------------------------------------------------------
                                    535 ;row                       Allocated to registers r6 r7 
                                    536 ;------------------------------------------------------------
                                    537 ;	matrix.c:83: void reset_row(int row) {
                                    538 ;	-----------------------------------------
                                    539 ;	 function reset_row
                                    540 ;	-----------------------------------------
      000222                        541 _reset_row:
                                    542 ;	matrix.c:84: P1 = P1 & (0xFF - (1 << (row+1)));
      000222 E5 82            [12]  543 	mov	a,dpl
      000224 04               [12]  544 	inc	a
      000225 F5 F0            [12]  545 	mov	b,a
      000227 05 F0            [12]  546 	inc	b
      000229 74 01            [12]  547 	mov	a,#0x01
      00022B 80 02            [24]  548 	sjmp	00105$
      00022D                        549 00103$:
      00022D 25 E0            [12]  550 	add	a,acc
      00022F                        551 00105$:
      00022F D5 F0 FB         [24]  552 	djnz	b,00103$
      000232 FF               [12]  553 	mov	r7,a
      000233 74 FF            [12]  554 	mov	a,#0xff
      000235 C3               [12]  555 	clr	c
      000236 9F               [12]  556 	subb	a,r7
      000237 AE 90            [24]  557 	mov	r6,_P1
      000239 5E               [12]  558 	anl	a,r6
      00023A F5 90            [12]  559 	mov	_P1,a
                                    560 ;	matrix.c:85: }
      00023C 22               [24]  561 	ret
                                    562 ;------------------------------------------------------------
                                    563 ;Allocation info for local variables in function 'charToMuster'
                                    564 ;------------------------------------------------------------
                                    565 ;c                         Allocated to registers r7 
                                    566 ;------------------------------------------------------------
                                    567 ;	matrix.c:87: static uint64_t charToMuster(char c) {
                                    568 ;	-----------------------------------------
                                    569 ;	 function charToMuster
                                    570 ;	-----------------------------------------
      00023D                        571 _charToMuster:
      00023D AF 82            [24]  572 	mov	r7,dpl
                                    573 ;	matrix.c:88: switch (c) {
      00023F BF 2B 00         [24]  574 	cjne	r7,#0x2b,00150$
      000242                        575 00150$:
      000242 50 03            [24]  576 	jnc	00151$
      000244 02 05 34         [24]  577 	ljmp	00138$
      000247                        578 00151$:
      000247 EF               [12]  579 	mov	a,r7
      000248 24 A5            [12]  580 	add	a,#0xff - 0x5a
      00024A 50 03            [24]  581 	jnc	00152$
      00024C 02 05 34         [24]  582 	ljmp	00138$
      00024F                        583 00152$:
      00024F EF               [12]  584 	mov	a,r7
      000250 24 D5            [12]  585 	add	a,#0xd5
      000252 FF               [12]  586 	mov	r7,a
      000253 24 0A            [12]  587 	add	a,#(00153$-3-.)
      000255 83               [24]  588 	movc	a,@a+pc
      000256 F5 82            [12]  589 	mov	dpl,a
      000258 EF               [12]  590 	mov	a,r7
      000259 24 34            [12]  591 	add	a,#(00154$-3-.)
      00025B 83               [24]  592 	movc	a,@a+pc
      00025C F5 83            [12]  593 	mov	dph,a
      00025E E4               [12]  594 	clr	a
      00025F 73               [24]  595 	jmp	@a+dptr
      000260                        596 00153$:
      000260 24                     597 	.db	00137$
      000261 34                     598 	.db	00138$
      000262 34                     599 	.db	00138$
      000263 34                     600 	.db	00138$
      000264 34                     601 	.db	00138$
      000265 7A                     602 	.db	00127$
      000266 8B                     603 	.db	00128$
      000267 9C                     604 	.db	00129$
      000268 AD                     605 	.db	00130$
      000269 BE                     606 	.db	00131$
      00026A CF                     607 	.db	00132$
      00026B E0                     608 	.db	00133$
      00026C F1                     609 	.db	00134$
      00026D 02                     610 	.db	00135$
      00026E 13                     611 	.db	00136$
      00026F 34                     612 	.db	00138$
      000270 34                     613 	.db	00138$
      000271 34                     614 	.db	00138$
      000272 34                     615 	.db	00138$
      000273 34                     616 	.db	00138$
      000274 34                     617 	.db	00138$
      000275 34                     618 	.db	00138$
      000276 C0                     619 	.db	00101$
      000277 D1                     620 	.db	00102$
      000278 E2                     621 	.db	00103$
      000279 F3                     622 	.db	00104$
      00027A 04                     623 	.db	00105$
      00027B 15                     624 	.db	00106$
      00027C 26                     625 	.db	00107$
      00027D 37                     626 	.db	00108$
      00027E 48                     627 	.db	00109$
      00027F 59                     628 	.db	00110$
      000280 6A                     629 	.db	00111$
      000281 7B                     630 	.db	00112$
      000282 8C                     631 	.db	00113$
      000283 9D                     632 	.db	00114$
      000284 AE                     633 	.db	00115$
      000285 BF                     634 	.db	00116$
      000286 D0                     635 	.db	00117$
      000287 E1                     636 	.db	00118$
      000288 F2                     637 	.db	00119$
      000289 03                     638 	.db	00120$
      00028A 14                     639 	.db	00121$
      00028B 25                     640 	.db	00122$
      00028C 36                     641 	.db	00123$
      00028D 47                     642 	.db	00124$
      00028E 58                     643 	.db	00125$
      00028F 69                     644 	.db	00126$
      000290                        645 00154$:
      000290 05                     646 	.db	00137$>>8
      000291 05                     647 	.db	00138$>>8
      000292 05                     648 	.db	00138$>>8
      000293 05                     649 	.db	00138$>>8
      000294 05                     650 	.db	00138$>>8
      000295 04                     651 	.db	00127$>>8
      000296 04                     652 	.db	00128$>>8
      000297 04                     653 	.db	00129$>>8
      000298 04                     654 	.db	00130$>>8
      000299 04                     655 	.db	00131$>>8
      00029A 04                     656 	.db	00132$>>8
      00029B 04                     657 	.db	00133$>>8
      00029C 04                     658 	.db	00134$>>8
      00029D 05                     659 	.db	00135$>>8
      00029E 05                     660 	.db	00136$>>8
      00029F 05                     661 	.db	00138$>>8
      0002A0 05                     662 	.db	00138$>>8
      0002A1 05                     663 	.db	00138$>>8
      0002A2 05                     664 	.db	00138$>>8
      0002A3 05                     665 	.db	00138$>>8
      0002A4 05                     666 	.db	00138$>>8
      0002A5 05                     667 	.db	00138$>>8
      0002A6 02                     668 	.db	00101$>>8
      0002A7 02                     669 	.db	00102$>>8
      0002A8 02                     670 	.db	00103$>>8
      0002A9 02                     671 	.db	00104$>>8
      0002AA 03                     672 	.db	00105$>>8
      0002AB 03                     673 	.db	00106$>>8
      0002AC 03                     674 	.db	00107$>>8
      0002AD 03                     675 	.db	00108$>>8
      0002AE 03                     676 	.db	00109$>>8
      0002AF 03                     677 	.db	00110$>>8
      0002B0 03                     678 	.db	00111$>>8
      0002B1 03                     679 	.db	00112$>>8
      0002B2 03                     680 	.db	00113$>>8
      0002B3 03                     681 	.db	00114$>>8
      0002B4 03                     682 	.db	00115$>>8
      0002B5 03                     683 	.db	00116$>>8
      0002B6 03                     684 	.db	00117$>>8
      0002B7 03                     685 	.db	00118$>>8
      0002B8 03                     686 	.db	00119$>>8
      0002B9 04                     687 	.db	00120$>>8
      0002BA 04                     688 	.db	00121$>>8
      0002BB 04                     689 	.db	00122$>>8
      0002BC 04                     690 	.db	00123$>>8
      0002BD 04                     691 	.db	00124$>>8
      0002BE 04                     692 	.db	00125$>>8
      0002BF 04                     693 	.db	00126$>>8
                                    694 ;	matrix.c:89: case 'A': return musterA;
      0002C0                        695 00101$:
      0002C0 90 C6 31         [24]  696 	mov	dptr,#0xc631
      0002C3 75 F0 1F         [24]  697 	mov	b,#0x1f
      0002C6 74 A3            [12]  698 	mov	a,#0xa3
      0002C8 7C 03            [12]  699 	mov	r4,#0x03
      0002CA 7D 00            [12]  700 	mov	r5,#0x00
      0002CC 7E 00            [12]  701 	mov	r6,#0x00
      0002CE 7F 00            [12]  702 	mov	r7,#0x00
      0002D0 22               [24]  703 	ret
                                    704 ;	matrix.c:91: case 'B': return musterB;
      0002D1                        705 00102$:
      0002D1 90 46 3E         [24]  706 	mov	dptr,#0x463e
      0002D4 75 F0 1F         [24]  707 	mov	b,#0x1f
      0002D7 74 A3            [12]  708 	mov	a,#0xa3
      0002D9 7C 07            [12]  709 	mov	r4,#0x07
      0002DB 7D 00            [12]  710 	mov	r5,#0x00
      0002DD 7E 00            [12]  711 	mov	r6,#0x00
      0002DF 7F 00            [12]  712 	mov	r7,#0x00
      0002E1 22               [24]  713 	ret
                                    714 ;	matrix.c:93: case 'C': return musterC;
      0002E2                        715 00103$:
      0002E2 90 42 0F         [24]  716 	mov	dptr,#0x420f
      0002E5 75 F0 08         [24]  717 	mov	b,#0x08
      0002E8 74 E1            [12]  718 	mov	a,#0xe1
      0002EA 7C 03            [12]  719 	mov	r4,#0x03
      0002EC 7D 00            [12]  720 	mov	r5,#0x00
      0002EE 7E 00            [12]  721 	mov	r6,#0x00
      0002F0 7F 00            [12]  722 	mov	r7,#0x00
      0002F2 22               [24]  723 	ret
                                    724 ;	matrix.c:95: case 'D': return musterD;
      0002F3                        725 00104$:
      0002F3 90 C6 3E         [24]  726 	mov	dptr,#0xc63e
      0002F6 75 F0 18         [24]  727 	mov	b,#0x18
      0002F9 74 A3            [12]  728 	mov	a,#0xa3
      0002FB 7C 07            [12]  729 	mov	r4,#0x07
      0002FD 7D 00            [12]  730 	mov	r5,#0x00
      0002FF 7E 00            [12]  731 	mov	r6,#0x00
      000301 7F 00            [12]  732 	mov	r7,#0x00
      000303 22               [24]  733 	ret
                                    734 ;	matrix.c:97: case 'E': return musterE;
      000304                        735 00105$:
      000304 90 C2 1F         [24]  736 	mov	dptr,#0xc21f
      000307 75 F0 0F         [24]  737 	mov	b,#0x0f
      00030A 74 E1            [12]  738 	mov	a,#0xe1
      00030C 7C 07            [12]  739 	mov	r4,#0x07
      00030E 7D 00            [12]  740 	mov	r5,#0x00
      000310 7E 00            [12]  741 	mov	r6,#0x00
      000312 7F 00            [12]  742 	mov	r7,#0x00
      000314 22               [24]  743 	ret
                                    744 ;	matrix.c:99: case 'F': return musterF;
      000315                        745 00106$:
      000315 90 42 10         [24]  746 	mov	dptr,#0x4210
      000318 75 F0 0F         [24]  747 	mov	b,#0x0f
      00031B 74 E1            [12]  748 	mov	a,#0xe1
      00031D 7C 07            [12]  749 	mov	r4,#0x07
      00031F 7D 00            [12]  750 	mov	r5,#0x00
      000321 7E 00            [12]  751 	mov	r6,#0x00
      000323 7F 00            [12]  752 	mov	r7,#0x00
      000325 22               [24]  753 	ret
                                    754 ;	matrix.c:101: case 'G': return musterG;
      000326                        755 00107$:
      000326 90 C6 2E         [24]  756 	mov	dptr,#0xc62e
      000329 75 F0 0B         [24]  757 	mov	b,#0x0b
      00032C 74 E1            [12]  758 	mov	a,#0xe1
      00032E 7C 03            [12]  759 	mov	r4,#0x03
      000330 7D 00            [12]  760 	mov	r5,#0x00
      000332 7E 00            [12]  761 	mov	r6,#0x00
      000334 7F 00            [12]  762 	mov	r7,#0x00
      000336 22               [24]  763 	ret
                                    764 ;	matrix.c:103: case 'H': return musterH;
      000337                        765 00108$:
      000337 90 C6 31         [24]  766 	mov	dptr,#0xc631
      00033A 75 F0 1F         [24]  767 	mov	b,#0x1f
      00033D 74 63            [12]  768 	mov	a,#0x63
      00033F 7C 04            [12]  769 	mov	r4,#0x04
      000341 7D 00            [12]  770 	mov	r5,#0x00
      000343 7E 00            [12]  771 	mov	r6,#0x00
      000345 7F 00            [12]  772 	mov	r7,#0x00
      000347 22               [24]  773 	ret
                                    774 ;	matrix.c:105: case 'I': return musterI;
      000348                        775 00109$:
      000348 90 10 9F         [24]  776 	mov	dptr,#0x109f
      00034B 75 F0 42         [24]  777 	mov	b,#0x42
      00034E 74 C8            [12]  778 	mov	a,#0xc8
      000350 7C 07            [12]  779 	mov	r4,#0x07
      000352 7D 00            [12]  780 	mov	r5,#0x00
      000354 7E 00            [12]  781 	mov	r6,#0x00
      000356 7F 00            [12]  782 	mov	r7,#0x00
      000358 22               [24]  783 	ret
                                    784 ;	matrix.c:107: case 'J': return musterJ;
      000359                        785 00110$:
      000359 90 4A 4C         [24]  786 	mov	dptr,#0x4a4c
      00035C 75 F0 21         [24]  787 	mov	b,#0x21
      00035F 74 84            [12]  788 	mov	a,#0x84
      000361 7C 00            [12]  789 	mov	r4,#0x00
      000363 7D 00            [12]  790 	mov	r5,#0x00
      000365 7E 00            [12]  791 	mov	r6,#0x00
      000367 7F 00            [12]  792 	mov	r7,#0x00
      000369 22               [24]  793 	ret
                                    794 ;	matrix.c:109: case 'K': return musterK;
      00036A                        795 00111$:
      00036A 90 52 51         [24]  796 	mov	dptr,#0x5251
      00036D 75 F0 4C         [24]  797 	mov	b,#0x4c
      000370 74 65            [12]  798 	mov	a,#0x65
      000372 7C 04            [12]  799 	mov	r4,#0x04
      000374 7D 00            [12]  800 	mov	r5,#0x00
      000376 7E 00            [12]  801 	mov	r6,#0x00
      000378 7F 00            [12]  802 	mov	r7,#0x00
      00037A 22               [24]  803 	ret
                                    804 ;	matrix.c:111: case 'L': return musterL;
      00037B                        805 00112$:
      00037B 90 42 1F         [24]  806 	mov	dptr,#0x421f
      00037E 75 F0 08         [24]  807 	mov	b,#0x08
      000381 74 21            [12]  808 	mov	a,#0x21
      000383 7C 04            [12]  809 	mov	r4,#0x04
      000385 7D 00            [12]  810 	mov	r5,#0x00
      000387 7E 00            [12]  811 	mov	r6,#0x00
      000389 7F 00            [12]  812 	mov	r7,#0x00
      00038B 22               [24]  813 	ret
                                    814 ;	matrix.c:113: case 'M': return musterM;
      00038C                        815 00113$:
      00038C 90 C6 31         [24]  816 	mov	dptr,#0xc631
      00038F 75 F0 58         [24]  817 	mov	b,#0x58
      000392 74 77            [12]  818 	mov	a,#0x77
      000394 7C 04            [12]  819 	mov	r4,#0x04
      000396 7D 00            [12]  820 	mov	r5,#0x00
      000398 7E 00            [12]  821 	mov	r6,#0x00
      00039A 7F 00            [12]  822 	mov	r7,#0x00
      00039C 22               [24]  823 	ret
                                    824 ;	matrix.c:115: case 'N': return musterN;
      00039D                        825 00114$:
      00039D 90 CE 31         [24]  826 	mov	dptr,#0xce31
      0003A0 75 F0 9A         [24]  827 	mov	b,#0x9a
      0003A3 74 63            [12]  828 	mov	a,#0x63
      0003A5 7C 04            [12]  829 	mov	r4,#0x04
      0003A7 7D 00            [12]  830 	mov	r5,#0x00
      0003A9 7E 00            [12]  831 	mov	r6,#0x00
      0003AB 7F 00            [12]  832 	mov	r7,#0x00
      0003AD 22               [24]  833 	ret
                                    834 ;	matrix.c:117: case 'O': return musterO;
      0003AE                        835 00115$:
      0003AE 90 C6 2E         [24]  836 	mov	dptr,#0xc62e
      0003B1 75 F0 18         [24]  837 	mov	b,#0x18
      0003B4 74 A3            [12]  838 	mov	a,#0xa3
      0003B6 7C 03            [12]  839 	mov	r4,#0x03
      0003B8 7D 00            [12]  840 	mov	r5,#0x00
      0003BA 7E 00            [12]  841 	mov	r6,#0x00
      0003BC 7F 00            [12]  842 	mov	r7,#0x00
      0003BE 22               [24]  843 	ret
                                    844 ;	matrix.c:119: case 'P': return musterP;
      0003BF                        845 00116$:
      0003BF 90 42 10         [24]  846 	mov	dptr,#0x4210
      0003C2 75 F0 1F         [24]  847 	mov	b,#0x1f
      0003C5 74 A3            [12]  848 	mov	a,#0xa3
      0003C7 7C 07            [12]  849 	mov	r4,#0x07
      0003C9 7D 00            [12]  850 	mov	r5,#0x00
      0003CB 7E 00            [12]  851 	mov	r6,#0x00
      0003CD 7F 00            [12]  852 	mov	r7,#0x00
      0003CF 22               [24]  853 	ret
                                    854 ;	matrix.c:121: case 'Q': return musterQ;
      0003D0                        855 00117$:
      0003D0 90 D6 6F         [24]  856 	mov	dptr,#0xd66f
      0003D3 75 F0 18         [24]  857 	mov	b,#0x18
      0003D6 74 A3            [12]  858 	mov	a,#0xa3
      0003D8 7C 03            [12]  859 	mov	r4,#0x03
      0003DA 7D 00            [12]  860 	mov	r5,#0x00
      0003DC 7E 00            [12]  861 	mov	r6,#0x00
      0003DE 7F 00            [12]  862 	mov	r7,#0x00
      0003E0 22               [24]  863 	ret
                                    864 ;	matrix.c:123: case 'R': return musterR;
      0003E1                        865 00118$:
      0003E1 90 52 51         [24]  866 	mov	dptr,#0x5251
      0003E4 75 F0 1F         [24]  867 	mov	b,#0x1f
      0003E7 74 A3            [12]  868 	mov	a,#0xa3
      0003E9 7C 07            [12]  869 	mov	r4,#0x07
      0003EB 7D 00            [12]  870 	mov	r5,#0x00
      0003ED 7E 00            [12]  871 	mov	r6,#0x00
      0003EF 7F 00            [12]  872 	mov	r7,#0x00
      0003F1 22               [24]  873 	ret
                                    874 ;	matrix.c:125: case 'S': return musterS;
      0003F2                        875 00119$:
      0003F2 90 04 3E         [24]  876 	mov	dptr,#0x043e
      0003F5 75 F0 07         [24]  877 	mov	b,#0x07
      0003F8 74 E1            [12]  878 	mov	a,#0xe1
      0003FA 7C 03            [12]  879 	mov	r4,#0x03
      0003FC 7D 00            [12]  880 	mov	r5,#0x00
      0003FE 7E 00            [12]  881 	mov	r6,#0x00
      000400 7F 00            [12]  882 	mov	r7,#0x00
      000402 22               [24]  883 	ret
                                    884 ;	matrix.c:127: case 'T': return musterT;
      000403                        885 00120$:
      000403 90 10 84         [24]  886 	mov	dptr,#0x1084
      000406 75 F0 42         [24]  887 	mov	b,#0x42
      000409 74 C8            [12]  888 	mov	a,#0xc8
      00040B 7C 07            [12]  889 	mov	r4,#0x07
      00040D 7D 00            [12]  890 	mov	r5,#0x00
      00040F 7E 00            [12]  891 	mov	r6,#0x00
      000411 7F 00            [12]  892 	mov	r7,#0x00
      000413 22               [24]  893 	ret
                                    894 ;	matrix.c:129: case 'U': return musterU;
      000414                        895 00121$:
      000414 90 C6 2E         [24]  896 	mov	dptr,#0xc62e
      000417 75 F0 18         [24]  897 	mov	b,#0x18
      00041A 74 63            [12]  898 	mov	a,#0x63
      00041C 7C 04            [12]  899 	mov	r4,#0x04
      00041E 7D 00            [12]  900 	mov	r5,#0x00
      000420 7E 00            [12]  901 	mov	r6,#0x00
      000422 7F 00            [12]  902 	mov	r7,#0x00
      000424 22               [24]  903 	ret
                                    904 ;	matrix.c:131: case 'V': return musterV;
      000425                        905 00122$:
      000425 90 C5 44         [24]  906 	mov	dptr,#0xc544
      000428 75 F0 18         [24]  907 	mov	b,#0x18
      00042B 74 63            [12]  908 	mov	a,#0x63
      00042D 7C 04            [12]  909 	mov	r4,#0x04
      00042F 7D 00            [12]  910 	mov	r5,#0x00
      000431 7E 00            [12]  911 	mov	r6,#0x00
      000433 7F 00            [12]  912 	mov	r7,#0x00
      000435 22               [24]  913 	ret
                                    914 ;	matrix.c:133: case 'W': return musterW;
      000436                        915 00123$:
      000436 90 D7 71         [24]  916 	mov	dptr,#0xd771
      000439 75 F0 18         [24]  917 	mov	b,#0x18
      00043C 74 63            [12]  918 	mov	a,#0x63
      00043E 7C 04            [12]  919 	mov	r4,#0x04
      000440 7D 00            [12]  920 	mov	r5,#0x00
      000442 7E 00            [12]  921 	mov	r6,#0x00
      000444 7F 00            [12]  922 	mov	r7,#0x00
      000446 22               [24]  923 	ret
                                    924 ;	matrix.c:135: case 'X': return musterX;
      000447                        925 00124$:
      000447 90 2A 31         [24]  926 	mov	dptr,#0x2a31
      00044A 75 F0 A2         [24]  927 	mov	b,#0xa2
      00044D 74 62            [12]  928 	mov	a,#0x62
      00044F 7C 04            [12]  929 	mov	r4,#0x04
      000451 7D 00            [12]  930 	mov	r5,#0x00
      000453 7E 00            [12]  931 	mov	r6,#0x00
      000455 7F 00            [12]  932 	mov	r7,#0x00
      000457 22               [24]  933 	ret
                                    934 ;	matrix.c:137: case 'Y': return musterY;
      000458                        935 00125$:
      000458 90 10 84         [24]  936 	mov	dptr,#0x1084
      00045B 75 F0 A2         [24]  937 	mov	b,#0xa2
      00045E 74 62            [12]  938 	mov	a,#0x62
      000460 7C 04            [12]  939 	mov	r4,#0x04
      000462 7D 00            [12]  940 	mov	r5,#0x00
      000464 7E 00            [12]  941 	mov	r6,#0x00
      000466 7F 00            [12]  942 	mov	r7,#0x00
      000468 22               [24]  943 	ret
                                    944 ;	matrix.c:139: case 'Z': return musterZ;
      000469                        945 00126$:
      000469 90 22 1F         [24]  946 	mov	dptr,#0x221f
      00046C 75 F0 22         [24]  947 	mov	b,#0x22
      00046F 74 C2            [12]  948 	mov	a,#0xc2
      000471 7C 07            [12]  949 	mov	r4,#0x07
      000473 7D 00            [12]  950 	mov	r5,#0x00
      000475 7E 00            [12]  951 	mov	r6,#0x00
      000477 7F 00            [12]  952 	mov	r7,#0x00
      000479 22               [24]  953 	ret
                                    954 ;	matrix.c:142: case '0': return muster0;
      00047A                        955 00127$:
      00047A 90 E7 2E         [24]  956 	mov	dptr,#0xe72e
      00047D 75 F0 3A         [24]  957 	mov	b,#0x3a
      000480 74 A7            [12]  958 	mov	a,#0xa7
      000482 7C 03            [12]  959 	mov	r4,#0x03
      000484 7D 00            [12]  960 	mov	r5,#0x00
      000486 7E 00            [12]  961 	mov	r6,#0x00
      000488 7F 00            [12]  962 	mov	r7,#0x00
      00048A 22               [24]  963 	ret
                                    964 ;	matrix.c:144: case '1': return muster1;
      00048B                        965 00128$:
      00048B 90 10 9F         [24]  966 	mov	dptr,#0x109f
      00048E 75 F0 42         [24]  967 	mov	b,#0x42
      000491 74 19            [12]  968 	mov	a,#0x19
      000493 7C 01            [12]  969 	mov	r4,#0x01
      000495 7D 00            [12]  970 	mov	r5,#0x00
      000497 7E 00            [12]  971 	mov	r6,#0x00
      000499 7F 00            [12]  972 	mov	r7,#0x00
      00049B 22               [24]  973 	ret
                                    974 ;	matrix.c:146: case '2': return muster2;
      00049C                        975 00129$:
      00049C 90 11 1F         [24]  976 	mov	dptr,#0x111f
      00049F 75 F0 11         [24]  977 	mov	b,#0x11
      0004A2 74 A2            [12]  978 	mov	a,#0xa2
      0004A4 7C 03            [12]  979 	mov	r4,#0x03
      0004A6 7D 00            [12]  980 	mov	r5,#0x00
      0004A8 7E 00            [12]  981 	mov	r6,#0x00
      0004AA 7F 00            [12]  982 	mov	r7,#0x00
      0004AC 22               [24]  983 	ret
                                    984 ;	matrix.c:148: case '3': return muster3;
      0004AD                        985 00130$:
      0004AD 90 06 2E         [24]  986 	mov	dptr,#0x062e
      0004B0 75 F0 13         [24]  987 	mov	b,#0x13
      0004B3 74 A2            [12]  988 	mov	a,#0xa2
      0004B5 7C 03            [12]  989 	mov	r4,#0x03
      0004B7 7D 00            [12]  990 	mov	r5,#0x00
      0004B9 7E 00            [12]  991 	mov	r6,#0x00
      0004BB 7F 00            [12]  992 	mov	r7,#0x00
      0004BD 22               [24]  993 	ret
                                    994 ;	matrix.c:150: case '4': return muster4;
      0004BE                        995 00131$:
      0004BE 90 7C 42         [24]  996 	mov	dptr,#0x7c42
      0004C1 75 F0 A9         [24]  997 	mov	b,#0xa9
      0004C4 74 8C            [12]  998 	mov	a,#0x8c
      0004C6 7C 00            [12]  999 	mov	r4,#0x00
      0004C8 7D 00            [12] 1000 	mov	r5,#0x00
      0004CA 7E 00            [12] 1001 	mov	r6,#0x00
      0004CC 7F 00            [12] 1002 	mov	r7,#0x00
      0004CE 22               [24] 1003 	ret
                                   1004 ;	matrix.c:152: case '5': return muster5;
      0004CF                       1005 00132$:
      0004CF 90 86 2E         [24] 1006 	mov	dptr,#0x862e
      0004D2 75 F0 E0         [24] 1007 	mov	b,#0xe0
      0004D5 74 E1            [12] 1008 	mov	a,#0xe1
      0004D7 7C 07            [12] 1009 	mov	r4,#0x07
      0004D9 7D 00            [12] 1010 	mov	r5,#0x00
      0004DB 7E 00            [12] 1011 	mov	r6,#0x00
      0004DD 7F 00            [12] 1012 	mov	r7,#0x00
      0004DF 22               [24] 1013 	ret
                                   1014 ;	matrix.c:154: case '6': return muster6;
      0004E0                       1015 00133$:
      0004E0 90 46 2E         [24] 1016 	mov	dptr,#0x462e
      0004E3 75 F0 0F         [24] 1017 	mov	b,#0x0f
      0004E6 74 A3            [12] 1018 	mov	a,#0xa3
      0004E8 7C 03            [12] 1019 	mov	r4,#0x03
      0004EA 7D 00            [12] 1020 	mov	r5,#0x00
      0004EC 7E 00            [12] 1021 	mov	r6,#0x00
      0004EE 7F 00            [12] 1022 	mov	r7,#0x00
                                   1023 ;	matrix.c:156: case '7': return muster7;
      0004F0 22               [24] 1024 	ret
      0004F1                       1025 00134$:
      0004F1 90 10 84         [24] 1026 	mov	dptr,#0x1084
      0004F4 75 F0 22         [24] 1027 	mov	b,#0x22
      0004F7 74 C2            [12] 1028 	mov	a,#0xc2
      0004F9 7C 07            [12] 1029 	mov	r4,#0x07
      0004FB 7D 00            [12] 1030 	mov	r5,#0x00
      0004FD 7E 00            [12] 1031 	mov	r6,#0x00
      0004FF 7F 00            [12] 1032 	mov	r7,#0x00
                                   1033 ;	matrix.c:158: case '8': return muster8;
      000501 22               [24] 1034 	ret
      000502                       1035 00135$:
      000502 90 46 2E         [24] 1036 	mov	dptr,#0x462e
      000505 75 F0 17         [24] 1037 	mov	b,#0x17
      000508 74 A3            [12] 1038 	mov	a,#0xa3
      00050A 7C 03            [12] 1039 	mov	r4,#0x03
      00050C 7D 00            [12] 1040 	mov	r5,#0x00
      00050E 7E 00            [12] 1041 	mov	r6,#0x00
      000510 7F 00            [12] 1042 	mov	r7,#0x00
                                   1043 ;	matrix.c:160: case '9': return muster9;
      000512 22               [24] 1044 	ret
      000513                       1045 00136$:
      000513 90 86 2E         [24] 1046 	mov	dptr,#0x862e
      000516 75 F0 17         [24] 1047 	mov	b,#0x17
      000519 74 A3            [12] 1048 	mov	a,#0xa3
      00051B 7C 03            [12] 1049 	mov	r4,#0x03
      00051D 7D 00            [12] 1050 	mov	r5,#0x00
      00051F 7E 00            [12] 1051 	mov	r6,#0x00
      000521 7F 00            [12] 1052 	mov	r7,#0x00
                                   1053 ;	matrix.c:163: case '+': return musterErr;
      000523 22               [24] 1054 	ret
      000524                       1055 00137$:
      000524 90 FF FF         [24] 1056 	mov	dptr,#0xffff
      000527 74 FF            [12] 1057 	mov	a,#0xff
      000529 F5 F0            [12] 1058 	mov	b,a
      00052B 7C 07            [12] 1059 	mov	r4,#0x07
      00052D 7D 00            [12] 1060 	mov	r5,#0x00
      00052F 7E 00            [12] 1061 	mov	r6,#0x00
      000531 7F 00            [12] 1062 	mov	r7,#0x00
                                   1063 ;	matrix.c:166: default: return musterErr;
      000533 22               [24] 1064 	ret
      000534                       1065 00138$:
      000534 90 FF FF         [24] 1066 	mov	dptr,#0xffff
      000537 74 FF            [12] 1067 	mov	a,#0xff
      000539 F5 F0            [12] 1068 	mov	b,a
      00053B 7C 07            [12] 1069 	mov	r4,#0x07
      00053D 7D 00            [12] 1070 	mov	r5,#0x00
      00053F 7E 00            [12] 1071 	mov	r6,#0x00
      000541 7F 00            [12] 1072 	mov	r7,#0x00
                                   1073 ;	matrix.c:168: }
                                   1074 ;	matrix.c:169: }
      000543 22               [24] 1075 	ret
                                   1076 ;------------------------------------------------------------
                                   1077 ;Allocation info for local variables in function 'matrix_draw'
                                   1078 ;------------------------------------------------------------
                                   1079 ;c                         Allocated to registers r7 
                                   1080 ;active_muster             Allocated with name '_matrix_draw_active_muster_65536_29'
                                   1081 ;i                         Allocated with name '_matrix_draw_i_131072_31'
                                   1082 ;j                         Allocated with name '_matrix_draw_j_262144_33'
                                   1083 ;index                     Allocated to registers 
                                   1084 ;val                       Allocated to registers r7 
                                   1085 ;------------------------------------------------------------
                                   1086 ;	matrix.c:171: void matrix_draw(char c) {
                                   1087 ;	-----------------------------------------
                                   1088 ;	 function matrix_draw
                                   1089 ;	-----------------------------------------
      000544                       1090 _matrix_draw:
                                   1091 ;	matrix.c:174: if (c > 0x60 && c < 0x7b) {
      000544 E5 82            [12] 1092 	mov	a,dpl
      000546 FF               [12] 1093 	mov	r7,a
      000547 24 9F            [12] 1094 	add	a,#0xff - 0x60
      000549 50 0B            [24] 1095 	jnc	00102$
      00054B BF 7B 00         [24] 1096 	cjne	r7,#0x7b,00147$
      00054E                       1097 00147$:
      00054E 50 06            [24] 1098 	jnc	00102$
                                   1099 ;	matrix.c:175: c -= 32;
      000550 8F 06            [24] 1100 	mov	ar6,r7
      000552 EE               [12] 1101 	mov	a,r6
      000553 24 E0            [12] 1102 	add	a,#0xe0
      000555 FF               [12] 1103 	mov	r7,a
      000556                       1104 00102$:
                                   1105 ;	matrix.c:178: active_muster = charToMuster(c);
      000556 8F 82            [24] 1106 	mov	dpl,r7
      000558 12 02 3D         [24] 1107 	lcall	_charToMuster
      00055B 85 82 0D         [24] 1108 	mov	_matrix_draw_active_muster_65536_29,dpl
      00055E 85 83 0E         [24] 1109 	mov	(_matrix_draw_active_muster_65536_29 + 1),dph
      000561 85 F0 0F         [24] 1110 	mov	(_matrix_draw_active_muster_65536_29 + 2),b
      000564 F5 10            [12] 1111 	mov	(_matrix_draw_active_muster_65536_29 + 3),a
      000566 8C 11            [24] 1112 	mov	(_matrix_draw_active_muster_65536_29 + 4),r4
      000568 8D 12            [24] 1113 	mov	(_matrix_draw_active_muster_65536_29 + 5),r5
      00056A 8E 13            [24] 1114 	mov	(_matrix_draw_active_muster_65536_29 + 6),r6
      00056C 8F 14            [24] 1115 	mov	(_matrix_draw_active_muster_65536_29 + 7),r7
                                   1116 ;	matrix.c:180: for (int i=0; i<5; i++) {
      00056E E4               [12] 1117 	clr	a
      00056F F5 15            [12] 1118 	mov	_matrix_draw_i_131072_31,a
      000571 F5 16            [12] 1119 	mov	(_matrix_draw_i_131072_31 + 1),a
      000573                       1120 00112$:
      000573 C3               [12] 1121 	clr	c
      000574 E5 15            [12] 1122 	mov	a,_matrix_draw_i_131072_31
      000576 94 05            [12] 1123 	subb	a,#0x05
      000578 E5 16            [12] 1124 	mov	a,(_matrix_draw_i_131072_31 + 1)
      00057A 64 80            [12] 1125 	xrl	a,#0x80
      00057C 94 80            [12] 1126 	subb	a,#0x80
      00057E 40 01            [24] 1127 	jc	00149$
      000580 22               [24] 1128 	ret
      000581                       1129 00149$:
                                   1130 ;	matrix.c:181: matrix_reset_cols();
      000581 12 06 36         [24] 1131 	lcall	_matrix_reset_cols
                                   1132 ;	matrix.c:182: matrix_reset_rows();
      000584 12 06 10         [24] 1133 	lcall	_matrix_reset_rows
                                   1134 ;	matrix.c:183: set_col(i);
      000587 85 15 82         [24] 1135 	mov	dpl,_matrix_draw_i_131072_31
      00058A 85 16 83         [24] 1136 	mov	dph,(_matrix_draw_i_131072_31 + 1)
      00058D 12 01 96         [24] 1137 	lcall	_set_col
                                   1138 ;	matrix.c:185: for (int j = 0; j<7; j++) {
      000590 E4               [12] 1139 	clr	a
      000591 F5 17            [12] 1140 	mov	_matrix_draw_j_262144_33,a
      000593 F5 18            [12] 1141 	mov	(_matrix_draw_j_262144_33 + 1),a
      000595                       1142 00109$:
      000595 C3               [12] 1143 	clr	c
      000596 E5 17            [12] 1144 	mov	a,_matrix_draw_j_262144_33
      000598 94 07            [12] 1145 	subb	a,#0x07
      00059A E5 18            [12] 1146 	mov	a,(_matrix_draw_j_262144_33 + 1)
      00059C 64 80            [12] 1147 	xrl	a,#0x80
      00059E 94 80            [12] 1148 	subb	a,#0x80
      0005A0 50 5A            [24] 1149 	jnc	00113$
                                   1150 ;	matrix.c:186: int index = 5*j + i;
      0005A2 E5 17            [12] 1151 	mov	a,_matrix_draw_j_262144_33
      0005A4 75 F0 05         [24] 1152 	mov	b,#0x05
      0005A7 A4               [48] 1153 	mul	ab
      0005A8 FB               [12] 1154 	mov	r3,a
      0005A9 E5 15            [12] 1155 	mov	a,_matrix_draw_i_131072_31
      0005AB 2B               [12] 1156 	add	a,r3
                                   1157 ;	matrix.c:187: bool val = (active_muster >> (34 - index)) & 1;
      0005AC D3               [12] 1158 	setb	c
      0005AD 94 22            [12] 1159 	subb	a,#0x22
      0005AF F4               [12] 1160 	cpl	a
      0005B0 FB               [12] 1161 	mov	r3,a
      0005B1 8B F0            [24] 1162 	mov	b,r3
      0005B3 05 F0            [12] 1163 	inc	b
      0005B5 A8 0D            [24] 1164 	mov	r0,_matrix_draw_active_muster_65536_29
      0005B7 A9 0E            [24] 1165 	mov	r1,(_matrix_draw_active_muster_65536_29 + 1)
      0005B9 AA 0F            [24] 1166 	mov	r2,(_matrix_draw_active_muster_65536_29 + 2)
      0005BB AB 10            [24] 1167 	mov	r3,(_matrix_draw_active_muster_65536_29 + 3)
      0005BD AC 11            [24] 1168 	mov	r4,(_matrix_draw_active_muster_65536_29 + 4)
      0005BF AD 12            [24] 1169 	mov	r5,(_matrix_draw_active_muster_65536_29 + 5)
      0005C1 AE 13            [24] 1170 	mov	r6,(_matrix_draw_active_muster_65536_29 + 6)
      0005C3 AF 14            [24] 1171 	mov	r7,(_matrix_draw_active_muster_65536_29 + 7)
      0005C5 80 19            [24] 1172 	sjmp	00152$
      0005C7                       1173 00151$:
      0005C7 C3               [12] 1174 	clr	c
      0005C8 EF               [12] 1175 	mov	a,r7
      0005C9 13               [12] 1176 	rrc	a
      0005CA FF               [12] 1177 	mov	r7,a
      0005CB EE               [12] 1178 	mov	a,r6
      0005CC 13               [12] 1179 	rrc	a
      0005CD FE               [12] 1180 	mov	r6,a
      0005CE ED               [12] 1181 	mov	a,r5
      0005CF 13               [12] 1182 	rrc	a
      0005D0 FD               [12] 1183 	mov	r5,a
      0005D1 EC               [12] 1184 	mov	a,r4
      0005D2 13               [12] 1185 	rrc	a
      0005D3 FC               [12] 1186 	mov	r4,a
      0005D4 EB               [12] 1187 	mov	a,r3
      0005D5 13               [12] 1188 	rrc	a
      0005D6 FB               [12] 1189 	mov	r3,a
      0005D7 EA               [12] 1190 	mov	a,r2
      0005D8 13               [12] 1191 	rrc	a
      0005D9 FA               [12] 1192 	mov	r2,a
      0005DA E9               [12] 1193 	mov	a,r1
      0005DB 13               [12] 1194 	rrc	a
      0005DC F9               [12] 1195 	mov	r1,a
      0005DD E8               [12] 1196 	mov	a,r0
      0005DE 13               [12] 1197 	rrc	a
      0005DF F8               [12] 1198 	mov	r0,a
      0005E0                       1199 00152$:
      0005E0 D5 F0 E4         [24] 1200 	djnz	b,00151$
      0005E3 E8               [12] 1201 	mov	a,r0
      0005E4 54 01            [12] 1202 	anl	a,#0x01
                                   1203 ;	matrix.c:188: if (val) {
      0005E6 FF               [12] 1204 	mov	r7,a
      0005E7 60 09            [24] 1205 	jz	00110$
                                   1206 ;	matrix.c:189: reset_row(j);
      0005E9 85 17 82         [24] 1207 	mov	dpl,_matrix_draw_j_262144_33
      0005EC 85 18 83         [24] 1208 	mov	dph,(_matrix_draw_j_262144_33 + 1)
      0005EF 12 02 22         [24] 1209 	lcall	_reset_row
      0005F2                       1210 00110$:
                                   1211 ;	matrix.c:185: for (int j = 0; j<7; j++) {
      0005F2 05 17            [12] 1212 	inc	_matrix_draw_j_262144_33
      0005F4 E4               [12] 1213 	clr	a
      0005F5 B5 17 9D         [24] 1214 	cjne	a,_matrix_draw_j_262144_33,00109$
      0005F8 05 18            [12] 1215 	inc	(_matrix_draw_j_262144_33 + 1)
      0005FA 80 99            [24] 1216 	sjmp	00109$
      0005FC                       1217 00113$:
                                   1218 ;	matrix.c:180: for (int i=0; i<5; i++) {
      0005FC 05 15            [12] 1219 	inc	_matrix_draw_i_131072_31
      0005FE E4               [12] 1220 	clr	a
      0005FF B5 15 02         [24] 1221 	cjne	a,_matrix_draw_i_131072_31,00155$
      000602 05 16            [12] 1222 	inc	(_matrix_draw_i_131072_31 + 1)
      000604                       1223 00155$:
                                   1224 ;	matrix.c:193: }
      000604 02 05 73         [24] 1225 	ljmp	00112$
                                   1226 ;------------------------------------------------------------
                                   1227 ;Allocation info for local variables in function 'matrix_setup'
                                   1228 ;------------------------------------------------------------
                                   1229 ;	matrix.c:195: void matrix_setup() {
                                   1230 ;	-----------------------------------------
                                   1231 ;	 function matrix_setup
                                   1232 ;	-----------------------------------------
      000607                       1233 _matrix_setup:
                                   1234 ;	matrix.c:196: matrix_reset();
                                   1235 ;	matrix.c:197: }
      000607 02 06 0A         [24] 1236 	ljmp	_matrix_reset
                                   1237 ;------------------------------------------------------------
                                   1238 ;Allocation info for local variables in function 'matrix_reset'
                                   1239 ;------------------------------------------------------------
                                   1240 ;	matrix.c:199: void matrix_reset() {
                                   1241 ;	-----------------------------------------
                                   1242 ;	 function matrix_reset
                                   1243 ;	-----------------------------------------
      00060A                       1244 _matrix_reset:
                                   1245 ;	matrix.c:200: matrix_reset_rows();
      00060A 12 06 10         [24] 1246 	lcall	_matrix_reset_rows
                                   1247 ;	matrix.c:202: matrix_reset_cols();
                                   1248 ;	matrix.c:203: }
      00060D 02 06 36         [24] 1249 	ljmp	_matrix_reset_cols
                                   1250 ;------------------------------------------------------------
                                   1251 ;Allocation info for local variables in function 'matrix_reset_rows'
                                   1252 ;------------------------------------------------------------
                                   1253 ;i                         Allocated to registers r6 r7 
                                   1254 ;------------------------------------------------------------
                                   1255 ;	matrix.c:205: void matrix_reset_rows() {
                                   1256 ;	-----------------------------------------
                                   1257 ;	 function matrix_reset_rows
                                   1258 ;	-----------------------------------------
      000610                       1259 _matrix_reset_rows:
                                   1260 ;	matrix.c:206: for (int i = 0; i<7; i++) {
      000610 7E 00            [12] 1261 	mov	r6,#0x00
      000612 7F 00            [12] 1262 	mov	r7,#0x00
      000614                       1263 00103$:
      000614 C3               [12] 1264 	clr	c
      000615 EE               [12] 1265 	mov	a,r6
      000616 94 07            [12] 1266 	subb	a,#0x07
      000618 EF               [12] 1267 	mov	a,r7
      000619 64 80            [12] 1268 	xrl	a,#0x80
      00061B 94 80            [12] 1269 	subb	a,#0x80
      00061D 50 16            [24] 1270 	jnc	00105$
                                   1271 ;	matrix.c:207: set_row(i);
      00061F 8E 82            [24] 1272 	mov	dpl,r6
      000621 8F 83            [24] 1273 	mov	dph,r7
      000623 C0 07            [24] 1274 	push	ar7
      000625 C0 06            [24] 1275 	push	ar6
      000627 12 02 0C         [24] 1276 	lcall	_set_row
      00062A D0 06            [24] 1277 	pop	ar6
      00062C D0 07            [24] 1278 	pop	ar7
                                   1279 ;	matrix.c:206: for (int i = 0; i<7; i++) {
      00062E 0E               [12] 1280 	inc	r6
      00062F BE 00 E2         [24] 1281 	cjne	r6,#0x00,00103$
      000632 0F               [12] 1282 	inc	r7
      000633 80 DF            [24] 1283 	sjmp	00103$
      000635                       1284 00105$:
                                   1285 ;	matrix.c:209: }
      000635 22               [24] 1286 	ret
                                   1287 ;------------------------------------------------------------
                                   1288 ;Allocation info for local variables in function 'matrix_reset_cols'
                                   1289 ;------------------------------------------------------------
                                   1290 ;i                         Allocated to registers r6 r7 
                                   1291 ;------------------------------------------------------------
                                   1292 ;	matrix.c:211: void matrix_reset_cols() {
                                   1293 ;	-----------------------------------------
                                   1294 ;	 function matrix_reset_cols
                                   1295 ;	-----------------------------------------
      000636                       1296 _matrix_reset_cols:
                                   1297 ;	matrix.c:212: for (int i = 0; i<5; i++) {
      000636 7E 00            [12] 1298 	mov	r6,#0x00
      000638 7F 00            [12] 1299 	mov	r7,#0x00
      00063A                       1300 00103$:
      00063A C3               [12] 1301 	clr	c
      00063B EE               [12] 1302 	mov	a,r6
      00063C 94 05            [12] 1303 	subb	a,#0x05
      00063E EF               [12] 1304 	mov	a,r7
      00063F 64 80            [12] 1305 	xrl	a,#0x80
      000641 94 80            [12] 1306 	subb	a,#0x80
      000643 50 16            [24] 1307 	jnc	00105$
                                   1308 ;	matrix.c:213: reset_col(i);
      000645 8E 82            [24] 1309 	mov	dpl,r6
      000647 8F 83            [24] 1310 	mov	dph,r7
      000649 C0 07            [24] 1311 	push	ar7
      00064B C0 06            [24] 1312 	push	ar6
      00064D 12 01 D1         [24] 1313 	lcall	_reset_col
      000650 D0 06            [24] 1314 	pop	ar6
      000652 D0 07            [24] 1315 	pop	ar7
                                   1316 ;	matrix.c:212: for (int i = 0; i<5; i++) {
      000654 0E               [12] 1317 	inc	r6
      000655 BE 00 E2         [24] 1318 	cjne	r6,#0x00,00103$
      000658 0F               [12] 1319 	inc	r7
      000659 80 DF            [24] 1320 	sjmp	00103$
      00065B                       1321 00105$:
                                   1322 ;	matrix.c:215: }
      00065B 22               [24] 1323 	ret
                                   1324 	.area CSEG    (CODE)
                                   1325 	.area CONST   (CODE)
                                   1326 	.area XINIT   (CODE)
                                   1327 	.area CABS    (ABS,CODE)

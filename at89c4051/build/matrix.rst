                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module matrix
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _reset_row
                                     12 	.globl _set_row
                                     13 	.globl _reset_col
                                     14 	.globl _set_col
                                     15 	.globl _CY
                                     16 	.globl _AC
                                     17 	.globl _F0
                                     18 	.globl _RS1
                                     19 	.globl _RS0
                                     20 	.globl _OV
                                     21 	.globl _F1
                                     22 	.globl _P
                                     23 	.globl _PS
                                     24 	.globl _PT1
                                     25 	.globl _PX1
                                     26 	.globl _PT0
                                     27 	.globl _PX0
                                     28 	.globl _RD
                                     29 	.globl _WR
                                     30 	.globl _T1
                                     31 	.globl _T0
                                     32 	.globl _INT1
                                     33 	.globl _INT0
                                     34 	.globl _TXD
                                     35 	.globl _RXD
                                     36 	.globl _P3_7
                                     37 	.globl _P3_6
                                     38 	.globl _P3_5
                                     39 	.globl _P3_4
                                     40 	.globl _P3_3
                                     41 	.globl _P3_2
                                     42 	.globl _P3_1
                                     43 	.globl _P3_0
                                     44 	.globl _EA
                                     45 	.globl _ES
                                     46 	.globl _ET1
                                     47 	.globl _EX1
                                     48 	.globl _ET0
                                     49 	.globl _EX0
                                     50 	.globl _P2_7
                                     51 	.globl _P2_6
                                     52 	.globl _P2_5
                                     53 	.globl _P2_4
                                     54 	.globl _P2_3
                                     55 	.globl _P2_2
                                     56 	.globl _P2_1
                                     57 	.globl _P2_0
                                     58 	.globl _SM0
                                     59 	.globl _SM1
                                     60 	.globl _SM2
                                     61 	.globl _REN
                                     62 	.globl _TB8
                                     63 	.globl _RB8
                                     64 	.globl _TI
                                     65 	.globl _RI
                                     66 	.globl _P1_7
                                     67 	.globl _P1_6
                                     68 	.globl _P1_5
                                     69 	.globl _P1_4
                                     70 	.globl _P1_3
                                     71 	.globl _P1_2
                                     72 	.globl _P1_1
                                     73 	.globl _P1_0
                                     74 	.globl _TF1
                                     75 	.globl _TR1
                                     76 	.globl _TF0
                                     77 	.globl _TR0
                                     78 	.globl _IE1
                                     79 	.globl _IT1
                                     80 	.globl _IE0
                                     81 	.globl _IT0
                                     82 	.globl _P0_7
                                     83 	.globl _P0_6
                                     84 	.globl _P0_5
                                     85 	.globl _P0_4
                                     86 	.globl _P0_3
                                     87 	.globl _P0_2
                                     88 	.globl _P0_1
                                     89 	.globl _P0_0
                                     90 	.globl _B
                                     91 	.globl _ACC
                                     92 	.globl _PSW
                                     93 	.globl _IP
                                     94 	.globl _P3
                                     95 	.globl _IE
                                     96 	.globl _P2
                                     97 	.globl _SBUF
                                     98 	.globl _SCON
                                     99 	.globl _P1
                                    100 	.globl _TH1
                                    101 	.globl _TH0
                                    102 	.globl _TL1
                                    103 	.globl _TL0
                                    104 	.globl _TMOD
                                    105 	.globl _TCON
                                    106 	.globl _PCON
                                    107 	.globl _DPH
                                    108 	.globl _DPL
                                    109 	.globl _SP
                                    110 	.globl _P0
                                    111 	.globl _matrix_draw
                                    112 	.globl _matrix_setup
                                    113 	.globl _matrix_reset
                                    114 	.globl _matrix_reset_rows
                                    115 	.globl _matrix_reset_cols
                                    116 ;--------------------------------------------------------
                                    117 ; special function registers
                                    118 ;--------------------------------------------------------
                                    119 	.area RSEG    (ABS,DATA)
      000000                        120 	.org 0x0000
                           000080   121 _P0	=	0x0080
                           000081   122 _SP	=	0x0081
                           000082   123 _DPL	=	0x0082
                           000083   124 _DPH	=	0x0083
                           000087   125 _PCON	=	0x0087
                           000088   126 _TCON	=	0x0088
                           000089   127 _TMOD	=	0x0089
                           00008A   128 _TL0	=	0x008a
                           00008B   129 _TL1	=	0x008b
                           00008C   130 _TH0	=	0x008c
                           00008D   131 _TH1	=	0x008d
                           000090   132 _P1	=	0x0090
                           000098   133 _SCON	=	0x0098
                           000099   134 _SBUF	=	0x0099
                           0000A0   135 _P2	=	0x00a0
                           0000A8   136 _IE	=	0x00a8
                           0000B0   137 _P3	=	0x00b0
                           0000B8   138 _IP	=	0x00b8
                           0000D0   139 _PSW	=	0x00d0
                           0000E0   140 _ACC	=	0x00e0
                           0000F0   141 _B	=	0x00f0
                                    142 ;--------------------------------------------------------
                                    143 ; special function bits
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0_0	=	0x0080
                           000081   148 _P0_1	=	0x0081
                           000082   149 _P0_2	=	0x0082
                           000083   150 _P0_3	=	0x0083
                           000084   151 _P0_4	=	0x0084
                           000085   152 _P0_5	=	0x0085
                           000086   153 _P0_6	=	0x0086
                           000087   154 _P0_7	=	0x0087
                           000088   155 _IT0	=	0x0088
                           000089   156 _IE0	=	0x0089
                           00008A   157 _IT1	=	0x008a
                           00008B   158 _IE1	=	0x008b
                           00008C   159 _TR0	=	0x008c
                           00008D   160 _TF0	=	0x008d
                           00008E   161 _TR1	=	0x008e
                           00008F   162 _TF1	=	0x008f
                           000090   163 _P1_0	=	0x0090
                           000091   164 _P1_1	=	0x0091
                           000092   165 _P1_2	=	0x0092
                           000093   166 _P1_3	=	0x0093
                           000094   167 _P1_4	=	0x0094
                           000095   168 _P1_5	=	0x0095
                           000096   169 _P1_6	=	0x0096
                           000097   170 _P1_7	=	0x0097
                           000098   171 _RI	=	0x0098
                           000099   172 _TI	=	0x0099
                           00009A   173 _RB8	=	0x009a
                           00009B   174 _TB8	=	0x009b
                           00009C   175 _REN	=	0x009c
                           00009D   176 _SM2	=	0x009d
                           00009E   177 _SM1	=	0x009e
                           00009F   178 _SM0	=	0x009f
                           0000A0   179 _P2_0	=	0x00a0
                           0000A1   180 _P2_1	=	0x00a1
                           0000A2   181 _P2_2	=	0x00a2
                           0000A3   182 _P2_3	=	0x00a3
                           0000A4   183 _P2_4	=	0x00a4
                           0000A5   184 _P2_5	=	0x00a5
                           0000A6   185 _P2_6	=	0x00a6
                           0000A7   186 _P2_7	=	0x00a7
                           0000A8   187 _EX0	=	0x00a8
                           0000A9   188 _ET0	=	0x00a9
                           0000AA   189 _EX1	=	0x00aa
                           0000AB   190 _ET1	=	0x00ab
                           0000AC   191 _ES	=	0x00ac
                           0000AF   192 _EA	=	0x00af
                           0000B0   193 _P3_0	=	0x00b0
                           0000B1   194 _P3_1	=	0x00b1
                           0000B2   195 _P3_2	=	0x00b2
                           0000B3   196 _P3_3	=	0x00b3
                           0000B4   197 _P3_4	=	0x00b4
                           0000B5   198 _P3_5	=	0x00b5
                           0000B6   199 _P3_6	=	0x00b6
                           0000B7   200 _P3_7	=	0x00b7
                           0000B0   201 _RXD	=	0x00b0
                           0000B1   202 _TXD	=	0x00b1
                           0000B2   203 _INT0	=	0x00b2
                           0000B3   204 _INT1	=	0x00b3
                           0000B4   205 _T0	=	0x00b4
                           0000B5   206 _T1	=	0x00b5
                           0000B6   207 _WR	=	0x00b6
                           0000B7   208 _RD	=	0x00b7
                           0000B8   209 _PX0	=	0x00b8
                           0000B9   210 _PT0	=	0x00b9
                           0000BA   211 _PX1	=	0x00ba
                           0000BB   212 _PT1	=	0x00bb
                           0000BC   213 _PS	=	0x00bc
                           0000D0   214 _P	=	0x00d0
                           0000D1   215 _F1	=	0x00d1
                           0000D2   216 _OV	=	0x00d2
                           0000D3   217 _RS0	=	0x00d3
                           0000D4   218 _RS1	=	0x00d4
                           0000D5   219 _F0	=	0x00d5
                           0000D6   220 _AC	=	0x00d6
                           0000D7   221 _CY	=	0x00d7
                                    222 ;--------------------------------------------------------
                                    223 ; overlayable register banks
                                    224 ;--------------------------------------------------------
                                    225 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        226 	.ds 8
                                    227 ;--------------------------------------------------------
                                    228 ; internal ram data
                                    229 ;--------------------------------------------------------
                                    230 	.area DSEG    (DATA)
      00001E                        231 _matrix_draw_active_muster_65536_29:
      00001E                        232 	.ds 8
      000026                        233 _matrix_draw_i_131072_31:
      000026                        234 	.ds 2
      000028                        235 _matrix_draw_j_262144_33:
      000028                        236 	.ds 2
                                    237 ;--------------------------------------------------------
                                    238 ; overlayable items in internal ram 
                                    239 ;--------------------------------------------------------
                                    240 	.area	OSEG    (OVR,DATA)
                                    241 	.area	OSEG    (OVR,DATA)
                                    242 	.area	OSEG    (OVR,DATA)
                                    243 	.area	OSEG    (OVR,DATA)
                                    244 	.area	OSEG    (OVR,DATA)
                                    245 	.area	OSEG    (OVR,DATA)
                                    246 	.area	OSEG    (OVR,DATA)
                                    247 ;--------------------------------------------------------
                                    248 ; indirectly addressable internal ram data
                                    249 ;--------------------------------------------------------
                                    250 	.area ISEG    (DATA)
                                    251 ;--------------------------------------------------------
                                    252 ; absolute internal ram data
                                    253 ;--------------------------------------------------------
                                    254 	.area IABS    (ABS,DATA)
                                    255 	.area IABS    (ABS,DATA)
                                    256 ;--------------------------------------------------------
                                    257 ; bit data
                                    258 ;--------------------------------------------------------
                                    259 	.area BSEG    (BIT)
                                    260 ;--------------------------------------------------------
                                    261 ; paged external ram data
                                    262 ;--------------------------------------------------------
                                    263 	.area PSEG    (PAG,XDATA)
                                    264 ;--------------------------------------------------------
                                    265 ; external ram data
                                    266 ;--------------------------------------------------------
                                    267 	.area XSEG    (XDATA)
                                    268 ;--------------------------------------------------------
                                    269 ; absolute external ram data
                                    270 ;--------------------------------------------------------
                                    271 	.area XABS    (ABS,XDATA)
                                    272 ;--------------------------------------------------------
                                    273 ; external initialized ram data
                                    274 ;--------------------------------------------------------
                                    275 	.area XISEG   (XDATA)
                                    276 	.area HOME    (CODE)
                                    277 	.area GSINIT0 (CODE)
                                    278 	.area GSINIT1 (CODE)
                                    279 	.area GSINIT2 (CODE)
                                    280 	.area GSINIT3 (CODE)
                                    281 	.area GSINIT4 (CODE)
                                    282 	.area GSINIT5 (CODE)
                                    283 	.area GSINIT  (CODE)
                                    284 	.area GSFINAL (CODE)
                                    285 	.area CSEG    (CODE)
                                    286 ;--------------------------------------------------------
                                    287 ; global & static initialisations
                                    288 ;--------------------------------------------------------
                                    289 	.area HOME    (CODE)
                                    290 	.area GSINIT  (CODE)
                                    291 	.area GSFINAL (CODE)
                                    292 	.area GSINIT  (CODE)
                                    293 ;--------------------------------------------------------
                                    294 ; Home
                                    295 ;--------------------------------------------------------
                                    296 	.area HOME    (CODE)
                                    297 	.area HOME    (CODE)
                                    298 ;--------------------------------------------------------
                                    299 ; code
                                    300 ;--------------------------------------------------------
                                    301 	.area CSEG    (CODE)
                                    302 ;------------------------------------------------------------
                                    303 ;Allocation info for local variables in function 'is_col_port3'
                                    304 ;------------------------------------------------------------
                                    305 ;col                       Allocated to registers r6 r7 
                                    306 ;------------------------------------------------------------
                                    307 ;	matrix.c:22: static bool is_col_port3(int col) {
                                    308 ;	-----------------------------------------
                                    309 ;	 function is_col_port3
                                    310 ;	-----------------------------------------
      000410                        311 _is_col_port3:
                           000007   312 	ar7 = 0x07
                           000006   313 	ar6 = 0x06
                           000005   314 	ar5 = 0x05
                           000004   315 	ar4 = 0x04
                           000003   316 	ar3 = 0x03
                           000002   317 	ar2 = 0x02
                           000001   318 	ar1 = 0x01
                           000000   319 	ar0 = 0x00
      000410 AE 82            [24]  320 	mov	r6,dpl
      000412 AF 83            [24]  321 	mov	r7,dph
                                    322 ;	matrix.c:23: if (col == 0) {
      000414 EE               [12]  323 	mov	a,r6
      000415 4F               [12]  324 	orl	a,r7
                                    325 ;	matrix.c:24: return false;
      000416 70 03            [24]  326 	jnz	00102$
      000418 F5 82            [12]  327 	mov	dpl,a
      00041A 22               [24]  328 	ret
      00041B                        329 00102$:
                                    330 ;	matrix.c:26: return true;
      00041B 75 82 01         [24]  331 	mov	dpl,#0x01
                                    332 ;	matrix.c:27: }
      00041E 22               [24]  333 	ret
                                    334 ;------------------------------------------------------------
                                    335 ;Allocation info for local variables in function 'get_pin_of_col'
                                    336 ;------------------------------------------------------------
                                    337 ;col                       Allocated to registers r6 r7 
                                    338 ;------------------------------------------------------------
                                    339 ;	matrix.c:29: static bool get_pin_of_col(int col) {
                                    340 ;	-----------------------------------------
                                    341 ;	 function get_pin_of_col
                                    342 ;	-----------------------------------------
      00041F                        343 _get_pin_of_col:
      00041F AE 82            [24]  344 	mov	r6,dpl
      000421 AF 83            [24]  345 	mov	r7,dph
                                    346 ;	matrix.c:30: if (col == 1) {
      000423 BE 01 07         [24]  347 	cjne	r6,#0x01,00102$
      000426 BF 00 04         [24]  348 	cjne	r7,#0x00,00102$
                                    349 ;	matrix.c:31: return 7;
      000429 75 82 01         [24]  350 	mov	dpl,#0x01
      00042C 22               [24]  351 	ret
      00042D                        352 00102$:
                                    353 ;	matrix.c:34: if (col == 2) {
      00042D BE 02 07         [24]  354 	cjne	r6,#0x02,00104$
      000430 BF 00 04         [24]  355 	cjne	r7,#0x00,00104$
                                    356 ;	matrix.c:35: return 5;
      000433 75 82 01         [24]  357 	mov	dpl,#0x01
      000436 22               [24]  358 	ret
      000437                        359 00104$:
                                    360 ;	matrix.c:38: if (col == 3) {
      000437 BE 03 07         [24]  361 	cjne	r6,#0x03,00106$
      00043A BF 00 04         [24]  362 	cjne	r7,#0x00,00106$
                                    363 ;	matrix.c:39: return 4;
      00043D 75 82 01         [24]  364 	mov	dpl,#0x01
      000440 22               [24]  365 	ret
      000441                        366 00106$:
                                    367 ;	matrix.c:42: if (col == 4) {
      000441 BE 04 07         [24]  368 	cjne	r6,#0x04,00108$
      000444 BF 00 04         [24]  369 	cjne	r7,#0x00,00108$
                                    370 ;	matrix.c:43: return 3;
      000447 75 82 01         [24]  371 	mov	dpl,#0x01
      00044A 22               [24]  372 	ret
      00044B                        373 00108$:
                                    374 ;	matrix.c:46: return -1;
      00044B 75 82 01         [24]  375 	mov	dpl,#0x01
                                    376 ;	matrix.c:47: }
      00044E 22               [24]  377 	ret
                                    378 ;------------------------------------------------------------
                                    379 ;Allocation info for local variables in function 'set_col'
                                    380 ;------------------------------------------------------------
                                    381 ;col                       Allocated to registers r6 r7 
                                    382 ;------------------------------------------------------------
                                    383 ;	matrix.c:49: void set_col(int col) {
                                    384 ;	-----------------------------------------
                                    385 ;	 function set_col
                                    386 ;	-----------------------------------------
      00044F                        387 _set_col:
      00044F AE 82            [24]  388 	mov	r6,dpl
      000451 AF 83            [24]  389 	mov	r7,dph
                                    390 ;	matrix.c:50: switch (col) {
      000453 BE 00 05         [24]  391 	cjne	r6,#0x00,00129$
      000456 BF 00 02         [24]  392 	cjne	r7,#0x00,00129$
      000459 80 20            [24]  393 	sjmp	00101$
      00045B                        394 00129$:
      00045B BE 01 05         [24]  395 	cjne	r6,#0x01,00130$
      00045E BF 00 02         [24]  396 	cjne	r7,#0x00,00130$
      000461 80 1B            [24]  397 	sjmp	00102$
      000463                        398 00130$:
      000463 BE 02 05         [24]  399 	cjne	r6,#0x02,00131$
      000466 BF 00 02         [24]  400 	cjne	r7,#0x00,00131$
      000469 80 16            [24]  401 	sjmp	00103$
      00046B                        402 00131$:
      00046B BE 03 05         [24]  403 	cjne	r6,#0x03,00132$
      00046E BF 00 02         [24]  404 	cjne	r7,#0x00,00132$
      000471 80 11            [24]  405 	sjmp	00104$
      000473                        406 00132$:
                                    407 ;	matrix.c:51: case 0: P1_0 = 1;
      000473 BE 04 13         [24]  408 	cjne	r6,#0x04,00107$
      000476 BF 00 10         [24]  409 	cjne	r7,#0x00,00107$
      000479 80 0C            [24]  410 	sjmp	00105$
      00047B                        411 00101$:
                                    412 ;	assignBit
      00047B D2 90            [12]  413 	setb	_P1_0
                                    414 ;	matrix.c:52: break;
                                    415 ;	matrix.c:53: case 1: P3_7 = 1;
      00047D 22               [24]  416 	ret
      00047E                        417 00102$:
                                    418 ;	assignBit
      00047E D2 B7            [12]  419 	setb	_P3_7
                                    420 ;	matrix.c:54: break;
                                    421 ;	matrix.c:55: case 2: P3_5 = 1;
      000480 22               [24]  422 	ret
      000481                        423 00103$:
                                    424 ;	assignBit
      000481 D2 B5            [12]  425 	setb	_P3_5
                                    426 ;	matrix.c:56: break;
                                    427 ;	matrix.c:57: case 3: P3_4 = 1;
      000483 22               [24]  428 	ret
      000484                        429 00104$:
                                    430 ;	assignBit
      000484 D2 B4            [12]  431 	setb	_P3_4
                                    432 ;	matrix.c:58: break;
                                    433 ;	matrix.c:59: case 4: P3_3 = 1;
      000486 22               [24]  434 	ret
      000487                        435 00105$:
                                    436 ;	assignBit
      000487 D2 B3            [12]  437 	setb	_P3_3
                                    438 ;	matrix.c:61: };
      000489                        439 00107$:
                                    440 ;	matrix.c:62: }
      000489 22               [24]  441 	ret
                                    442 ;------------------------------------------------------------
                                    443 ;Allocation info for local variables in function 'reset_col'
                                    444 ;------------------------------------------------------------
                                    445 ;col                       Allocated to registers r6 r7 
                                    446 ;------------------------------------------------------------
                                    447 ;	matrix.c:64: void reset_col(int col) {
                                    448 ;	-----------------------------------------
                                    449 ;	 function reset_col
                                    450 ;	-----------------------------------------
      00048A                        451 _reset_col:
      00048A AE 82            [24]  452 	mov	r6,dpl
      00048C AF 83            [24]  453 	mov	r7,dph
                                    454 ;	matrix.c:65: switch (col) {
      00048E BE 00 05         [24]  455 	cjne	r6,#0x00,00129$
      000491 BF 00 02         [24]  456 	cjne	r7,#0x00,00129$
      000494 80 20            [24]  457 	sjmp	00101$
      000496                        458 00129$:
      000496 BE 01 05         [24]  459 	cjne	r6,#0x01,00130$
      000499 BF 00 02         [24]  460 	cjne	r7,#0x00,00130$
      00049C 80 1B            [24]  461 	sjmp	00102$
      00049E                        462 00130$:
      00049E BE 02 05         [24]  463 	cjne	r6,#0x02,00131$
      0004A1 BF 00 02         [24]  464 	cjne	r7,#0x00,00131$
      0004A4 80 16            [24]  465 	sjmp	00103$
      0004A6                        466 00131$:
      0004A6 BE 03 05         [24]  467 	cjne	r6,#0x03,00132$
      0004A9 BF 00 02         [24]  468 	cjne	r7,#0x00,00132$
      0004AC 80 11            [24]  469 	sjmp	00104$
      0004AE                        470 00132$:
                                    471 ;	matrix.c:66: case 0: P1_0 = 0;
      0004AE BE 04 13         [24]  472 	cjne	r6,#0x04,00107$
      0004B1 BF 00 10         [24]  473 	cjne	r7,#0x00,00107$
      0004B4 80 0C            [24]  474 	sjmp	00105$
      0004B6                        475 00101$:
                                    476 ;	assignBit
      0004B6 C2 90            [12]  477 	clr	_P1_0
                                    478 ;	matrix.c:67: break;
                                    479 ;	matrix.c:68: case 1: P3_7 = 0;
      0004B8 22               [24]  480 	ret
      0004B9                        481 00102$:
                                    482 ;	assignBit
      0004B9 C2 B7            [12]  483 	clr	_P3_7
                                    484 ;	matrix.c:69: break;
                                    485 ;	matrix.c:70: case 2: P3_5 = 0;
      0004BB 22               [24]  486 	ret
      0004BC                        487 00103$:
                                    488 ;	assignBit
      0004BC C2 B5            [12]  489 	clr	_P3_5
                                    490 ;	matrix.c:71: break;
                                    491 ;	matrix.c:72: case 3: P3_4 = 0;
      0004BE 22               [24]  492 	ret
      0004BF                        493 00104$:
                                    494 ;	assignBit
      0004BF C2 B4            [12]  495 	clr	_P3_4
                                    496 ;	matrix.c:73: break;
                                    497 ;	matrix.c:74: case 4: P3_3 = 0;
      0004C1 22               [24]  498 	ret
      0004C2                        499 00105$:
                                    500 ;	assignBit
      0004C2 C2 B3            [12]  501 	clr	_P3_3
                                    502 ;	matrix.c:76: };
      0004C4                        503 00107$:
                                    504 ;	matrix.c:77: }
      0004C4 22               [24]  505 	ret
                                    506 ;------------------------------------------------------------
                                    507 ;Allocation info for local variables in function 'set_row'
                                    508 ;------------------------------------------------------------
                                    509 ;row                       Allocated to registers r6 r7 
                                    510 ;------------------------------------------------------------
                                    511 ;	matrix.c:79: void set_row(int row) {
                                    512 ;	-----------------------------------------
                                    513 ;	 function set_row
                                    514 ;	-----------------------------------------
      0004C5                        515 _set_row:
                                    516 ;	matrix.c:80: P1 = P1 | (1 << (row + 1));
      0004C5 E5 82            [12]  517 	mov	a,dpl
      0004C7 04               [12]  518 	inc	a
      0004C8 F5 F0            [12]  519 	mov	b,a
      0004CA 05 F0            [12]  520 	inc	b
      0004CC 74 01            [12]  521 	mov	a,#0x01
      0004CE 80 02            [24]  522 	sjmp	00105$
      0004D0                        523 00103$:
      0004D0 25 E0            [12]  524 	add	a,acc
      0004D2                        525 00105$:
      0004D2 D5 F0 FB         [24]  526 	djnz	b,00103$
      0004D5 AE 90            [24]  527 	mov	r6,_P1
      0004D7 4E               [12]  528 	orl	a,r6
      0004D8 F5 90            [12]  529 	mov	_P1,a
                                    530 ;	matrix.c:81: }
      0004DA 22               [24]  531 	ret
                                    532 ;------------------------------------------------------------
                                    533 ;Allocation info for local variables in function 'reset_row'
                                    534 ;------------------------------------------------------------
                                    535 ;row                       Allocated to registers r6 r7 
                                    536 ;------------------------------------------------------------
                                    537 ;	matrix.c:83: void reset_row(int row) {
                                    538 ;	-----------------------------------------
                                    539 ;	 function reset_row
                                    540 ;	-----------------------------------------
      0004DB                        541 _reset_row:
                                    542 ;	matrix.c:84: P1 = P1 & (0xFF - (1 << (row+1)));
      0004DB E5 82            [12]  543 	mov	a,dpl
      0004DD 04               [12]  544 	inc	a
      0004DE F5 F0            [12]  545 	mov	b,a
      0004E0 05 F0            [12]  546 	inc	b
      0004E2 74 01            [12]  547 	mov	a,#0x01
      0004E4 80 02            [24]  548 	sjmp	00105$
      0004E6                        549 00103$:
      0004E6 25 E0            [12]  550 	add	a,acc
      0004E8                        551 00105$:
      0004E8 D5 F0 FB         [24]  552 	djnz	b,00103$
      0004EB FF               [12]  553 	mov	r7,a
      0004EC 74 FF            [12]  554 	mov	a,#0xff
      0004EE C3               [12]  555 	clr	c
      0004EF 9F               [12]  556 	subb	a,r7
      0004F0 AE 90            [24]  557 	mov	r6,_P1
      0004F2 5E               [12]  558 	anl	a,r6
      0004F3 F5 90            [12]  559 	mov	_P1,a
                                    560 ;	matrix.c:85: }
      0004F5 22               [24]  561 	ret
                                    562 ;------------------------------------------------------------
                                    563 ;Allocation info for local variables in function 'charToMuster'
                                    564 ;------------------------------------------------------------
                                    565 ;c                         Allocated to registers r7 
                                    566 ;------------------------------------------------------------
                                    567 ;	matrix.c:87: static uint64_t charToMuster(char c) {
                                    568 ;	-----------------------------------------
                                    569 ;	 function charToMuster
                                    570 ;	-----------------------------------------
      0004F6                        571 _charToMuster:
      0004F6 AF 82            [24]  572 	mov	r7,dpl
                                    573 ;	matrix.c:88: switch (c) {
      0004F8 BF 2B 00         [24]  574 	cjne	r7,#0x2b,00150$
      0004FB                        575 00150$:
      0004FB 50 03            [24]  576 	jnc	00151$
      0004FD 02 07 ED         [24]  577 	ljmp	00138$
      000500                        578 00151$:
      000500 EF               [12]  579 	mov	a,r7
      000501 24 A5            [12]  580 	add	a,#0xff - 0x5a
      000503 50 03            [24]  581 	jnc	00152$
      000505 02 07 ED         [24]  582 	ljmp	00138$
      000508                        583 00152$:
      000508 EF               [12]  584 	mov	a,r7
      000509 24 D5            [12]  585 	add	a,#0xd5
      00050B FF               [12]  586 	mov	r7,a
      00050C 24 0A            [12]  587 	add	a,#(00153$-3-.)
      00050E 83               [24]  588 	movc	a,@a+pc
      00050F F5 82            [12]  589 	mov	dpl,a
      000511 EF               [12]  590 	mov	a,r7
      000512 24 34            [12]  591 	add	a,#(00154$-3-.)
      000514 83               [24]  592 	movc	a,@a+pc
      000515 F5 83            [12]  593 	mov	dph,a
      000517 E4               [12]  594 	clr	a
      000518 73               [24]  595 	jmp	@a+dptr
      000519                        596 00153$:
      000519 DD                     597 	.db	00137$
      00051A ED                     598 	.db	00138$
      00051B ED                     599 	.db	00138$
      00051C ED                     600 	.db	00138$
      00051D ED                     601 	.db	00138$
      00051E 33                     602 	.db	00127$
      00051F 44                     603 	.db	00128$
      000520 55                     604 	.db	00129$
      000521 66                     605 	.db	00130$
      000522 77                     606 	.db	00131$
      000523 88                     607 	.db	00132$
      000524 99                     608 	.db	00133$
      000525 AA                     609 	.db	00134$
      000526 BB                     610 	.db	00135$
      000527 CC                     611 	.db	00136$
      000528 ED                     612 	.db	00138$
      000529 ED                     613 	.db	00138$
      00052A ED                     614 	.db	00138$
      00052B ED                     615 	.db	00138$
      00052C ED                     616 	.db	00138$
      00052D ED                     617 	.db	00138$
      00052E ED                     618 	.db	00138$
      00052F 79                     619 	.db	00101$
      000530 8A                     620 	.db	00102$
      000531 9B                     621 	.db	00103$
      000532 AC                     622 	.db	00104$
      000533 BD                     623 	.db	00105$
      000534 CE                     624 	.db	00106$
      000535 DF                     625 	.db	00107$
      000536 F0                     626 	.db	00108$
      000537 01                     627 	.db	00109$
      000538 12                     628 	.db	00110$
      000539 23                     629 	.db	00111$
      00053A 34                     630 	.db	00112$
      00053B 45                     631 	.db	00113$
      00053C 56                     632 	.db	00114$
      00053D 67                     633 	.db	00115$
      00053E 78                     634 	.db	00116$
      00053F 89                     635 	.db	00117$
      000540 9A                     636 	.db	00118$
      000541 AB                     637 	.db	00119$
      000542 BC                     638 	.db	00120$
      000543 CD                     639 	.db	00121$
      000544 DE                     640 	.db	00122$
      000545 EF                     641 	.db	00123$
      000546 00                     642 	.db	00124$
      000547 11                     643 	.db	00125$
      000548 22                     644 	.db	00126$
      000549                        645 00154$:
      000549 07                     646 	.db	00137$>>8
      00054A 07                     647 	.db	00138$>>8
      00054B 07                     648 	.db	00138$>>8
      00054C 07                     649 	.db	00138$>>8
      00054D 07                     650 	.db	00138$>>8
      00054E 07                     651 	.db	00127$>>8
      00054F 07                     652 	.db	00128$>>8
      000550 07                     653 	.db	00129$>>8
      000551 07                     654 	.db	00130$>>8
      000552 07                     655 	.db	00131$>>8
      000553 07                     656 	.db	00132$>>8
      000554 07                     657 	.db	00133$>>8
      000555 07                     658 	.db	00134$>>8
      000556 07                     659 	.db	00135$>>8
      000557 07                     660 	.db	00136$>>8
      000558 07                     661 	.db	00138$>>8
      000559 07                     662 	.db	00138$>>8
      00055A 07                     663 	.db	00138$>>8
      00055B 07                     664 	.db	00138$>>8
      00055C 07                     665 	.db	00138$>>8
      00055D 07                     666 	.db	00138$>>8
      00055E 07                     667 	.db	00138$>>8
      00055F 05                     668 	.db	00101$>>8
      000560 05                     669 	.db	00102$>>8
      000561 05                     670 	.db	00103$>>8
      000562 05                     671 	.db	00104$>>8
      000563 05                     672 	.db	00105$>>8
      000564 05                     673 	.db	00106$>>8
      000565 05                     674 	.db	00107$>>8
      000566 05                     675 	.db	00108$>>8
      000567 06                     676 	.db	00109$>>8
      000568 06                     677 	.db	00110$>>8
      000569 06                     678 	.db	00111$>>8
      00056A 06                     679 	.db	00112$>>8
      00056B 06                     680 	.db	00113$>>8
      00056C 06                     681 	.db	00114$>>8
      00056D 06                     682 	.db	00115$>>8
      00056E 06                     683 	.db	00116$>>8
      00056F 06                     684 	.db	00117$>>8
      000570 06                     685 	.db	00118$>>8
      000571 06                     686 	.db	00119$>>8
      000572 06                     687 	.db	00120$>>8
      000573 06                     688 	.db	00121$>>8
      000574 06                     689 	.db	00122$>>8
      000575 06                     690 	.db	00123$>>8
      000576 07                     691 	.db	00124$>>8
      000577 07                     692 	.db	00125$>>8
      000578 07                     693 	.db	00126$>>8
                                    694 ;	matrix.c:89: case 'A': return musterA;
      000579                        695 00101$:
      000579 90 C6 31         [24]  696 	mov	dptr,#0xc631
      00057C 75 F0 1F         [24]  697 	mov	b,#0x1f
      00057F 74 A3            [12]  698 	mov	a,#0xa3
      000581 7C 03            [12]  699 	mov	r4,#0x03
      000583 7D 00            [12]  700 	mov	r5,#0x00
      000585 7E 00            [12]  701 	mov	r6,#0x00
      000587 7F 00            [12]  702 	mov	r7,#0x00
      000589 22               [24]  703 	ret
                                    704 ;	matrix.c:91: case 'B': return musterB;
      00058A                        705 00102$:
      00058A 90 46 3E         [24]  706 	mov	dptr,#0x463e
      00058D 75 F0 1F         [24]  707 	mov	b,#0x1f
      000590 74 A3            [12]  708 	mov	a,#0xa3
      000592 7C 07            [12]  709 	mov	r4,#0x07
      000594 7D 00            [12]  710 	mov	r5,#0x00
      000596 7E 00            [12]  711 	mov	r6,#0x00
      000598 7F 00            [12]  712 	mov	r7,#0x00
      00059A 22               [24]  713 	ret
                                    714 ;	matrix.c:93: case 'C': return musterC;
      00059B                        715 00103$:
      00059B 90 42 0F         [24]  716 	mov	dptr,#0x420f
      00059E 75 F0 08         [24]  717 	mov	b,#0x08
      0005A1 74 E1            [12]  718 	mov	a,#0xe1
      0005A3 7C 03            [12]  719 	mov	r4,#0x03
      0005A5 7D 00            [12]  720 	mov	r5,#0x00
      0005A7 7E 00            [12]  721 	mov	r6,#0x00
      0005A9 7F 00            [12]  722 	mov	r7,#0x00
      0005AB 22               [24]  723 	ret
                                    724 ;	matrix.c:95: case 'D': return musterD;
      0005AC                        725 00104$:
      0005AC 90 C6 3E         [24]  726 	mov	dptr,#0xc63e
      0005AF 75 F0 18         [24]  727 	mov	b,#0x18
      0005B2 74 A3            [12]  728 	mov	a,#0xa3
      0005B4 7C 07            [12]  729 	mov	r4,#0x07
      0005B6 7D 00            [12]  730 	mov	r5,#0x00
      0005B8 7E 00            [12]  731 	mov	r6,#0x00
      0005BA 7F 00            [12]  732 	mov	r7,#0x00
      0005BC 22               [24]  733 	ret
                                    734 ;	matrix.c:97: case 'E': return musterE;
      0005BD                        735 00105$:
      0005BD 90 C2 1F         [24]  736 	mov	dptr,#0xc21f
      0005C0 75 F0 0F         [24]  737 	mov	b,#0x0f
      0005C3 74 E1            [12]  738 	mov	a,#0xe1
      0005C5 7C 07            [12]  739 	mov	r4,#0x07
      0005C7 7D 00            [12]  740 	mov	r5,#0x00
      0005C9 7E 00            [12]  741 	mov	r6,#0x00
      0005CB 7F 00            [12]  742 	mov	r7,#0x00
      0005CD 22               [24]  743 	ret
                                    744 ;	matrix.c:99: case 'F': return musterF;
      0005CE                        745 00106$:
      0005CE 90 42 10         [24]  746 	mov	dptr,#0x4210
      0005D1 75 F0 0F         [24]  747 	mov	b,#0x0f
      0005D4 74 E1            [12]  748 	mov	a,#0xe1
      0005D6 7C 07            [12]  749 	mov	r4,#0x07
      0005D8 7D 00            [12]  750 	mov	r5,#0x00
      0005DA 7E 00            [12]  751 	mov	r6,#0x00
      0005DC 7F 00            [12]  752 	mov	r7,#0x00
      0005DE 22               [24]  753 	ret
                                    754 ;	matrix.c:101: case 'G': return musterG;
      0005DF                        755 00107$:
      0005DF 90 C6 2E         [24]  756 	mov	dptr,#0xc62e
      0005E2 75 F0 0B         [24]  757 	mov	b,#0x0b
      0005E5 74 E1            [12]  758 	mov	a,#0xe1
      0005E7 7C 03            [12]  759 	mov	r4,#0x03
      0005E9 7D 00            [12]  760 	mov	r5,#0x00
      0005EB 7E 00            [12]  761 	mov	r6,#0x00
      0005ED 7F 00            [12]  762 	mov	r7,#0x00
      0005EF 22               [24]  763 	ret
                                    764 ;	matrix.c:103: case 'H': return musterH;
      0005F0                        765 00108$:
      0005F0 90 C6 31         [24]  766 	mov	dptr,#0xc631
      0005F3 75 F0 1F         [24]  767 	mov	b,#0x1f
      0005F6 74 63            [12]  768 	mov	a,#0x63
      0005F8 7C 04            [12]  769 	mov	r4,#0x04
      0005FA 7D 00            [12]  770 	mov	r5,#0x00
      0005FC 7E 00            [12]  771 	mov	r6,#0x00
      0005FE 7F 00            [12]  772 	mov	r7,#0x00
      000600 22               [24]  773 	ret
                                    774 ;	matrix.c:105: case 'I': return musterI;
      000601                        775 00109$:
      000601 90 10 9F         [24]  776 	mov	dptr,#0x109f
      000604 75 F0 42         [24]  777 	mov	b,#0x42
      000607 74 C8            [12]  778 	mov	a,#0xc8
      000609 7C 07            [12]  779 	mov	r4,#0x07
      00060B 7D 00            [12]  780 	mov	r5,#0x00
      00060D 7E 00            [12]  781 	mov	r6,#0x00
      00060F 7F 00            [12]  782 	mov	r7,#0x00
      000611 22               [24]  783 	ret
                                    784 ;	matrix.c:107: case 'J': return musterJ;
      000612                        785 00110$:
      000612 90 4A 4C         [24]  786 	mov	dptr,#0x4a4c
      000615 75 F0 21         [24]  787 	mov	b,#0x21
      000618 74 84            [12]  788 	mov	a,#0x84
      00061A 7C 00            [12]  789 	mov	r4,#0x00
      00061C 7D 00            [12]  790 	mov	r5,#0x00
      00061E 7E 00            [12]  791 	mov	r6,#0x00
      000620 7F 00            [12]  792 	mov	r7,#0x00
      000622 22               [24]  793 	ret
                                    794 ;	matrix.c:109: case 'K': return musterK;
      000623                        795 00111$:
      000623 90 52 51         [24]  796 	mov	dptr,#0x5251
      000626 75 F0 4C         [24]  797 	mov	b,#0x4c
      000629 74 65            [12]  798 	mov	a,#0x65
      00062B 7C 04            [12]  799 	mov	r4,#0x04
      00062D 7D 00            [12]  800 	mov	r5,#0x00
      00062F 7E 00            [12]  801 	mov	r6,#0x00
      000631 7F 00            [12]  802 	mov	r7,#0x00
      000633 22               [24]  803 	ret
                                    804 ;	matrix.c:111: case 'L': return musterL;
      000634                        805 00112$:
      000634 90 42 1F         [24]  806 	mov	dptr,#0x421f
      000637 75 F0 08         [24]  807 	mov	b,#0x08
      00063A 74 21            [12]  808 	mov	a,#0x21
      00063C 7C 04            [12]  809 	mov	r4,#0x04
      00063E 7D 00            [12]  810 	mov	r5,#0x00
      000640 7E 00            [12]  811 	mov	r6,#0x00
      000642 7F 00            [12]  812 	mov	r7,#0x00
      000644 22               [24]  813 	ret
                                    814 ;	matrix.c:113: case 'M': return musterM;
      000645                        815 00113$:
      000645 90 C6 31         [24]  816 	mov	dptr,#0xc631
      000648 75 F0 58         [24]  817 	mov	b,#0x58
      00064B 74 77            [12]  818 	mov	a,#0x77
      00064D 7C 04            [12]  819 	mov	r4,#0x04
      00064F 7D 00            [12]  820 	mov	r5,#0x00
      000651 7E 00            [12]  821 	mov	r6,#0x00
      000653 7F 00            [12]  822 	mov	r7,#0x00
      000655 22               [24]  823 	ret
                                    824 ;	matrix.c:115: case 'N': return musterN;
      000656                        825 00114$:
      000656 90 CE 31         [24]  826 	mov	dptr,#0xce31
      000659 75 F0 9A         [24]  827 	mov	b,#0x9a
      00065C 74 63            [12]  828 	mov	a,#0x63
      00065E 7C 04            [12]  829 	mov	r4,#0x04
      000660 7D 00            [12]  830 	mov	r5,#0x00
      000662 7E 00            [12]  831 	mov	r6,#0x00
      000664 7F 00            [12]  832 	mov	r7,#0x00
      000666 22               [24]  833 	ret
                                    834 ;	matrix.c:117: case 'O': return musterO;
      000667                        835 00115$:
      000667 90 C6 2E         [24]  836 	mov	dptr,#0xc62e
      00066A 75 F0 18         [24]  837 	mov	b,#0x18
      00066D 74 A3            [12]  838 	mov	a,#0xa3
      00066F 7C 03            [12]  839 	mov	r4,#0x03
      000671 7D 00            [12]  840 	mov	r5,#0x00
      000673 7E 00            [12]  841 	mov	r6,#0x00
      000675 7F 00            [12]  842 	mov	r7,#0x00
      000677 22               [24]  843 	ret
                                    844 ;	matrix.c:119: case 'P': return musterP;
      000678                        845 00116$:
      000678 90 42 10         [24]  846 	mov	dptr,#0x4210
      00067B 75 F0 1F         [24]  847 	mov	b,#0x1f
      00067E 74 A3            [12]  848 	mov	a,#0xa3
      000680 7C 07            [12]  849 	mov	r4,#0x07
      000682 7D 00            [12]  850 	mov	r5,#0x00
      000684 7E 00            [12]  851 	mov	r6,#0x00
      000686 7F 00            [12]  852 	mov	r7,#0x00
      000688 22               [24]  853 	ret
                                    854 ;	matrix.c:121: case 'Q': return musterQ;
      000689                        855 00117$:
      000689 90 D6 6F         [24]  856 	mov	dptr,#0xd66f
      00068C 75 F0 18         [24]  857 	mov	b,#0x18
      00068F 74 A3            [12]  858 	mov	a,#0xa3
      000691 7C 03            [12]  859 	mov	r4,#0x03
      000693 7D 00            [12]  860 	mov	r5,#0x00
      000695 7E 00            [12]  861 	mov	r6,#0x00
      000697 7F 00            [12]  862 	mov	r7,#0x00
      000699 22               [24]  863 	ret
                                    864 ;	matrix.c:123: case 'R': return musterR;
      00069A                        865 00118$:
      00069A 90 52 51         [24]  866 	mov	dptr,#0x5251
      00069D 75 F0 1F         [24]  867 	mov	b,#0x1f
      0006A0 74 A3            [12]  868 	mov	a,#0xa3
      0006A2 7C 07            [12]  869 	mov	r4,#0x07
      0006A4 7D 00            [12]  870 	mov	r5,#0x00
      0006A6 7E 00            [12]  871 	mov	r6,#0x00
      0006A8 7F 00            [12]  872 	mov	r7,#0x00
      0006AA 22               [24]  873 	ret
                                    874 ;	matrix.c:125: case 'S': return musterS;
      0006AB                        875 00119$:
      0006AB 90 04 3E         [24]  876 	mov	dptr,#0x043e
      0006AE 75 F0 07         [24]  877 	mov	b,#0x07
      0006B1 74 E1            [12]  878 	mov	a,#0xe1
      0006B3 7C 03            [12]  879 	mov	r4,#0x03
      0006B5 7D 00            [12]  880 	mov	r5,#0x00
      0006B7 7E 00            [12]  881 	mov	r6,#0x00
      0006B9 7F 00            [12]  882 	mov	r7,#0x00
      0006BB 22               [24]  883 	ret
                                    884 ;	matrix.c:127: case 'T': return musterT;
      0006BC                        885 00120$:
      0006BC 90 10 84         [24]  886 	mov	dptr,#0x1084
      0006BF 75 F0 42         [24]  887 	mov	b,#0x42
      0006C2 74 C8            [12]  888 	mov	a,#0xc8
      0006C4 7C 07            [12]  889 	mov	r4,#0x07
      0006C6 7D 00            [12]  890 	mov	r5,#0x00
      0006C8 7E 00            [12]  891 	mov	r6,#0x00
      0006CA 7F 00            [12]  892 	mov	r7,#0x00
      0006CC 22               [24]  893 	ret
                                    894 ;	matrix.c:129: case 'U': return musterU;
      0006CD                        895 00121$:
      0006CD 90 C6 2E         [24]  896 	mov	dptr,#0xc62e
      0006D0 75 F0 18         [24]  897 	mov	b,#0x18
      0006D3 74 63            [12]  898 	mov	a,#0x63
      0006D5 7C 04            [12]  899 	mov	r4,#0x04
      0006D7 7D 00            [12]  900 	mov	r5,#0x00
      0006D9 7E 00            [12]  901 	mov	r6,#0x00
      0006DB 7F 00            [12]  902 	mov	r7,#0x00
      0006DD 22               [24]  903 	ret
                                    904 ;	matrix.c:131: case 'V': return musterV;
      0006DE                        905 00122$:
      0006DE 90 C5 44         [24]  906 	mov	dptr,#0xc544
      0006E1 75 F0 18         [24]  907 	mov	b,#0x18
      0006E4 74 63            [12]  908 	mov	a,#0x63
      0006E6 7C 04            [12]  909 	mov	r4,#0x04
      0006E8 7D 00            [12]  910 	mov	r5,#0x00
      0006EA 7E 00            [12]  911 	mov	r6,#0x00
      0006EC 7F 00            [12]  912 	mov	r7,#0x00
      0006EE 22               [24]  913 	ret
                                    914 ;	matrix.c:133: case 'W': return musterW;
      0006EF                        915 00123$:
      0006EF 90 D7 71         [24]  916 	mov	dptr,#0xd771
      0006F2 75 F0 18         [24]  917 	mov	b,#0x18
      0006F5 74 63            [12]  918 	mov	a,#0x63
      0006F7 7C 04            [12]  919 	mov	r4,#0x04
      0006F9 7D 00            [12]  920 	mov	r5,#0x00
      0006FB 7E 00            [12]  921 	mov	r6,#0x00
      0006FD 7F 00            [12]  922 	mov	r7,#0x00
      0006FF 22               [24]  923 	ret
                                    924 ;	matrix.c:135: case 'X': return musterX;
      000700                        925 00124$:
      000700 90 2A 31         [24]  926 	mov	dptr,#0x2a31
      000703 75 F0 A2         [24]  927 	mov	b,#0xa2
      000706 74 62            [12]  928 	mov	a,#0x62
      000708 7C 04            [12]  929 	mov	r4,#0x04
      00070A 7D 00            [12]  930 	mov	r5,#0x00
      00070C 7E 00            [12]  931 	mov	r6,#0x00
      00070E 7F 00            [12]  932 	mov	r7,#0x00
      000710 22               [24]  933 	ret
                                    934 ;	matrix.c:137: case 'Y': return musterY;
      000711                        935 00125$:
      000711 90 10 84         [24]  936 	mov	dptr,#0x1084
      000714 75 F0 A2         [24]  937 	mov	b,#0xa2
      000717 74 62            [12]  938 	mov	a,#0x62
      000719 7C 04            [12]  939 	mov	r4,#0x04
      00071B 7D 00            [12]  940 	mov	r5,#0x00
      00071D 7E 00            [12]  941 	mov	r6,#0x00
      00071F 7F 00            [12]  942 	mov	r7,#0x00
      000721 22               [24]  943 	ret
                                    944 ;	matrix.c:139: case 'Z': return musterZ;
      000722                        945 00126$:
      000722 90 22 1F         [24]  946 	mov	dptr,#0x221f
      000725 75 F0 22         [24]  947 	mov	b,#0x22
      000728 74 C2            [12]  948 	mov	a,#0xc2
      00072A 7C 07            [12]  949 	mov	r4,#0x07
      00072C 7D 00            [12]  950 	mov	r5,#0x00
      00072E 7E 00            [12]  951 	mov	r6,#0x00
      000730 7F 00            [12]  952 	mov	r7,#0x00
      000732 22               [24]  953 	ret
                                    954 ;	matrix.c:142: case '0': return muster0;
      000733                        955 00127$:
      000733 90 E7 2E         [24]  956 	mov	dptr,#0xe72e
      000736 75 F0 3A         [24]  957 	mov	b,#0x3a
      000739 74 A7            [12]  958 	mov	a,#0xa7
      00073B 7C 03            [12]  959 	mov	r4,#0x03
      00073D 7D 00            [12]  960 	mov	r5,#0x00
      00073F 7E 00            [12]  961 	mov	r6,#0x00
      000741 7F 00            [12]  962 	mov	r7,#0x00
      000743 22               [24]  963 	ret
                                    964 ;	matrix.c:144: case '1': return muster1;
      000744                        965 00128$:
      000744 90 10 9F         [24]  966 	mov	dptr,#0x109f
      000747 75 F0 42         [24]  967 	mov	b,#0x42
      00074A 74 19            [12]  968 	mov	a,#0x19
      00074C 7C 01            [12]  969 	mov	r4,#0x01
      00074E 7D 00            [12]  970 	mov	r5,#0x00
      000750 7E 00            [12]  971 	mov	r6,#0x00
      000752 7F 00            [12]  972 	mov	r7,#0x00
      000754 22               [24]  973 	ret
                                    974 ;	matrix.c:146: case '2': return muster2;
      000755                        975 00129$:
      000755 90 11 1F         [24]  976 	mov	dptr,#0x111f
      000758 75 F0 11         [24]  977 	mov	b,#0x11
      00075B 74 A2            [12]  978 	mov	a,#0xa2
      00075D 7C 03            [12]  979 	mov	r4,#0x03
      00075F 7D 00            [12]  980 	mov	r5,#0x00
      000761 7E 00            [12]  981 	mov	r6,#0x00
      000763 7F 00            [12]  982 	mov	r7,#0x00
      000765 22               [24]  983 	ret
                                    984 ;	matrix.c:148: case '3': return muster3;
      000766                        985 00130$:
      000766 90 06 2E         [24]  986 	mov	dptr,#0x062e
      000769 75 F0 13         [24]  987 	mov	b,#0x13
      00076C 74 A2            [12]  988 	mov	a,#0xa2
      00076E 7C 03            [12]  989 	mov	r4,#0x03
      000770 7D 00            [12]  990 	mov	r5,#0x00
      000772 7E 00            [12]  991 	mov	r6,#0x00
      000774 7F 00            [12]  992 	mov	r7,#0x00
      000776 22               [24]  993 	ret
                                    994 ;	matrix.c:150: case '4': return muster4;
      000777                        995 00131$:
      000777 90 7C 42         [24]  996 	mov	dptr,#0x7c42
      00077A 75 F0 A9         [24]  997 	mov	b,#0xa9
      00077D 74 8C            [12]  998 	mov	a,#0x8c
      00077F 7C 00            [12]  999 	mov	r4,#0x00
      000781 7D 00            [12] 1000 	mov	r5,#0x00
      000783 7E 00            [12] 1001 	mov	r6,#0x00
      000785 7F 00            [12] 1002 	mov	r7,#0x00
      000787 22               [24] 1003 	ret
                                   1004 ;	matrix.c:152: case '5': return muster5;
      000788                       1005 00132$:
      000788 90 86 2E         [24] 1006 	mov	dptr,#0x862e
      00078B 75 F0 E0         [24] 1007 	mov	b,#0xe0
      00078E 74 E1            [12] 1008 	mov	a,#0xe1
      000790 7C 07            [12] 1009 	mov	r4,#0x07
      000792 7D 00            [12] 1010 	mov	r5,#0x00
      000794 7E 00            [12] 1011 	mov	r6,#0x00
      000796 7F 00            [12] 1012 	mov	r7,#0x00
      000798 22               [24] 1013 	ret
                                   1014 ;	matrix.c:154: case '6': return muster6;
      000799                       1015 00133$:
      000799 90 46 2E         [24] 1016 	mov	dptr,#0x462e
      00079C 75 F0 0F         [24] 1017 	mov	b,#0x0f
      00079F 74 A3            [12] 1018 	mov	a,#0xa3
      0007A1 7C 03            [12] 1019 	mov	r4,#0x03
      0007A3 7D 00            [12] 1020 	mov	r5,#0x00
      0007A5 7E 00            [12] 1021 	mov	r6,#0x00
      0007A7 7F 00            [12] 1022 	mov	r7,#0x00
                                   1023 ;	matrix.c:156: case '7': return muster7;
      0007A9 22               [24] 1024 	ret
      0007AA                       1025 00134$:
      0007AA 90 10 84         [24] 1026 	mov	dptr,#0x1084
      0007AD 75 F0 22         [24] 1027 	mov	b,#0x22
      0007B0 74 C2            [12] 1028 	mov	a,#0xc2
      0007B2 7C 07            [12] 1029 	mov	r4,#0x07
      0007B4 7D 00            [12] 1030 	mov	r5,#0x00
      0007B6 7E 00            [12] 1031 	mov	r6,#0x00
      0007B8 7F 00            [12] 1032 	mov	r7,#0x00
                                   1033 ;	matrix.c:158: case '8': return muster8;
      0007BA 22               [24] 1034 	ret
      0007BB                       1035 00135$:
      0007BB 90 46 2E         [24] 1036 	mov	dptr,#0x462e
      0007BE 75 F0 17         [24] 1037 	mov	b,#0x17
      0007C1 74 A3            [12] 1038 	mov	a,#0xa3
      0007C3 7C 03            [12] 1039 	mov	r4,#0x03
      0007C5 7D 00            [12] 1040 	mov	r5,#0x00
      0007C7 7E 00            [12] 1041 	mov	r6,#0x00
      0007C9 7F 00            [12] 1042 	mov	r7,#0x00
                                   1043 ;	matrix.c:160: case '9': return muster9;
      0007CB 22               [24] 1044 	ret
      0007CC                       1045 00136$:
      0007CC 90 86 2E         [24] 1046 	mov	dptr,#0x862e
      0007CF 75 F0 17         [24] 1047 	mov	b,#0x17
      0007D2 74 A3            [12] 1048 	mov	a,#0xa3
      0007D4 7C 03            [12] 1049 	mov	r4,#0x03
      0007D6 7D 00            [12] 1050 	mov	r5,#0x00
      0007D8 7E 00            [12] 1051 	mov	r6,#0x00
      0007DA 7F 00            [12] 1052 	mov	r7,#0x00
                                   1053 ;	matrix.c:163: case '+': return musterErr;
      0007DC 22               [24] 1054 	ret
      0007DD                       1055 00137$:
      0007DD 90 FF FF         [24] 1056 	mov	dptr,#0xffff
      0007E0 74 FF            [12] 1057 	mov	a,#0xff
      0007E2 F5 F0            [12] 1058 	mov	b,a
      0007E4 7C 07            [12] 1059 	mov	r4,#0x07
      0007E6 7D 00            [12] 1060 	mov	r5,#0x00
      0007E8 7E 00            [12] 1061 	mov	r6,#0x00
      0007EA 7F 00            [12] 1062 	mov	r7,#0x00
                                   1063 ;	matrix.c:166: default: return musterErr;
      0007EC 22               [24] 1064 	ret
      0007ED                       1065 00138$:
      0007ED 90 FF FF         [24] 1066 	mov	dptr,#0xffff
      0007F0 74 FF            [12] 1067 	mov	a,#0xff
      0007F2 F5 F0            [12] 1068 	mov	b,a
      0007F4 7C 07            [12] 1069 	mov	r4,#0x07
      0007F6 7D 00            [12] 1070 	mov	r5,#0x00
      0007F8 7E 00            [12] 1071 	mov	r6,#0x00
      0007FA 7F 00            [12] 1072 	mov	r7,#0x00
                                   1073 ;	matrix.c:168: }
                                   1074 ;	matrix.c:169: }
      0007FC 22               [24] 1075 	ret
                                   1076 ;------------------------------------------------------------
                                   1077 ;Allocation info for local variables in function 'matrix_draw'
                                   1078 ;------------------------------------------------------------
                                   1079 ;c                         Allocated to registers r7 
                                   1080 ;active_muster             Allocated with name '_matrix_draw_active_muster_65536_29'
                                   1081 ;i                         Allocated with name '_matrix_draw_i_131072_31'
                                   1082 ;j                         Allocated with name '_matrix_draw_j_262144_33'
                                   1083 ;index                     Allocated to registers 
                                   1084 ;val                       Allocated to registers r7 
                                   1085 ;------------------------------------------------------------
                                   1086 ;	matrix.c:171: void matrix_draw(char c) {
                                   1087 ;	-----------------------------------------
                                   1088 ;	 function matrix_draw
                                   1089 ;	-----------------------------------------
      0007FD                       1090 _matrix_draw:
                                   1091 ;	matrix.c:174: if (c > 0x60 && c < 0x7b) {
      0007FD E5 82            [12] 1092 	mov	a,dpl
      0007FF FF               [12] 1093 	mov	r7,a
      000800 24 9F            [12] 1094 	add	a,#0xff - 0x60
      000802 50 0B            [24] 1095 	jnc	00102$
      000804 BF 7B 00         [24] 1096 	cjne	r7,#0x7b,00147$
      000807                       1097 00147$:
      000807 50 06            [24] 1098 	jnc	00102$
                                   1099 ;	matrix.c:175: c -= 32;
      000809 8F 06            [24] 1100 	mov	ar6,r7
      00080B EE               [12] 1101 	mov	a,r6
      00080C 24 E0            [12] 1102 	add	a,#0xe0
      00080E FF               [12] 1103 	mov	r7,a
      00080F                       1104 00102$:
                                   1105 ;	matrix.c:178: active_muster = charToMuster(c);
      00080F 8F 82            [24] 1106 	mov	dpl,r7
      000811 12 04 F6         [24] 1107 	lcall	_charToMuster
      000814 85 82 1E         [24] 1108 	mov	_matrix_draw_active_muster_65536_29,dpl
      000817 85 83 1F         [24] 1109 	mov	(_matrix_draw_active_muster_65536_29 + 1),dph
      00081A 85 F0 20         [24] 1110 	mov	(_matrix_draw_active_muster_65536_29 + 2),b
      00081D F5 21            [12] 1111 	mov	(_matrix_draw_active_muster_65536_29 + 3),a
      00081F 8C 22            [24] 1112 	mov	(_matrix_draw_active_muster_65536_29 + 4),r4
      000821 8D 23            [24] 1113 	mov	(_matrix_draw_active_muster_65536_29 + 5),r5
      000823 8E 24            [24] 1114 	mov	(_matrix_draw_active_muster_65536_29 + 6),r6
      000825 8F 25            [24] 1115 	mov	(_matrix_draw_active_muster_65536_29 + 7),r7
                                   1116 ;	matrix.c:180: for (int i=0; i<5; i++) {
      000827 E4               [12] 1117 	clr	a
      000828 F5 26            [12] 1118 	mov	_matrix_draw_i_131072_31,a
      00082A F5 27            [12] 1119 	mov	(_matrix_draw_i_131072_31 + 1),a
      00082C                       1120 00112$:
      00082C C3               [12] 1121 	clr	c
      00082D E5 26            [12] 1122 	mov	a,_matrix_draw_i_131072_31
      00082F 94 05            [12] 1123 	subb	a,#0x05
      000831 E5 27            [12] 1124 	mov	a,(_matrix_draw_i_131072_31 + 1)
      000833 64 80            [12] 1125 	xrl	a,#0x80
      000835 94 80            [12] 1126 	subb	a,#0x80
      000837 40 01            [24] 1127 	jc	00149$
      000839 22               [24] 1128 	ret
      00083A                       1129 00149$:
                                   1130 ;	matrix.c:181: matrix_reset_cols();
      00083A 12 08 EF         [24] 1131 	lcall	_matrix_reset_cols
                                   1132 ;	matrix.c:182: matrix_reset_rows();
      00083D 12 08 C9         [24] 1133 	lcall	_matrix_reset_rows
                                   1134 ;	matrix.c:183: set_col(i);
      000840 85 26 82         [24] 1135 	mov	dpl,_matrix_draw_i_131072_31
      000843 85 27 83         [24] 1136 	mov	dph,(_matrix_draw_i_131072_31 + 1)
      000846 12 04 4F         [24] 1137 	lcall	_set_col
                                   1138 ;	matrix.c:185: for (int j = 0; j<7; j++) {
      000849 E4               [12] 1139 	clr	a
      00084A F5 28            [12] 1140 	mov	_matrix_draw_j_262144_33,a
      00084C F5 29            [12] 1141 	mov	(_matrix_draw_j_262144_33 + 1),a
      00084E                       1142 00109$:
      00084E C3               [12] 1143 	clr	c
      00084F E5 28            [12] 1144 	mov	a,_matrix_draw_j_262144_33
      000851 94 07            [12] 1145 	subb	a,#0x07
      000853 E5 29            [12] 1146 	mov	a,(_matrix_draw_j_262144_33 + 1)
      000855 64 80            [12] 1147 	xrl	a,#0x80
      000857 94 80            [12] 1148 	subb	a,#0x80
      000859 50 5A            [24] 1149 	jnc	00113$
                                   1150 ;	matrix.c:186: int index = 5*j + i;
      00085B E5 28            [12] 1151 	mov	a,_matrix_draw_j_262144_33
      00085D 75 F0 05         [24] 1152 	mov	b,#0x05
      000860 A4               [48] 1153 	mul	ab
      000861 FB               [12] 1154 	mov	r3,a
      000862 E5 26            [12] 1155 	mov	a,_matrix_draw_i_131072_31
      000864 2B               [12] 1156 	add	a,r3
                                   1157 ;	matrix.c:187: bool val = (active_muster >> (34 - index)) & 1;
      000865 D3               [12] 1158 	setb	c
      000866 94 22            [12] 1159 	subb	a,#0x22
      000868 F4               [12] 1160 	cpl	a
      000869 FB               [12] 1161 	mov	r3,a
      00086A 8B F0            [24] 1162 	mov	b,r3
      00086C 05 F0            [12] 1163 	inc	b
      00086E A8 1E            [24] 1164 	mov	r0,_matrix_draw_active_muster_65536_29
      000870 A9 1F            [24] 1165 	mov	r1,(_matrix_draw_active_muster_65536_29 + 1)
      000872 AA 20            [24] 1166 	mov	r2,(_matrix_draw_active_muster_65536_29 + 2)
      000874 AB 21            [24] 1167 	mov	r3,(_matrix_draw_active_muster_65536_29 + 3)
      000876 AC 22            [24] 1168 	mov	r4,(_matrix_draw_active_muster_65536_29 + 4)
      000878 AD 23            [24] 1169 	mov	r5,(_matrix_draw_active_muster_65536_29 + 5)
      00087A AE 24            [24] 1170 	mov	r6,(_matrix_draw_active_muster_65536_29 + 6)
      00087C AF 25            [24] 1171 	mov	r7,(_matrix_draw_active_muster_65536_29 + 7)
      00087E 80 19            [24] 1172 	sjmp	00152$
      000880                       1173 00151$:
      000880 C3               [12] 1174 	clr	c
      000881 EF               [12] 1175 	mov	a,r7
      000882 13               [12] 1176 	rrc	a
      000883 FF               [12] 1177 	mov	r7,a
      000884 EE               [12] 1178 	mov	a,r6
      000885 13               [12] 1179 	rrc	a
      000886 FE               [12] 1180 	mov	r6,a
      000887 ED               [12] 1181 	mov	a,r5
      000888 13               [12] 1182 	rrc	a
      000889 FD               [12] 1183 	mov	r5,a
      00088A EC               [12] 1184 	mov	a,r4
      00088B 13               [12] 1185 	rrc	a
      00088C FC               [12] 1186 	mov	r4,a
      00088D EB               [12] 1187 	mov	a,r3
      00088E 13               [12] 1188 	rrc	a
      00088F FB               [12] 1189 	mov	r3,a
      000890 EA               [12] 1190 	mov	a,r2
      000891 13               [12] 1191 	rrc	a
      000892 FA               [12] 1192 	mov	r2,a
      000893 E9               [12] 1193 	mov	a,r1
      000894 13               [12] 1194 	rrc	a
      000895 F9               [12] 1195 	mov	r1,a
      000896 E8               [12] 1196 	mov	a,r0
      000897 13               [12] 1197 	rrc	a
      000898 F8               [12] 1198 	mov	r0,a
      000899                       1199 00152$:
      000899 D5 F0 E4         [24] 1200 	djnz	b,00151$
      00089C E8               [12] 1201 	mov	a,r0
      00089D 54 01            [12] 1202 	anl	a,#0x01
                                   1203 ;	matrix.c:188: if (val) {
      00089F FF               [12] 1204 	mov	r7,a
      0008A0 60 09            [24] 1205 	jz	00110$
                                   1206 ;	matrix.c:189: reset_row(j);
      0008A2 85 28 82         [24] 1207 	mov	dpl,_matrix_draw_j_262144_33
      0008A5 85 29 83         [24] 1208 	mov	dph,(_matrix_draw_j_262144_33 + 1)
      0008A8 12 04 DB         [24] 1209 	lcall	_reset_row
      0008AB                       1210 00110$:
                                   1211 ;	matrix.c:185: for (int j = 0; j<7; j++) {
      0008AB 05 28            [12] 1212 	inc	_matrix_draw_j_262144_33
      0008AD E4               [12] 1213 	clr	a
      0008AE B5 28 9D         [24] 1214 	cjne	a,_matrix_draw_j_262144_33,00109$
      0008B1 05 29            [12] 1215 	inc	(_matrix_draw_j_262144_33 + 1)
      0008B3 80 99            [24] 1216 	sjmp	00109$
      0008B5                       1217 00113$:
                                   1218 ;	matrix.c:180: for (int i=0; i<5; i++) {
      0008B5 05 26            [12] 1219 	inc	_matrix_draw_i_131072_31
      0008B7 E4               [12] 1220 	clr	a
      0008B8 B5 26 02         [24] 1221 	cjne	a,_matrix_draw_i_131072_31,00155$
      0008BB 05 27            [12] 1222 	inc	(_matrix_draw_i_131072_31 + 1)
      0008BD                       1223 00155$:
                                   1224 ;	matrix.c:193: }
      0008BD 02 08 2C         [24] 1225 	ljmp	00112$
                                   1226 ;------------------------------------------------------------
                                   1227 ;Allocation info for local variables in function 'matrix_setup'
                                   1228 ;------------------------------------------------------------
                                   1229 ;	matrix.c:195: void matrix_setup() {
                                   1230 ;	-----------------------------------------
                                   1231 ;	 function matrix_setup
                                   1232 ;	-----------------------------------------
      0008C0                       1233 _matrix_setup:
                                   1234 ;	matrix.c:196: matrix_reset();
                                   1235 ;	matrix.c:197: }
      0008C0 02 08 C3         [24] 1236 	ljmp	_matrix_reset
                                   1237 ;------------------------------------------------------------
                                   1238 ;Allocation info for local variables in function 'matrix_reset'
                                   1239 ;------------------------------------------------------------
                                   1240 ;	matrix.c:199: void matrix_reset() {
                                   1241 ;	-----------------------------------------
                                   1242 ;	 function matrix_reset
                                   1243 ;	-----------------------------------------
      0008C3                       1244 _matrix_reset:
                                   1245 ;	matrix.c:200: matrix_reset_rows();
      0008C3 12 08 C9         [24] 1246 	lcall	_matrix_reset_rows
                                   1247 ;	matrix.c:202: matrix_reset_cols();
                                   1248 ;	matrix.c:203: }
      0008C6 02 08 EF         [24] 1249 	ljmp	_matrix_reset_cols
                                   1250 ;------------------------------------------------------------
                                   1251 ;Allocation info for local variables in function 'matrix_reset_rows'
                                   1252 ;------------------------------------------------------------
                                   1253 ;i                         Allocated to registers r6 r7 
                                   1254 ;------------------------------------------------------------
                                   1255 ;	matrix.c:205: void matrix_reset_rows() {
                                   1256 ;	-----------------------------------------
                                   1257 ;	 function matrix_reset_rows
                                   1258 ;	-----------------------------------------
      0008C9                       1259 _matrix_reset_rows:
                                   1260 ;	matrix.c:206: for (int i = 0; i<7; i++) {
      0008C9 7E 00            [12] 1261 	mov	r6,#0x00
      0008CB 7F 00            [12] 1262 	mov	r7,#0x00
      0008CD                       1263 00103$:
      0008CD C3               [12] 1264 	clr	c
      0008CE EE               [12] 1265 	mov	a,r6
      0008CF 94 07            [12] 1266 	subb	a,#0x07
      0008D1 EF               [12] 1267 	mov	a,r7
      0008D2 64 80            [12] 1268 	xrl	a,#0x80
      0008D4 94 80            [12] 1269 	subb	a,#0x80
      0008D6 50 16            [24] 1270 	jnc	00105$
                                   1271 ;	matrix.c:207: set_row(i);
      0008D8 8E 82            [24] 1272 	mov	dpl,r6
      0008DA 8F 83            [24] 1273 	mov	dph,r7
      0008DC C0 07            [24] 1274 	push	ar7
      0008DE C0 06            [24] 1275 	push	ar6
      0008E0 12 04 C5         [24] 1276 	lcall	_set_row
      0008E3 D0 06            [24] 1277 	pop	ar6
      0008E5 D0 07            [24] 1278 	pop	ar7
                                   1279 ;	matrix.c:206: for (int i = 0; i<7; i++) {
      0008E7 0E               [12] 1280 	inc	r6
      0008E8 BE 00 E2         [24] 1281 	cjne	r6,#0x00,00103$
      0008EB 0F               [12] 1282 	inc	r7
      0008EC 80 DF            [24] 1283 	sjmp	00103$
      0008EE                       1284 00105$:
                                   1285 ;	matrix.c:209: }
      0008EE 22               [24] 1286 	ret
                                   1287 ;------------------------------------------------------------
                                   1288 ;Allocation info for local variables in function 'matrix_reset_cols'
                                   1289 ;------------------------------------------------------------
                                   1290 ;i                         Allocated to registers r6 r7 
                                   1291 ;------------------------------------------------------------
                                   1292 ;	matrix.c:211: void matrix_reset_cols() {
                                   1293 ;	-----------------------------------------
                                   1294 ;	 function matrix_reset_cols
                                   1295 ;	-----------------------------------------
      0008EF                       1296 _matrix_reset_cols:
                                   1297 ;	matrix.c:212: for (int i = 0; i<5; i++) {
      0008EF 7E 00            [12] 1298 	mov	r6,#0x00
      0008F1 7F 00            [12] 1299 	mov	r7,#0x00
      0008F3                       1300 00103$:
      0008F3 C3               [12] 1301 	clr	c
      0008F4 EE               [12] 1302 	mov	a,r6
      0008F5 94 05            [12] 1303 	subb	a,#0x05
      0008F7 EF               [12] 1304 	mov	a,r7
      0008F8 64 80            [12] 1305 	xrl	a,#0x80
      0008FA 94 80            [12] 1306 	subb	a,#0x80
      0008FC 50 16            [24] 1307 	jnc	00105$
                                   1308 ;	matrix.c:213: reset_col(i);
      0008FE 8E 82            [24] 1309 	mov	dpl,r6
      000900 8F 83            [24] 1310 	mov	dph,r7
      000902 C0 07            [24] 1311 	push	ar7
      000904 C0 06            [24] 1312 	push	ar6
      000906 12 04 8A         [24] 1313 	lcall	_reset_col
      000909 D0 06            [24] 1314 	pop	ar6
      00090B D0 07            [24] 1315 	pop	ar7
                                   1316 ;	matrix.c:212: for (int i = 0; i<5; i++) {
      00090D 0E               [12] 1317 	inc	r6
      00090E BE 00 E2         [24] 1318 	cjne	r6,#0x00,00103$
      000911 0F               [12] 1319 	inc	r7
      000912 80 DF            [24] 1320 	sjmp	00103$
      000914                       1321 00105$:
                                   1322 ;	matrix.c:215: }
      000914 22               [24] 1323 	ret
                                   1324 	.area CSEG    (CODE)
                                   1325 	.area CONST   (CODE)
                                   1326 	.area XINIT   (CODE)
                                   1327 	.area CABS    (ABS,CODE)

                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _morse_cpy_PARM_2
                                     12 	.globl _ISR_Timer0
                                     13 	.globl _main
                                     14 	.globl _ditsToChar
                                     15 	.globl _morse_cpy
                                     16 	.globl _matrix_setup
                                     17 	.globl _matrix_draw
                                     18 	.globl _CY
                                     19 	.globl _AC
                                     20 	.globl _F0
                                     21 	.globl _RS1
                                     22 	.globl _RS0
                                     23 	.globl _OV
                                     24 	.globl _F1
                                     25 	.globl _P
                                     26 	.globl _PS
                                     27 	.globl _PT1
                                     28 	.globl _PX1
                                     29 	.globl _PT0
                                     30 	.globl _PX0
                                     31 	.globl _RD
                                     32 	.globl _WR
                                     33 	.globl _T1
                                     34 	.globl _T0
                                     35 	.globl _INT1
                                     36 	.globl _INT0
                                     37 	.globl _TXD
                                     38 	.globl _RXD
                                     39 	.globl _P3_7
                                     40 	.globl _P3_6
                                     41 	.globl _P3_5
                                     42 	.globl _P3_4
                                     43 	.globl _P3_3
                                     44 	.globl _P3_2
                                     45 	.globl _P3_1
                                     46 	.globl _P3_0
                                     47 	.globl _EA
                                     48 	.globl _ES
                                     49 	.globl _ET1
                                     50 	.globl _EX1
                                     51 	.globl _ET0
                                     52 	.globl _EX0
                                     53 	.globl _P2_7
                                     54 	.globl _P2_6
                                     55 	.globl _P2_5
                                     56 	.globl _P2_4
                                     57 	.globl _P2_3
                                     58 	.globl _P2_2
                                     59 	.globl _P2_1
                                     60 	.globl _P2_0
                                     61 	.globl _SM0
                                     62 	.globl _SM1
                                     63 	.globl _SM2
                                     64 	.globl _REN
                                     65 	.globl _TB8
                                     66 	.globl _RB8
                                     67 	.globl _TI
                                     68 	.globl _RI
                                     69 	.globl _P1_7
                                     70 	.globl _P1_6
                                     71 	.globl _P1_5
                                     72 	.globl _P1_4
                                     73 	.globl _P1_3
                                     74 	.globl _P1_2
                                     75 	.globl _P1_1
                                     76 	.globl _P1_0
                                     77 	.globl _TF1
                                     78 	.globl _TR1
                                     79 	.globl _TF0
                                     80 	.globl _TR0
                                     81 	.globl _IE1
                                     82 	.globl _IT1
                                     83 	.globl _IE0
                                     84 	.globl _IT0
                                     85 	.globl _P0_7
                                     86 	.globl _P0_6
                                     87 	.globl _P0_5
                                     88 	.globl _P0_4
                                     89 	.globl _P0_3
                                     90 	.globl _P0_2
                                     91 	.globl _P0_1
                                     92 	.globl _P0_0
                                     93 	.globl _B
                                     94 	.globl _ACC
                                     95 	.globl _PSW
                                     96 	.globl _IP
                                     97 	.globl _P3
                                     98 	.globl _IE
                                     99 	.globl _P2
                                    100 	.globl _SBUF
                                    101 	.globl _SCON
                                    102 	.globl _P1
                                    103 	.globl _TH1
                                    104 	.globl _TH0
                                    105 	.globl _TL1
                                    106 	.globl _TL0
                                    107 	.globl _TMOD
                                    108 	.globl _TCON
                                    109 	.globl _PCON
                                    110 	.globl _DPH
                                    111 	.globl _DPL
                                    112 	.globl _SP
                                    113 	.globl _P0
                                    114 	.globl _lastChar
                                    115 	.globl _index
                                    116 	.globl _empty
                                    117 	.globl _dits
                                    118 	.globl _timeMeasured
                                    119 	.globl _state
                                    120 	.globl _t
                                    121 	.globl _deltaT
                                    122 	.globl _minDahTimeMs
                                    123 	.globl _loop
                                    124 ;--------------------------------------------------------
                                    125 ; special function registers
                                    126 ;--------------------------------------------------------
                                    127 	.area RSEG    (ABS,DATA)
      000000                        128 	.org 0x0000
                           000080   129 _P0	=	0x0080
                           000081   130 _SP	=	0x0081
                           000082   131 _DPL	=	0x0082
                           000083   132 _DPH	=	0x0083
                           000087   133 _PCON	=	0x0087
                           000088   134 _TCON	=	0x0088
                           000089   135 _TMOD	=	0x0089
                           00008A   136 _TL0	=	0x008a
                           00008B   137 _TL1	=	0x008b
                           00008C   138 _TH0	=	0x008c
                           00008D   139 _TH1	=	0x008d
                           000090   140 _P1	=	0x0090
                           000098   141 _SCON	=	0x0098
                           000099   142 _SBUF	=	0x0099
                           0000A0   143 _P2	=	0x00a0
                           0000A8   144 _IE	=	0x00a8
                           0000B0   145 _P3	=	0x00b0
                           0000B8   146 _IP	=	0x00b8
                           0000D0   147 _PSW	=	0x00d0
                           0000E0   148 _ACC	=	0x00e0
                           0000F0   149 _B	=	0x00f0
                                    150 ;--------------------------------------------------------
                                    151 ; special function bits
                                    152 ;--------------------------------------------------------
                                    153 	.area RSEG    (ABS,DATA)
      000000                        154 	.org 0x0000
                           000080   155 _P0_0	=	0x0080
                           000081   156 _P0_1	=	0x0081
                           000082   157 _P0_2	=	0x0082
                           000083   158 _P0_3	=	0x0083
                           000084   159 _P0_4	=	0x0084
                           000085   160 _P0_5	=	0x0085
                           000086   161 _P0_6	=	0x0086
                           000087   162 _P0_7	=	0x0087
                           000088   163 _IT0	=	0x0088
                           000089   164 _IE0	=	0x0089
                           00008A   165 _IT1	=	0x008a
                           00008B   166 _IE1	=	0x008b
                           00008C   167 _TR0	=	0x008c
                           00008D   168 _TF0	=	0x008d
                           00008E   169 _TR1	=	0x008e
                           00008F   170 _TF1	=	0x008f
                           000090   171 _P1_0	=	0x0090
                           000091   172 _P1_1	=	0x0091
                           000092   173 _P1_2	=	0x0092
                           000093   174 _P1_3	=	0x0093
                           000094   175 _P1_4	=	0x0094
                           000095   176 _P1_5	=	0x0095
                           000096   177 _P1_6	=	0x0096
                           000097   178 _P1_7	=	0x0097
                           000098   179 _RI	=	0x0098
                           000099   180 _TI	=	0x0099
                           00009A   181 _RB8	=	0x009a
                           00009B   182 _TB8	=	0x009b
                           00009C   183 _REN	=	0x009c
                           00009D   184 _SM2	=	0x009d
                           00009E   185 _SM1	=	0x009e
                           00009F   186 _SM0	=	0x009f
                           0000A0   187 _P2_0	=	0x00a0
                           0000A1   188 _P2_1	=	0x00a1
                           0000A2   189 _P2_2	=	0x00a2
                           0000A3   190 _P2_3	=	0x00a3
                           0000A4   191 _P2_4	=	0x00a4
                           0000A5   192 _P2_5	=	0x00a5
                           0000A6   193 _P2_6	=	0x00a6
                           0000A7   194 _P2_7	=	0x00a7
                           0000A8   195 _EX0	=	0x00a8
                           0000A9   196 _ET0	=	0x00a9
                           0000AA   197 _EX1	=	0x00aa
                           0000AB   198 _ET1	=	0x00ab
                           0000AC   199 _ES	=	0x00ac
                           0000AF   200 _EA	=	0x00af
                           0000B0   201 _P3_0	=	0x00b0
                           0000B1   202 _P3_1	=	0x00b1
                           0000B2   203 _P3_2	=	0x00b2
                           0000B3   204 _P3_3	=	0x00b3
                           0000B4   205 _P3_4	=	0x00b4
                           0000B5   206 _P3_5	=	0x00b5
                           0000B6   207 _P3_6	=	0x00b6
                           0000B7   208 _P3_7	=	0x00b7
                           0000B0   209 _RXD	=	0x00b0
                           0000B1   210 _TXD	=	0x00b1
                           0000B2   211 _INT0	=	0x00b2
                           0000B3   212 _INT1	=	0x00b3
                           0000B4   213 _T0	=	0x00b4
                           0000B5   214 _T1	=	0x00b5
                           0000B6   215 _WR	=	0x00b6
                           0000B7   216 _RD	=	0x00b7
                           0000B8   217 _PX0	=	0x00b8
                           0000B9   218 _PT0	=	0x00b9
                           0000BA   219 _PX1	=	0x00ba
                           0000BB   220 _PT1	=	0x00bb
                           0000BC   221 _PS	=	0x00bc
                           0000D0   222 _P	=	0x00d0
                           0000D1   223 _F1	=	0x00d1
                           0000D2   224 _OV	=	0x00d2
                           0000D3   225 _RS0	=	0x00d3
                           0000D4   226 _RS1	=	0x00d4
                           0000D5   227 _F0	=	0x00d5
                           0000D6   228 _AC	=	0x00d6
                           0000D7   229 _CY	=	0x00d7
                                    230 ;--------------------------------------------------------
                                    231 ; overlayable register banks
                                    232 ;--------------------------------------------------------
                                    233 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        234 	.ds 8
                                    235 ;--------------------------------------------------------
                                    236 ; internal ram data
                                    237 ;--------------------------------------------------------
                                    238 	.area DSEG    (DATA)
      000000                        239 _minDahTimeMs::
      000000                        240 	.ds 2
      000002                        241 _deltaT::
      000002                        242 	.ds 2
      000004                        243 _t::
      000004                        244 	.ds 2
      000006                        245 _state::
      000006                        246 	.ds 1
      000007                        247 _timeMeasured::
      000007                        248 	.ds 8
      00000F                        249 _dits::
      00000F                        250 	.ds 2
      000011                        251 _empty::
      000011                        252 	.ds 2
      000013                        253 _index::
      000013                        254 	.ds 2
      000015                        255 _lastChar::
      000015                        256 	.ds 1
                                    257 ;--------------------------------------------------------
                                    258 ; overlayable items in internal ram 
                                    259 ;--------------------------------------------------------
                                    260 	.area	OSEG    (OVR,DATA)
      000000                        261 _morse_cpy_PARM_2:
      000000                        262 	.ds 3
                                    263 	.area	OSEG    (OVR,DATA)
                                    264 ;--------------------------------------------------------
                                    265 ; Stack segment in internal ram 
                                    266 ;--------------------------------------------------------
                                    267 	.area	SSEG
      000000                        268 __start__stack:
      000000                        269 	.ds	1
                                    270 
                                    271 ;--------------------------------------------------------
                                    272 ; indirectly addressable internal ram data
                                    273 ;--------------------------------------------------------
                                    274 	.area ISEG    (DATA)
                                    275 ;--------------------------------------------------------
                                    276 ; absolute internal ram data
                                    277 ;--------------------------------------------------------
                                    278 	.area IABS    (ABS,DATA)
                                    279 	.area IABS    (ABS,DATA)
                                    280 ;--------------------------------------------------------
                                    281 ; bit data
                                    282 ;--------------------------------------------------------
                                    283 	.area BSEG    (BIT)
                                    284 ;--------------------------------------------------------
                                    285 ; paged external ram data
                                    286 ;--------------------------------------------------------
                                    287 	.area PSEG    (PAG,XDATA)
                                    288 ;--------------------------------------------------------
                                    289 ; external ram data
                                    290 ;--------------------------------------------------------
                                    291 	.area XSEG    (XDATA)
                                    292 ;--------------------------------------------------------
                                    293 ; absolute external ram data
                                    294 ;--------------------------------------------------------
                                    295 	.area XABS    (ABS,XDATA)
                                    296 ;--------------------------------------------------------
                                    297 ; external initialized ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area XISEG   (XDATA)
                                    300 	.area HOME    (CODE)
                                    301 	.area GSINIT0 (CODE)
                                    302 	.area GSINIT1 (CODE)
                                    303 	.area GSINIT2 (CODE)
                                    304 	.area GSINIT3 (CODE)
                                    305 	.area GSINIT4 (CODE)
                                    306 	.area GSINIT5 (CODE)
                                    307 	.area GSINIT  (CODE)
                                    308 	.area GSFINAL (CODE)
                                    309 	.area CSEG    (CODE)
                                    310 ;--------------------------------------------------------
                                    311 ; interrupt vector 
                                    312 ;--------------------------------------------------------
                                    313 	.area HOME    (CODE)
      000000                        314 __interrupt_vect:
      000000 02r00r00         [24]  315 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  316 	reti
      000004                        317 	.ds	7
      00000B 02r03r33         [24]  318 	ljmp	_ISR_Timer0
                                    319 ;--------------------------------------------------------
                                    320 ; global & static initialisations
                                    321 ;--------------------------------------------------------
                                    322 	.area HOME    (CODE)
                                    323 	.area GSINIT  (CODE)
                                    324 	.area GSFINAL (CODE)
                                    325 	.area GSINIT  (CODE)
                                    326 	.globl __sdcc_gsinit_startup
                                    327 	.globl __sdcc_program_startup
                                    328 	.globl __start__stack
                                    329 	.globl __mcs51_genXINIT
                                    330 	.globl __mcs51_genXRAMCLEAR
                                    331 	.globl __mcs51_genRAMCLEAR
                                    332 ;	main.c:13: volatile uint16_t minDahTimeMs = 1000;
      000000 75*00 E8         [24]  333 	mov	_minDahTimeMs,#0xe8
      000003 75*01 03         [24]  334 	mov	(_minDahTimeMs + 1),#0x03
                                    335 ;	main.c:14: volatile uint16_t deltaT = 0;
      000006 E4               [12]  336 	clr	a
      000007 F5*02            [12]  337 	mov	_deltaT,a
      000009 F5*03            [12]  338 	mov	(_deltaT + 1),a
                                    339 ;	main.c:15: volatile uint16_t t = 0;
      00000B F5*04            [12]  340 	mov	_t,a
      00000D F5*05            [12]  341 	mov	(_t + 1),a
                                    342 ;	main.c:16: volatile TasterState state = UP;
      00000F 75*06 01         [24]  343 	mov	_state,#0x01
                                    344 ;	main.c:17: volatile uint64_t timeMeasured = 0;
      000012 F5*07            [12]  345 	mov	_timeMeasured,a
      000014 F5*08            [12]  346 	mov	(_timeMeasured + 1),a
      000016 F5*09            [12]  347 	mov	(_timeMeasured + 2),a
      000018 F5*0A            [12]  348 	mov	(_timeMeasured + 3),a
      00001A F5*0B            [12]  349 	mov	(_timeMeasured + 4),a
      00001C F5*0C            [12]  350 	mov	(_timeMeasured + 5),a
      00001E F5*0D            [12]  351 	mov	(_timeMeasured + 6),a
      000020 F5*0E            [12]  352 	mov	(_timeMeasured + 7),a
                                    353 ;	main.c:19: morse_t dits = {0};
                                    354 ;	1-genFromRTrack replaced	mov	_dits,#0x00
      000022 F5*0F            [12]  355 	mov	_dits,a
                                    356 ;	main.c:20: morse_t empty = {0};
                                    357 ;	1-genFromRTrack replaced	mov	_empty,#0x00
      000024 F5*11            [12]  358 	mov	_empty,a
                                    359 ;	main.c:22: int index = 0;
      000026 F5*13            [12]  360 	mov	_index,a
      000028 F5*14            [12]  361 	mov	(_index + 1),a
                                    362 ;	main.c:23: char lastChar = '+';
      00002A 75*15 2B         [24]  363 	mov	_lastChar,#0x2b
                                    364 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  365 	ljmp	__sdcc_program_startup
                                    366 ;--------------------------------------------------------
                                    367 ; Home
                                    368 ;--------------------------------------------------------
                                    369 	.area HOME    (CODE)
                                    370 	.area HOME    (CODE)
      00000E                        371 __sdcc_program_startup:
      00000E 02r02r20         [24]  372 	ljmp	_main
                                    373 ;	return from main will return to caller
                                    374 ;--------------------------------------------------------
                                    375 ; code
                                    376 ;--------------------------------------------------------
                                    377 	.area CSEG    (CODE)
                                    378 ;------------------------------------------------------------
                                    379 ;Allocation info for local variables in function 'morse_cpy'
                                    380 ;------------------------------------------------------------
                                    381 ;src                       Allocated with name '_morse_cpy_PARM_2'
                                    382 ;dest                      Allocated to registers r5 r6 r7 
                                    383 ;------------------------------------------------------------
                                    384 ;	morse.h:14: void morse_cpy(morse_t* dest, morse_t* src) {
                                    385 ;	-----------------------------------------
                                    386 ;	 function morse_cpy
                                    387 ;	-----------------------------------------
      000000                        388 _morse_cpy:
                           000007   389 	ar7 = 0x07
                           000006   390 	ar6 = 0x06
                           000005   391 	ar5 = 0x05
                           000004   392 	ar4 = 0x04
                           000003   393 	ar3 = 0x03
                           000002   394 	ar2 = 0x02
                           000001   395 	ar1 = 0x01
                           000000   396 	ar0 = 0x00
      000000 AD 82            [24]  397 	mov	r5,dpl
      000002 AE 83            [24]  398 	mov	r6,dph
      000004 AF F0            [24]  399 	mov	r7,b
                                    400 ;	morse.h:15: dest->pattern = src->pattern;
      000006 AA*00            [24]  401 	mov	r2,_morse_cpy_PARM_2
      000008 AB*01            [24]  402 	mov	r3,(_morse_cpy_PARM_2 + 1)
      00000A AC*02            [24]  403 	mov	r4,(_morse_cpy_PARM_2 + 2)
      00000C 8A 82            [24]  404 	mov	dpl,r2
      00000E 8B 83            [24]  405 	mov	dph,r3
      000010 8C F0            [24]  406 	mov	b,r4
      000012 12r00r00         [24]  407 	lcall	__gptrget
      000015 8D 82            [24]  408 	mov	dpl,r5
      000017 8E 83            [24]  409 	mov	dph,r6
      000019 8F F0            [24]  410 	mov	b,r7
      00001B 12r00r00         [24]  411 	lcall	__gptrput
                                    412 ;	morse.h:16: dest->size = src->size;
      00001E 0D               [12]  413 	inc	r5
      00001F BD 00 01         [24]  414 	cjne	r5,#0x00,00103$
      000022 0E               [12]  415 	inc	r6
      000023                        416 00103$:
      000023 0A               [12]  417 	inc	r2
      000024 BA 00 01         [24]  418 	cjne	r2,#0x00,00104$
      000027 0B               [12]  419 	inc	r3
      000028                        420 00104$:
      000028 8A 82            [24]  421 	mov	dpl,r2
      00002A 8B 83            [24]  422 	mov	dph,r3
      00002C 8C F0            [24]  423 	mov	b,r4
      00002E 12r00r00         [24]  424 	lcall	__gptrget
      000031 8D 82            [24]  425 	mov	dpl,r5
      000033 8E 83            [24]  426 	mov	dph,r6
      000035 8F F0            [24]  427 	mov	b,r7
                                    428 ;	morse.h:17: }
      000037 02r00r00         [24]  429 	ljmp	__gptrput
                                    430 ;------------------------------------------------------------
                                    431 ;Allocation info for local variables in function 'ditsToChar'
                                    432 ;------------------------------------------------------------
                                    433 ;dits                      Allocated to registers r6 r5 r7 
                                    434 ;------------------------------------------------------------
                                    435 ;	main.c:25: char ditsToChar(morse_t* dits) {
                                    436 ;	-----------------------------------------
                                    437 ;	 function ditsToChar
                                    438 ;	-----------------------------------------
      00003A                        439 _ditsToChar:
                                    440 ;	main.c:26: switch(*(uint16_t *) dits) {
      00003A AD 83            [24]  441 	mov	r5,dph
      00003C 12r00r00         [24]  442 	lcall	__gptrget
      00003F FE               [12]  443 	mov	r6,a
      000040 A3               [24]  444 	inc	dptr
      000041 12r00r00         [24]  445 	lcall	__gptrget
      000044 FF               [12]  446 	mov	r7,a
      000045 BE 00 06         [24]  447 	cjne	r6,#0x00,00285$
      000048 BF 01 03         [24]  448 	cjne	r7,#0x01,00285$
      00004B 02r01r9C         [24]  449 	ljmp	00105$
      00004E                        450 00285$:
      00004E BE 80 06         [24]  451 	cjne	r6,#0x80,00286$
      000051 BF 01 03         [24]  452 	cjne	r7,#0x01,00286$
      000054 02r01rD8         [24]  453 	ljmp	00120$
      000057                        454 00286$:
      000057 BE 00 06         [24]  455 	cjne	r6,#0x00,00287$
      00005A BF 02 03         [24]  456 	cjne	r7,#0x02,00287$
      00005D 02r01rAC         [24]  457 	ljmp	00109$
      000060                        458 00287$:
      000060 BE 40 06         [24]  459 	cjne	r6,#0x40,00288$
      000063 BF 02 03         [24]  460 	cjne	r7,#0x02,00288$
      000066 02r01r8C         [24]  461 	ljmp	00101$
      000069                        462 00288$:
      000069 BE 80 06         [24]  463 	cjne	r6,#0x80,00289$
      00006C BF 02 03         [24]  464 	cjne	r7,#0x02,00289$
      00006F 02r01rC0         [24]  465 	ljmp	00114$
      000072                        466 00289$:
      000072 BE C0 06         [24]  467 	cjne	r6,#0xc0,00290$
      000075 BF 02 03         [24]  468 	cjne	r7,#0x02,00290$
      000078 02r01rBC         [24]  469 	ljmp	00113$
      00007B                        470 00290$:
      00007B BE 00 06         [24]  471 	cjne	r6,#0x00,00291$
      00007E BF 03 03         [24]  472 	cjne	r7,#0x03,00291$
      000081 02r01rD4         [24]  473 	ljmp	00119$
      000084                        474 00291$:
      000084 BE 20 06         [24]  475 	cjne	r6,#0x20,00292$
      000087 BF 03 03         [24]  476 	cjne	r7,#0x03,00292$
      00008A 02r01rDC         [24]  477 	ljmp	00121$
      00008D                        478 00292$:
      00008D BE 40 06         [24]  479 	cjne	r6,#0x40,00293$
      000090 BF 03 03         [24]  480 	cjne	r7,#0x03,00293$
      000093 02r01rD0         [24]  481 	ljmp	00118$
      000096                        482 00293$:
      000096 BE 60 06         [24]  483 	cjne	r6,#0x60,00294$
      000099 BF 03 03         [24]  484 	cjne	r7,#0x03,00294$
      00009C 02r01rE4         [24]  485 	ljmp	00123$
      00009F                        486 00294$:
      00009F BE 80 06         [24]  487 	cjne	r6,#0x80,00295$
      0000A2 BF 03 03         [24]  488 	cjne	r7,#0x03,00295$
      0000A5 02r01r98         [24]  489 	ljmp	00104$
      0000A8                        490 00295$:
      0000A8 BE A0 06         [24]  491 	cjne	r6,#0xa0,00296$
      0000AB BF 03 03         [24]  492 	cjne	r7,#0x03,00296$
      0000AE 02r01rB4         [24]  493 	ljmp	00111$
      0000B1                        494 00296$:
      0000B1 BE C0 06         [24]  495 	cjne	r6,#0xc0,00297$
      0000B4 BF 03 03         [24]  496 	cjne	r7,#0x03,00297$
      0000B7 02r01rA4         [24]  497 	ljmp	00107$
      0000BA                        498 00297$:
      0000BA BE E0 06         [24]  499 	cjne	r6,#0xe0,00298$
      0000BD BF 03 03         [24]  500 	cjne	r7,#0x03,00298$
      0000C0 02r01rC4         [24]  501 	ljmp	00115$
      0000C3                        502 00298$:
      0000C3 BE 00 06         [24]  503 	cjne	r6,#0x00,00299$
      0000C6 BF 04 03         [24]  504 	cjne	r7,#0x04,00299$
      0000C9 02r01rA8         [24]  505 	ljmp	00108$
      0000CC                        506 00299$:
      0000CC BE 10 06         [24]  507 	cjne	r6,#0x10,00300$
      0000CF BF 04 03         [24]  508 	cjne	r7,#0x04,00300$
      0000D2 02r01rE0         [24]  509 	ljmp	00122$
      0000D5                        510 00300$:
      0000D5 BE 20 06         [24]  511 	cjne	r6,#0x20,00301$
      0000D8 BF 04 03         [24]  512 	cjne	r7,#0x04,00301$
      0000DB 02r01rA0         [24]  513 	ljmp	00106$
      0000DE                        514 00301$:
      0000DE BE 40 06         [24]  515 	cjne	r6,#0x40,00302$
      0000E1 BF 04 03         [24]  516 	cjne	r7,#0x04,00302$
      0000E4 02r01rB8         [24]  517 	ljmp	00112$
      0000E7                        518 00302$:
      0000E7 BE 60 06         [24]  519 	cjne	r6,#0x60,00303$
      0000EA BF 04 03         [24]  520 	cjne	r7,#0x04,00303$
      0000ED 02r01rC8         [24]  521 	ljmp	00116$
      0000F0                        522 00303$:
      0000F0 BE 70 06         [24]  523 	cjne	r6,#0x70,00304$
      0000F3 BF 04 03         [24]  524 	cjne	r7,#0x04,00304$
      0000F6 02r01rB0         [24]  525 	ljmp	00110$
      0000F9                        526 00304$:
      0000F9 BE 80 06         [24]  527 	cjne	r6,#0x80,00305$
      0000FC BF 04 03         [24]  528 	cjne	r7,#0x04,00305$
      0000FF 02r01r90         [24]  529 	ljmp	00102$
      000102                        530 00305$:
      000102 BE 90 06         [24]  531 	cjne	r6,#0x90,00306$
      000105 BF 04 03         [24]  532 	cjne	r7,#0x04,00306$
      000108 02r01rE8         [24]  533 	ljmp	00124$
      00010B                        534 00306$:
      00010B BE A0 06         [24]  535 	cjne	r6,#0xa0,00307$
      00010E BF 04 03         [24]  536 	cjne	r7,#0x04,00307$
      000111 02r01r94         [24]  537 	ljmp	00103$
      000114                        538 00307$:
      000114 BE B0 06         [24]  539 	cjne	r6,#0xb0,00308$
      000117 BF 04 03         [24]  540 	cjne	r7,#0x04,00308$
      00011A 02r01rEC         [24]  541 	ljmp	00125$
      00011D                        542 00308$:
      00011D BE C0 06         [24]  543 	cjne	r6,#0xc0,00309$
      000120 BF 04 03         [24]  544 	cjne	r7,#0x04,00309$
      000123 02r01rF0         [24]  545 	ljmp	00126$
      000126                        546 00309$:
      000126 BE D0 06         [24]  547 	cjne	r6,#0xd0,00310$
      000129 BF 04 03         [24]  548 	cjne	r7,#0x04,00310$
      00012C 02r01rCC         [24]  549 	ljmp	00117$
      00012F                        550 00310$:
      00012F BE 00 06         [24]  551 	cjne	r6,#0x00,00311$
      000132 BF 05 03         [24]  552 	cjne	r7,#0x05,00311$
      000135 02r02r08         [24]  553 	ljmp	00132$
      000138                        554 00311$:
      000138 BE 08 06         [24]  555 	cjne	r6,#0x08,00312$
      00013B BF 05 03         [24]  556 	cjne	r7,#0x05,00312$
      00013E 02r02r04         [24]  557 	ljmp	00131$
      000141                        558 00312$:
      000141 BE 18 06         [24]  559 	cjne	r6,#0x18,00313$
      000144 BF 05 03         [24]  560 	cjne	r7,#0x05,00313$
      000147 02r02r00         [24]  561 	ljmp	00130$
      00014A                        562 00313$:
      00014A BE 38 06         [24]  563 	cjne	r6,#0x38,00314$
      00014D BF 05 03         [24]  564 	cjne	r7,#0x05,00314$
      000150 02r01rFC         [24]  565 	ljmp	00129$
      000153                        566 00314$:
      000153 BE 78 06         [24]  567 	cjne	r6,#0x78,00315$
      000156 BF 05 03         [24]  568 	cjne	r7,#0x05,00315$
      000159 02r01rF8         [24]  569 	ljmp	00128$
      00015C                        570 00315$:
      00015C BE 80 06         [24]  571 	cjne	r6,#0x80,00316$
      00015F BF 05 03         [24]  572 	cjne	r7,#0x05,00316$
      000162 02r02r0C         [24]  573 	ljmp	00133$
      000165                        574 00316$:
      000165 BE C0 06         [24]  575 	cjne	r6,#0xc0,00317$
      000168 BF 05 03         [24]  576 	cjne	r7,#0x05,00317$
      00016B 02r02r10         [24]  577 	ljmp	00134$
      00016E                        578 00317$:
      00016E BE E0 06         [24]  579 	cjne	r6,#0xe0,00318$
      000171 BF 05 03         [24]  580 	cjne	r7,#0x05,00318$
      000174 02r02r14         [24]  581 	ljmp	00135$
      000177                        582 00318$:
      000177 BE F0 06         [24]  583 	cjne	r6,#0xf0,00319$
      00017A BF 05 03         [24]  584 	cjne	r7,#0x05,00319$
      00017D 02r02r18         [24]  585 	ljmp	00136$
      000180                        586 00319$:
      000180 BE F8 06         [24]  587 	cjne	r6,#0xf8,00320$
      000183 BF 05 03         [24]  588 	cjne	r7,#0x05,00320$
      000186 02r01rF4         [24]  589 	ljmp	00127$
      000189                        590 00320$:
      000189 02r02r1C         [24]  591 	ljmp	00137$
                                    592 ;	main.c:27: case U_MORSE_A: return 'A';
      00018C                        593 00101$:
      00018C 75 82 41         [24]  594 	mov	dpl,#0x41
      00018F 22               [24]  595 	ret
                                    596 ;	main.c:29: case U_MORSE_B: return 'B';
      000190                        597 00102$:
      000190 75 82 42         [24]  598 	mov	dpl,#0x42
      000193 22               [24]  599 	ret
                                    600 ;	main.c:31: case U_MORSE_C: return 'C';
      000194                        601 00103$:
      000194 75 82 43         [24]  602 	mov	dpl,#0x43
      000197 22               [24]  603 	ret
                                    604 ;	main.c:33: case U_MORSE_D: return 'D';
      000198                        605 00104$:
      000198 75 82 44         [24]  606 	mov	dpl,#0x44
      00019B 22               [24]  607 	ret
                                    608 ;	main.c:35: case U_MORSE_E: return 'E';
      00019C                        609 00105$:
      00019C 75 82 45         [24]  610 	mov	dpl,#0x45
      00019F 22               [24]  611 	ret
                                    612 ;	main.c:37: case U_MORSE_F: return 'F';
      0001A0                        613 00106$:
      0001A0 75 82 46         [24]  614 	mov	dpl,#0x46
      0001A3 22               [24]  615 	ret
                                    616 ;	main.c:39: case U_MORSE_G: return 'G';
      0001A4                        617 00107$:
      0001A4 75 82 47         [24]  618 	mov	dpl,#0x47
      0001A7 22               [24]  619 	ret
                                    620 ;	main.c:41: case U_MORSE_H: return 'H';
      0001A8                        621 00108$:
      0001A8 75 82 48         [24]  622 	mov	dpl,#0x48
      0001AB 22               [24]  623 	ret
                                    624 ;	main.c:43: case U_MORSE_I: return 'I';
      0001AC                        625 00109$:
      0001AC 75 82 49         [24]  626 	mov	dpl,#0x49
      0001AF 22               [24]  627 	ret
                                    628 ;	main.c:45: case U_MORSE_J: return 'J';
      0001B0                        629 00110$:
      0001B0 75 82 4A         [24]  630 	mov	dpl,#0x4a
      0001B3 22               [24]  631 	ret
                                    632 ;	main.c:47: case U_MORSE_K: return 'K';
      0001B4                        633 00111$:
      0001B4 75 82 4B         [24]  634 	mov	dpl,#0x4b
      0001B7 22               [24]  635 	ret
                                    636 ;	main.c:49: case U_MORSE_L: return 'L';
      0001B8                        637 00112$:
      0001B8 75 82 4C         [24]  638 	mov	dpl,#0x4c
      0001BB 22               [24]  639 	ret
                                    640 ;	main.c:51: case U_MORSE_M: return 'M';
      0001BC                        641 00113$:
      0001BC 75 82 4D         [24]  642 	mov	dpl,#0x4d
      0001BF 22               [24]  643 	ret
                                    644 ;	main.c:53: case U_MORSE_N: return 'N';
      0001C0                        645 00114$:
      0001C0 75 82 4E         [24]  646 	mov	dpl,#0x4e
      0001C3 22               [24]  647 	ret
                                    648 ;	main.c:55: case U_MORSE_O: return 'O';
      0001C4                        649 00115$:
      0001C4 75 82 4F         [24]  650 	mov	dpl,#0x4f
      0001C7 22               [24]  651 	ret
                                    652 ;	main.c:57: case U_MORSE_P: return 'P';
      0001C8                        653 00116$:
      0001C8 75 82 50         [24]  654 	mov	dpl,#0x50
                                    655 ;	main.c:59: case U_MORSE_Q: return 'Q';
      0001CB 22               [24]  656 	ret
      0001CC                        657 00117$:
      0001CC 75 82 51         [24]  658 	mov	dpl,#0x51
                                    659 ;	main.c:61: case U_MORSE_R: return 'R';
      0001CF 22               [24]  660 	ret
      0001D0                        661 00118$:
      0001D0 75 82 52         [24]  662 	mov	dpl,#0x52
                                    663 ;	main.c:63: case U_MORSE_S: return 'S';
      0001D3 22               [24]  664 	ret
      0001D4                        665 00119$:
      0001D4 75 82 53         [24]  666 	mov	dpl,#0x53
                                    667 ;	main.c:65: case U_MORSE_T: return 'T';
      0001D7 22               [24]  668 	ret
      0001D8                        669 00120$:
      0001D8 75 82 54         [24]  670 	mov	dpl,#0x54
                                    671 ;	main.c:67: case U_MORSE_U: return 'U';
      0001DB 22               [24]  672 	ret
      0001DC                        673 00121$:
      0001DC 75 82 55         [24]  674 	mov	dpl,#0x55
                                    675 ;	main.c:69: case U_MORSE_V: return 'V';
      0001DF 22               [24]  676 	ret
      0001E0                        677 00122$:
      0001E0 75 82 56         [24]  678 	mov	dpl,#0x56
                                    679 ;	main.c:71: case U_MORSE_W: return 'W';
      0001E3 22               [24]  680 	ret
      0001E4                        681 00123$:
      0001E4 75 82 57         [24]  682 	mov	dpl,#0x57
                                    683 ;	main.c:73: case U_MORSE_X: return 'X';
      0001E7 22               [24]  684 	ret
      0001E8                        685 00124$:
      0001E8 75 82 58         [24]  686 	mov	dpl,#0x58
                                    687 ;	main.c:75: case U_MORSE_Y: return 'Y';
      0001EB 22               [24]  688 	ret
      0001EC                        689 00125$:
      0001EC 75 82 59         [24]  690 	mov	dpl,#0x59
                                    691 ;	main.c:77: case U_MORSE_Z: return 'Z';
      0001EF 22               [24]  692 	ret
      0001F0                        693 00126$:
      0001F0 75 82 5A         [24]  694 	mov	dpl,#0x5a
                                    695 ;	main.c:81: case U_MORSE_0: return '0';
      0001F3 22               [24]  696 	ret
      0001F4                        697 00127$:
      0001F4 75 82 30         [24]  698 	mov	dpl,#0x30
                                    699 ;	main.c:83: case U_MORSE_1: return '1';
      0001F7 22               [24]  700 	ret
      0001F8                        701 00128$:
      0001F8 75 82 31         [24]  702 	mov	dpl,#0x31
                                    703 ;	main.c:85: case U_MORSE_2: return '2';
      0001FB 22               [24]  704 	ret
      0001FC                        705 00129$:
      0001FC 75 82 32         [24]  706 	mov	dpl,#0x32
                                    707 ;	main.c:87: case U_MORSE_3: return '3';
      0001FF 22               [24]  708 	ret
      000200                        709 00130$:
      000200 75 82 33         [24]  710 	mov	dpl,#0x33
                                    711 ;	main.c:89: case U_MORSE_4: return '4';
      000203 22               [24]  712 	ret
      000204                        713 00131$:
      000204 75 82 34         [24]  714 	mov	dpl,#0x34
                                    715 ;	main.c:91: case U_MORSE_5: return '5';
      000207 22               [24]  716 	ret
      000208                        717 00132$:
      000208 75 82 35         [24]  718 	mov	dpl,#0x35
                                    719 ;	main.c:93: case U_MORSE_6: return '6';
      00020B 22               [24]  720 	ret
      00020C                        721 00133$:
      00020C 75 82 36         [24]  722 	mov	dpl,#0x36
                                    723 ;	main.c:95: case U_MORSE_7: return '7';
      00020F 22               [24]  724 	ret
      000210                        725 00134$:
      000210 75 82 37         [24]  726 	mov	dpl,#0x37
                                    727 ;	main.c:97: case U_MORSE_8: return '8';
      000213 22               [24]  728 	ret
      000214                        729 00135$:
      000214 75 82 38         [24]  730 	mov	dpl,#0x38
                                    731 ;	main.c:99: case U_MORSE_9: return '9';
      000217 22               [24]  732 	ret
      000218                        733 00136$:
      000218 75 82 39         [24]  734 	mov	dpl,#0x39
                                    735 ;	main.c:102: default:
      00021B 22               [24]  736 	ret
      00021C                        737 00137$:
                                    738 ;	main.c:103: return '+';
      00021C 75 82 2B         [24]  739 	mov	dpl,#0x2b
                                    740 ;	main.c:106: return '+';
                                    741 ;	main.c:107: }
      00021F 22               [24]  742 	ret
                                    743 ;------------------------------------------------------------
                                    744 ;Allocation info for local variables in function 'main'
                                    745 ;------------------------------------------------------------
                                    746 ;	main.c:111: int main() {
                                    747 ;	-----------------------------------------
                                    748 ;	 function main
                                    749 ;	-----------------------------------------
      000220                        750 _main:
                                    751 ;	main.c:112: matrix_setup();
      000220 12r00r00         [24]  752 	lcall	_matrix_setup
                                    753 ;	main.c:114: TMOD = 0x01;
      000223 75 89 01         [24]  754 	mov	_TMOD,#0x01
                                    755 ;	main.c:115: TH0 = 0xFC;
      000226 75 8C FC         [24]  756 	mov	_TH0,#0xfc
                                    757 ;	main.c:116: TL0 = 0x18;
      000229 75 8A 18         [24]  758 	mov	_TL0,#0x18
                                    759 ;	main.c:118: ET0=1;
                                    760 ;	assignBit
      00022C D2 A9            [12]  761 	setb	_ET0
                                    762 ;	main.c:119: EA=1;
                                    763 ;	assignBit
      00022E D2 AF            [12]  764 	setb	_EA
                                    765 ;	main.c:120: TR0 = 1;
                                    766 ;	assignBit
      000230 D2 8C            [12]  767 	setb	_TR0
                                    768 ;	main.c:122: morse_cpy(&dits, &empty);
      000232 75*00r11         [24]  769 	mov	_morse_cpy_PARM_2,#_empty
      000235 75*01 00         [24]  770 	mov	(_morse_cpy_PARM_2 + 1),#0x00
      000238 75*02 40         [24]  771 	mov	(_morse_cpy_PARM_2 + 2),#0x40
      00023B 90r00r0F         [24]  772 	mov	dptr,#_dits
      00023E 75 F0 40         [24]  773 	mov	b,#0x40
      000241 12r00r00         [24]  774 	lcall	_morse_cpy
                                    775 ;	main.c:124: while(1) {
      000244                        776 00102$:
                                    777 ;	main.c:125: loop();
      000244 12r02r49         [24]  778 	lcall	_loop
                                    779 ;	main.c:127: }
      000247 80 FB            [24]  780 	sjmp	00102$
                                    781 ;------------------------------------------------------------
                                    782 ;Allocation info for local variables in function 'loop'
                                    783 ;------------------------------------------------------------
                                    784 ;	main.c:129: void loop() {
                                    785 ;	-----------------------------------------
                                    786 ;	 function loop
                                    787 ;	-----------------------------------------
      000249                        788 _loop:
                                    789 ;	main.c:131: if (deltaT != 0) {
      000249 E5*02            [12]  790 	mov	a,_deltaT
      00024B 45*03            [12]  791 	orl	a,(_deltaT + 1)
      00024D 70 03            [24]  792 	jnz	00146$
      00024F 02r02rE3         [24]  793 	ljmp	00109$
      000252                        794 00146$:
                                    795 ;	main.c:132: if (state == UP) {
      000252 74 01            [12]  796 	mov	a,#0x01
      000254 B5*06 02         [24]  797 	cjne	a,_state,00147$
      000257 80 03            [24]  798 	sjmp	00148$
      000259                        799 00147$:
      000259 02r02rDE         [24]  800 	ljmp	00107$
      00025C                        801 00148$:
                                    802 ;	main.c:133: if (deltaT < minDahTimeMs) {
      00025C C3               [12]  803 	clr	c
      00025D E5*02            [12]  804 	mov	a,_deltaT
      00025F 95*00            [12]  805 	subb	a,_minDahTimeMs
      000261 E5*03            [12]  806 	mov	a,(_deltaT + 1)
      000263 95*01            [12]  807 	subb	a,(_minDahTimeMs + 1)
      000265 50 20            [24]  808 	jnc	00102$
                                    809 ;	main.c:134: dits.pattern = dits.pattern & (0xFF - (1 << (7 - index)));
      000267 AF*13            [24]  810 	mov	r7,_index
      000269 74 07            [12]  811 	mov	a,#0x07
      00026B C3               [12]  812 	clr	c
      00026C 9F               [12]  813 	subb	a,r7
      00026D F5 F0            [12]  814 	mov	b,a
      00026F 05 F0            [12]  815 	inc	b
      000271 74 01            [12]  816 	mov	a,#0x01
      000273 80 02            [24]  817 	sjmp	00152$
      000275                        818 00150$:
      000275 25 E0            [12]  819 	add	a,acc
      000277                        820 00152$:
      000277 D5 F0 FB         [24]  821 	djnz	b,00150$
      00027A FF               [12]  822 	mov	r7,a
      00027B 74 FF            [12]  823 	mov	a,#0xff
      00027D C3               [12]  824 	clr	c
      00027E 9F               [12]  825 	subb	a,r7
      00027F FF               [12]  826 	mov	r7,a
      000280 AE*0F            [24]  827 	mov	r6,_dits
      000282 5E               [12]  828 	anl	a,r6
      000283 F5*0F            [12]  829 	mov	_dits,a
      000285 80 19            [24]  830 	sjmp	00103$
      000287                        831 00102$:
                                    832 ;	main.c:136: dits.pattern = dits.pattern | (1 << (7-index));
      000287 AF*13            [24]  833 	mov	r7,_index
      000289 74 07            [12]  834 	mov	a,#0x07
      00028B C3               [12]  835 	clr	c
      00028C 9F               [12]  836 	subb	a,r7
      00028D F5 F0            [12]  837 	mov	b,a
      00028F 05 F0            [12]  838 	inc	b
      000291 74 01            [12]  839 	mov	a,#0x01
      000293 80 02            [24]  840 	sjmp	00155$
      000295                        841 00153$:
      000295 25 E0            [12]  842 	add	a,acc
      000297                        843 00155$:
      000297 D5 F0 FB         [24]  844 	djnz	b,00153$
      00029A FF               [12]  845 	mov	r7,a
      00029B AE*0F            [24]  846 	mov	r6,_dits
      00029D 4E               [12]  847 	orl	a,r6
      00029E F5*0F            [12]  848 	mov	_dits,a
      0002A0                        849 00103$:
                                    850 ;	main.c:139: dits.size++;
      0002A0 E5*10            [12]  851 	mov	a,(_dits + 0x0001)
      0002A2 FF               [12]  852 	mov	r7,a
      0002A3 04               [12]  853 	inc	a
      0002A4 F5*10            [12]  854 	mov	(_dits + 0x0001),a
                                    855 ;	main.c:140: index++;
      0002A6 05*13            [12]  856 	inc	_index
      0002A8 E4               [12]  857 	clr	a
      0002A9 B5*13 02         [24]  858 	cjne	a,_index,00156$
      0002AC 05*14            [12]  859 	inc	(_index + 1)
      0002AE                        860 00156$:
                                    861 ;	main.c:141: if (index == 5) {
      0002AE 74 05            [12]  862 	mov	a,#0x05
      0002B0 B5*13 06         [24]  863 	cjne	a,_index,00157$
      0002B3 E4               [12]  864 	clr	a
      0002B4 B5*14 02         [24]  865 	cjne	a,(_index + 1),00157$
      0002B7 80 02            [24]  866 	sjmp	00158$
      0002B9                        867 00157$:
      0002B9 80 23            [24]  868 	sjmp	00107$
      0002BB                        869 00158$:
                                    870 ;	main.c:142: lastChar = ditsToChar(&dits);
      0002BB 90r00r0F         [24]  871 	mov	dptr,#_dits
      0002BE 75 F0 40         [24]  872 	mov	b,#0x40
      0002C1 12r00r3A         [24]  873 	lcall	_ditsToChar
      0002C4 85 82*15         [24]  874 	mov	_lastChar,dpl
                                    875 ;	main.c:143: morse_cpy(&dits, &empty);
      0002C7 75*00r11         [24]  876 	mov	_morse_cpy_PARM_2,#_empty
      0002CA 75*01 00         [24]  877 	mov	(_morse_cpy_PARM_2 + 1),#0x00
      0002CD 75*02 40         [24]  878 	mov	(_morse_cpy_PARM_2 + 2),#0x40
      0002D0 90r00r0F         [24]  879 	mov	dptr,#_dits
      0002D3 75 F0 40         [24]  880 	mov	b,#0x40
      0002D6 12r00r00         [24]  881 	lcall	_morse_cpy
                                    882 ;	main.c:144: index = 0;
      0002D9 E4               [12]  883 	clr	a
      0002DA F5*13            [12]  884 	mov	_index,a
      0002DC F5*14            [12]  885 	mov	(_index + 1),a
      0002DE                        886 00107$:
                                    887 ;	main.c:148: deltaT = 0;
      0002DE E4               [12]  888 	clr	a
      0002DF F5*02            [12]  889 	mov	_deltaT,a
      0002E1 F5*03            [12]  890 	mov	(_deltaT + 1),a
      0002E3                        891 00109$:
                                    892 ;	main.c:151: if (state == UP) {
      0002E3 74 01            [12]  893 	mov	a,#0x01
      0002E5 B5*06 45         [24]  894 	cjne	a,_state,00115$
                                    895 ;	main.c:152: if (t >= minDahTimeMs) {
      0002E8 C3               [12]  896 	clr	c
      0002E9 E5*04            [12]  897 	mov	a,_t
      0002EB 95*00            [12]  898 	subb	a,_minDahTimeMs
      0002ED E5*05            [12]  899 	mov	a,(_t + 1)
      0002EF 95*01            [12]  900 	subb	a,(_minDahTimeMs + 1)
                                    901 ;	main.c:154: if (index > 0) {
      0002F1 40 3A            [24]  902 	jc	00115$
      0002F3 E4               [12]  903 	clr	a
      0002F4 95*13            [12]  904 	subb	a,_index
      0002F6 74 80            [12]  905 	mov	a,#(0x00 ^ 0x80)
      0002F8 85*14 F0         [24]  906 	mov	b,(_index + 1)
      0002FB 63 F0 80         [24]  907 	xrl	b,#0x80
      0002FE 95 F0            [12]  908 	subb	a,b
      000300 50 0C            [24]  909 	jnc	00111$
                                    910 ;	main.c:155: lastChar = ditsToChar(&dits);
      000302 90r00r0F         [24]  911 	mov	dptr,#_dits
      000305 75 F0 40         [24]  912 	mov	b,#0x40
      000308 12r00r3A         [24]  913 	lcall	_ditsToChar
      00030B 85 82*15         [24]  914 	mov	_lastChar,dpl
      00030E                        915 00111$:
                                    916 ;	main.c:157: morse_cpy(&dits, &empty);
      00030E 75*00r11         [24]  917 	mov	_morse_cpy_PARM_2,#_empty
      000311 75*01 00         [24]  918 	mov	(_morse_cpy_PARM_2 + 1),#0x00
      000314 75*02 40         [24]  919 	mov	(_morse_cpy_PARM_2 + 2),#0x40
      000317 90r00r0F         [24]  920 	mov	dptr,#_dits
      00031A 75 F0 40         [24]  921 	mov	b,#0x40
      00031D 12r00r00         [24]  922 	lcall	_morse_cpy
                                    923 ;	main.c:159: index = 0;
      000320 E4               [12]  924 	clr	a
      000321 F5*13            [12]  925 	mov	_index,a
      000323 F5*14            [12]  926 	mov	(_index + 1),a
                                    927 ;	main.c:161: deltaT = 0;
      000325 F5*02            [12]  928 	mov	_deltaT,a
      000327 F5*03            [12]  929 	mov	(_deltaT + 1),a
                                    930 ;	main.c:162: t = 0;
      000329 F5*04            [12]  931 	mov	_t,a
      00032B F5*05            [12]  932 	mov	(_t + 1),a
      00032D                        933 00115$:
                                    934 ;	main.c:166: matrix_draw(lastChar);
      00032D 85*15 82         [24]  935 	mov	dpl,_lastChar
                                    936 ;	main.c:167: }
      000330 02r00r00         [24]  937 	ljmp	_matrix_draw
                                    938 ;------------------------------------------------------------
                                    939 ;Allocation info for local variables in function 'ISR_Timer0'
                                    940 ;------------------------------------------------------------
                                    941 ;	main.c:169: void ISR_Timer0(void) __interrupt 1 {
                                    942 ;	-----------------------------------------
                                    943 ;	 function ISR_Timer0
                                    944 ;	-----------------------------------------
      000333                        945 _ISR_Timer0:
      000333 C0 E0            [24]  946 	push	acc
      000335 C0 D0            [24]  947 	push	psw
                                    948 ;	main.c:170: TH0 = 0xFC;
      000337 75 8C FC         [24]  949 	mov	_TH0,#0xfc
                                    950 ;	main.c:171: TL0 = 0x18;
      00033A 75 8A 18         [24]  951 	mov	_TL0,#0x18
                                    952 ;	main.c:173: t++;
      00033D 74 01            [12]  953 	mov	a,#0x01
      00033F 25*04            [12]  954 	add	a,_t
      000341 F5*04            [12]  955 	mov	_t,a
      000343 E4               [12]  956 	clr	a
      000344 35*05            [12]  957 	addc	a,(_t + 1)
      000346 F5*05            [12]  958 	mov	(_t + 1),a
                                    959 ;	main.c:175: if (state == UP) {
      000348 74 01            [12]  960 	mov	a,#0x01
      00034A B5*06 13         [24]  961 	cjne	a,_state,00106$
                                    962 ;	main.c:176: if (P3_2 == 0) {
      00034D 20 B2 21         [24]  963 	jb	_P3_2,00108$
                                    964 ;	main.c:177: state = DOWN;
      000350 75*06 00         [24]  965 	mov	_state,#0x00
                                    966 ;	main.c:178: deltaT = t;
      000353 85*04*02         [24]  967 	mov	_deltaT,_t
      000356 85*05*03         [24]  968 	mov	(_deltaT + 1),(_t + 1)
                                    969 ;	main.c:179: t=0;
      000359 E4               [12]  970 	clr	a
      00035A F5*04            [12]  971 	mov	_t,a
      00035C F5*05            [12]  972 	mov	(_t + 1),a
      00035E 80 11            [24]  973 	sjmp	00108$
      000360                        974 00106$:
                                    975 ;	main.c:183: if (P3_2 == 1) {
      000360 30 B2 0E         [24]  976 	jnb	_P3_2,00108$
                                    977 ;	main.c:184: state = UP;
      000363 75*06 01         [24]  978 	mov	_state,#0x01
                                    979 ;	main.c:185: deltaT = t;
      000366 85*04*02         [24]  980 	mov	_deltaT,_t
      000369 85*05*03         [24]  981 	mov	(_deltaT + 1),(_t + 1)
                                    982 ;	main.c:186: t=0;
      00036C E4               [12]  983 	clr	a
      00036D F5*04            [12]  984 	mov	_t,a
      00036F F5*05            [12]  985 	mov	(_t + 1),a
      000371                        986 00108$:
                                    987 ;	main.c:189: }
      000371 D0 D0            [24]  988 	pop	psw
      000373 D0 E0            [24]  989 	pop	acc
      000375 32               [24]  990 	reti
                                    991 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    992 ;	eliminated unneeded push/pop dpl
                                    993 ;	eliminated unneeded push/pop dph
                                    994 ;	eliminated unneeded push/pop b
                                    995 	.area CSEG    (CODE)
                                    996 	.area CONST   (CODE)
                                    997 	.area XINIT   (CODE)
                                    998 	.area CABS    (ABS,CODE)

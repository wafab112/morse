                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module matrix
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _reset_row
                                     12 	.globl _set_row
                                     13 	.globl _reset_col
                                     14 	.globl _set_col
                                     15 	.globl _CY
                                     16 	.globl _AC
                                     17 	.globl _F0
                                     18 	.globl _RS1
                                     19 	.globl _RS0
                                     20 	.globl _OV
                                     21 	.globl _F1
                                     22 	.globl _P
                                     23 	.globl _PS
                                     24 	.globl _PT1
                                     25 	.globl _PX1
                                     26 	.globl _PT0
                                     27 	.globl _PX0
                                     28 	.globl _RD
                                     29 	.globl _WR
                                     30 	.globl _T1
                                     31 	.globl _T0
                                     32 	.globl _INT1
                                     33 	.globl _INT0
                                     34 	.globl _TXD
                                     35 	.globl _RXD
                                     36 	.globl _P3_7
                                     37 	.globl _P3_6
                                     38 	.globl _P3_5
                                     39 	.globl _P3_4
                                     40 	.globl _P3_3
                                     41 	.globl _P3_2
                                     42 	.globl _P3_1
                                     43 	.globl _P3_0
                                     44 	.globl _EA
                                     45 	.globl _ES
                                     46 	.globl _ET1
                                     47 	.globl _EX1
                                     48 	.globl _ET0
                                     49 	.globl _EX0
                                     50 	.globl _P2_7
                                     51 	.globl _P2_6
                                     52 	.globl _P2_5
                                     53 	.globl _P2_4
                                     54 	.globl _P2_3
                                     55 	.globl _P2_2
                                     56 	.globl _P2_1
                                     57 	.globl _P2_0
                                     58 	.globl _SM0
                                     59 	.globl _SM1
                                     60 	.globl _SM2
                                     61 	.globl _REN
                                     62 	.globl _TB8
                                     63 	.globl _RB8
                                     64 	.globl _TI
                                     65 	.globl _RI
                                     66 	.globl _P1_7
                                     67 	.globl _P1_6
                                     68 	.globl _P1_5
                                     69 	.globl _P1_4
                                     70 	.globl _P1_3
                                     71 	.globl _P1_2
                                     72 	.globl _P1_1
                                     73 	.globl _P1_0
                                     74 	.globl _TF1
                                     75 	.globl _TR1
                                     76 	.globl _TF0
                                     77 	.globl _TR0
                                     78 	.globl _IE1
                                     79 	.globl _IT1
                                     80 	.globl _IE0
                                     81 	.globl _IT0
                                     82 	.globl _P0_7
                                     83 	.globl _P0_6
                                     84 	.globl _P0_5
                                     85 	.globl _P0_4
                                     86 	.globl _P0_3
                                     87 	.globl _P0_2
                                     88 	.globl _P0_1
                                     89 	.globl _P0_0
                                     90 	.globl _B
                                     91 	.globl _ACC
                                     92 	.globl _PSW
                                     93 	.globl _IP
                                     94 	.globl _P3
                                     95 	.globl _IE
                                     96 	.globl _P2
                                     97 	.globl _SBUF
                                     98 	.globl _SCON
                                     99 	.globl _P1
                                    100 	.globl _TH1
                                    101 	.globl _TH0
                                    102 	.globl _TL1
                                    103 	.globl _TL0
                                    104 	.globl _TMOD
                                    105 	.globl _TCON
                                    106 	.globl _PCON
                                    107 	.globl _DPH
                                    108 	.globl _DPL
                                    109 	.globl _SP
                                    110 	.globl _P0
                                    111 	.globl _matrix_draw
                                    112 	.globl _matrix_setup
                                    113 	.globl _matrix_reset
                                    114 	.globl _matrix_reset_rows
                                    115 	.globl _matrix_reset_cols
                                    116 ;--------------------------------------------------------
                                    117 ; special function registers
                                    118 ;--------------------------------------------------------
                                    119 	.area RSEG    (ABS,DATA)
      000000                        120 	.org 0x0000
                           000080   121 _P0	=	0x0080
                           000081   122 _SP	=	0x0081
                           000082   123 _DPL	=	0x0082
                           000083   124 _DPH	=	0x0083
                           000087   125 _PCON	=	0x0087
                           000088   126 _TCON	=	0x0088
                           000089   127 _TMOD	=	0x0089
                           00008A   128 _TL0	=	0x008a
                           00008B   129 _TL1	=	0x008b
                           00008C   130 _TH0	=	0x008c
                           00008D   131 _TH1	=	0x008d
                           000090   132 _P1	=	0x0090
                           000098   133 _SCON	=	0x0098
                           000099   134 _SBUF	=	0x0099
                           0000A0   135 _P2	=	0x00a0
                           0000A8   136 _IE	=	0x00a8
                           0000B0   137 _P3	=	0x00b0
                           0000B8   138 _IP	=	0x00b8
                           0000D0   139 _PSW	=	0x00d0
                           0000E0   140 _ACC	=	0x00e0
                           0000F0   141 _B	=	0x00f0
                                    142 ;--------------------------------------------------------
                                    143 ; special function bits
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0_0	=	0x0080
                           000081   148 _P0_1	=	0x0081
                           000082   149 _P0_2	=	0x0082
                           000083   150 _P0_3	=	0x0083
                           000084   151 _P0_4	=	0x0084
                           000085   152 _P0_5	=	0x0085
                           000086   153 _P0_6	=	0x0086
                           000087   154 _P0_7	=	0x0087
                           000088   155 _IT0	=	0x0088
                           000089   156 _IE0	=	0x0089
                           00008A   157 _IT1	=	0x008a
                           00008B   158 _IE1	=	0x008b
                           00008C   159 _TR0	=	0x008c
                           00008D   160 _TF0	=	0x008d
                           00008E   161 _TR1	=	0x008e
                           00008F   162 _TF1	=	0x008f
                           000090   163 _P1_0	=	0x0090
                           000091   164 _P1_1	=	0x0091
                           000092   165 _P1_2	=	0x0092
                           000093   166 _P1_3	=	0x0093
                           000094   167 _P1_4	=	0x0094
                           000095   168 _P1_5	=	0x0095
                           000096   169 _P1_6	=	0x0096
                           000097   170 _P1_7	=	0x0097
                           000098   171 _RI	=	0x0098
                           000099   172 _TI	=	0x0099
                           00009A   173 _RB8	=	0x009a
                           00009B   174 _TB8	=	0x009b
                           00009C   175 _REN	=	0x009c
                           00009D   176 _SM2	=	0x009d
                           00009E   177 _SM1	=	0x009e
                           00009F   178 _SM0	=	0x009f
                           0000A0   179 _P2_0	=	0x00a0
                           0000A1   180 _P2_1	=	0x00a1
                           0000A2   181 _P2_2	=	0x00a2
                           0000A3   182 _P2_3	=	0x00a3
                           0000A4   183 _P2_4	=	0x00a4
                           0000A5   184 _P2_5	=	0x00a5
                           0000A6   185 _P2_6	=	0x00a6
                           0000A7   186 _P2_7	=	0x00a7
                           0000A8   187 _EX0	=	0x00a8
                           0000A9   188 _ET0	=	0x00a9
                           0000AA   189 _EX1	=	0x00aa
                           0000AB   190 _ET1	=	0x00ab
                           0000AC   191 _ES	=	0x00ac
                           0000AF   192 _EA	=	0x00af
                           0000B0   193 _P3_0	=	0x00b0
                           0000B1   194 _P3_1	=	0x00b1
                           0000B2   195 _P3_2	=	0x00b2
                           0000B3   196 _P3_3	=	0x00b3
                           0000B4   197 _P3_4	=	0x00b4
                           0000B5   198 _P3_5	=	0x00b5
                           0000B6   199 _P3_6	=	0x00b6
                           0000B7   200 _P3_7	=	0x00b7
                           0000B0   201 _RXD	=	0x00b0
                           0000B1   202 _TXD	=	0x00b1
                           0000B2   203 _INT0	=	0x00b2
                           0000B3   204 _INT1	=	0x00b3
                           0000B4   205 _T0	=	0x00b4
                           0000B5   206 _T1	=	0x00b5
                           0000B6   207 _WR	=	0x00b6
                           0000B7   208 _RD	=	0x00b7
                           0000B8   209 _PX0	=	0x00b8
                           0000B9   210 _PT0	=	0x00b9
                           0000BA   211 _PX1	=	0x00ba
                           0000BB   212 _PT1	=	0x00bb
                           0000BC   213 _PS	=	0x00bc
                           0000D0   214 _P	=	0x00d0
                           0000D1   215 _F1	=	0x00d1
                           0000D2   216 _OV	=	0x00d2
                           0000D3   217 _RS0	=	0x00d3
                           0000D4   218 _RS1	=	0x00d4
                           0000D5   219 _F0	=	0x00d5
                           0000D6   220 _AC	=	0x00d6
                           0000D7   221 _CY	=	0x00d7
                                    222 ;--------------------------------------------------------
                                    223 ; overlayable register banks
                                    224 ;--------------------------------------------------------
                                    225 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        226 	.ds 8
                                    227 ;--------------------------------------------------------
                                    228 ; internal ram data
                                    229 ;--------------------------------------------------------
                                    230 	.area DSEG    (DATA)
      000000                        231 _matrix_draw_active_muster_65536_29:
      000000                        232 	.ds 8
      000008                        233 _matrix_draw_i_131072_31:
      000008                        234 	.ds 2
      00000A                        235 _matrix_draw_j_262144_33:
      00000A                        236 	.ds 2
                                    237 ;--------------------------------------------------------
                                    238 ; overlayable items in internal ram 
                                    239 ;--------------------------------------------------------
                                    240 	.area	OSEG    (OVR,DATA)
                                    241 	.area	OSEG    (OVR,DATA)
                                    242 	.area	OSEG    (OVR,DATA)
                                    243 	.area	OSEG    (OVR,DATA)
                                    244 	.area	OSEG    (OVR,DATA)
                                    245 	.area	OSEG    (OVR,DATA)
                                    246 	.area	OSEG    (OVR,DATA)
                                    247 ;--------------------------------------------------------
                                    248 ; indirectly addressable internal ram data
                                    249 ;--------------------------------------------------------
                                    250 	.area ISEG    (DATA)
                                    251 ;--------------------------------------------------------
                                    252 ; absolute internal ram data
                                    253 ;--------------------------------------------------------
                                    254 	.area IABS    (ABS,DATA)
                                    255 	.area IABS    (ABS,DATA)
                                    256 ;--------------------------------------------------------
                                    257 ; bit data
                                    258 ;--------------------------------------------------------
                                    259 	.area BSEG    (BIT)
                                    260 ;--------------------------------------------------------
                                    261 ; paged external ram data
                                    262 ;--------------------------------------------------------
                                    263 	.area PSEG    (PAG,XDATA)
                                    264 ;--------------------------------------------------------
                                    265 ; external ram data
                                    266 ;--------------------------------------------------------
                                    267 	.area XSEG    (XDATA)
                                    268 ;--------------------------------------------------------
                                    269 ; absolute external ram data
                                    270 ;--------------------------------------------------------
                                    271 	.area XABS    (ABS,XDATA)
                                    272 ;--------------------------------------------------------
                                    273 ; external initialized ram data
                                    274 ;--------------------------------------------------------
                                    275 	.area XISEG   (XDATA)
                                    276 	.area HOME    (CODE)
                                    277 	.area GSINIT0 (CODE)
                                    278 	.area GSINIT1 (CODE)
                                    279 	.area GSINIT2 (CODE)
                                    280 	.area GSINIT3 (CODE)
                                    281 	.area GSINIT4 (CODE)
                                    282 	.area GSINIT5 (CODE)
                                    283 	.area GSINIT  (CODE)
                                    284 	.area GSFINAL (CODE)
                                    285 	.area CSEG    (CODE)
                                    286 ;--------------------------------------------------------
                                    287 ; global & static initialisations
                                    288 ;--------------------------------------------------------
                                    289 	.area HOME    (CODE)
                                    290 	.area GSINIT  (CODE)
                                    291 	.area GSFINAL (CODE)
                                    292 	.area GSINIT  (CODE)
                                    293 ;--------------------------------------------------------
                                    294 ; Home
                                    295 ;--------------------------------------------------------
                                    296 	.area HOME    (CODE)
                                    297 	.area HOME    (CODE)
                                    298 ;--------------------------------------------------------
                                    299 ; code
                                    300 ;--------------------------------------------------------
                                    301 	.area CSEG    (CODE)
                                    302 ;------------------------------------------------------------
                                    303 ;Allocation info for local variables in function 'is_col_port3'
                                    304 ;------------------------------------------------------------
                                    305 ;col                       Allocated to registers r6 r7 
                                    306 ;------------------------------------------------------------
                                    307 ;	matrix.c:22: static bool is_col_port3(int col) {
                                    308 ;	-----------------------------------------
                                    309 ;	 function is_col_port3
                                    310 ;	-----------------------------------------
      000000                        311 _is_col_port3:
                           000007   312 	ar7 = 0x07
                           000006   313 	ar6 = 0x06
                           000005   314 	ar5 = 0x05
                           000004   315 	ar4 = 0x04
                           000003   316 	ar3 = 0x03
                           000002   317 	ar2 = 0x02
                           000001   318 	ar1 = 0x01
                           000000   319 	ar0 = 0x00
      000000 AE 82            [24]  320 	mov	r6,dpl
      000002 AF 83            [24]  321 	mov	r7,dph
                                    322 ;	matrix.c:23: if (col == 0) {
      000004 EE               [12]  323 	mov	a,r6
      000005 4F               [12]  324 	orl	a,r7
                                    325 ;	matrix.c:24: return false;
      000006 70 03            [24]  326 	jnz	00102$
      000008 F5 82            [12]  327 	mov	dpl,a
      00000A 22               [24]  328 	ret
      00000B                        329 00102$:
                                    330 ;	matrix.c:26: return true;
      00000B 75 82 01         [24]  331 	mov	dpl,#0x01
                                    332 ;	matrix.c:27: }
      00000E 22               [24]  333 	ret
                                    334 ;------------------------------------------------------------
                                    335 ;Allocation info for local variables in function 'get_pin_of_col'
                                    336 ;------------------------------------------------------------
                                    337 ;col                       Allocated to registers r6 r7 
                                    338 ;------------------------------------------------------------
                                    339 ;	matrix.c:29: static bool get_pin_of_col(int col) {
                                    340 ;	-----------------------------------------
                                    341 ;	 function get_pin_of_col
                                    342 ;	-----------------------------------------
      00000F                        343 _get_pin_of_col:
      00000F AE 82            [24]  344 	mov	r6,dpl
      000011 AF 83            [24]  345 	mov	r7,dph
                                    346 ;	matrix.c:30: if (col == 1) {
      000013 BE 01 07         [24]  347 	cjne	r6,#0x01,00102$
      000016 BF 00 04         [24]  348 	cjne	r7,#0x00,00102$
                                    349 ;	matrix.c:31: return 7;
      000019 75 82 01         [24]  350 	mov	dpl,#0x01
      00001C 22               [24]  351 	ret
      00001D                        352 00102$:
                                    353 ;	matrix.c:34: if (col == 2) {
      00001D BE 02 07         [24]  354 	cjne	r6,#0x02,00104$
      000020 BF 00 04         [24]  355 	cjne	r7,#0x00,00104$
                                    356 ;	matrix.c:35: return 5;
      000023 75 82 01         [24]  357 	mov	dpl,#0x01
      000026 22               [24]  358 	ret
      000027                        359 00104$:
                                    360 ;	matrix.c:38: if (col == 3) {
      000027 BE 03 07         [24]  361 	cjne	r6,#0x03,00106$
      00002A BF 00 04         [24]  362 	cjne	r7,#0x00,00106$
                                    363 ;	matrix.c:39: return 4;
      00002D 75 82 01         [24]  364 	mov	dpl,#0x01
      000030 22               [24]  365 	ret
      000031                        366 00106$:
                                    367 ;	matrix.c:42: if (col == 4) {
      000031 BE 04 07         [24]  368 	cjne	r6,#0x04,00108$
      000034 BF 00 04         [24]  369 	cjne	r7,#0x00,00108$
                                    370 ;	matrix.c:43: return 3;
      000037 75 82 01         [24]  371 	mov	dpl,#0x01
      00003A 22               [24]  372 	ret
      00003B                        373 00108$:
                                    374 ;	matrix.c:46: return -1;
      00003B 75 82 01         [24]  375 	mov	dpl,#0x01
                                    376 ;	matrix.c:47: }
      00003E 22               [24]  377 	ret
                                    378 ;------------------------------------------------------------
                                    379 ;Allocation info for local variables in function 'set_col'
                                    380 ;------------------------------------------------------------
                                    381 ;col                       Allocated to registers r6 r7 
                                    382 ;------------------------------------------------------------
                                    383 ;	matrix.c:49: void set_col(int col) {
                                    384 ;	-----------------------------------------
                                    385 ;	 function set_col
                                    386 ;	-----------------------------------------
      00003F                        387 _set_col:
      00003F AE 82            [24]  388 	mov	r6,dpl
      000041 AF 83            [24]  389 	mov	r7,dph
                                    390 ;	matrix.c:50: switch (col) {
      000043 BE 00 05         [24]  391 	cjne	r6,#0x00,00129$
      000046 BF 00 02         [24]  392 	cjne	r7,#0x00,00129$
      000049 80 20            [24]  393 	sjmp	00101$
      00004B                        394 00129$:
      00004B BE 01 05         [24]  395 	cjne	r6,#0x01,00130$
      00004E BF 00 02         [24]  396 	cjne	r7,#0x00,00130$
      000051 80 1B            [24]  397 	sjmp	00102$
      000053                        398 00130$:
      000053 BE 02 05         [24]  399 	cjne	r6,#0x02,00131$
      000056 BF 00 02         [24]  400 	cjne	r7,#0x00,00131$
      000059 80 16            [24]  401 	sjmp	00103$
      00005B                        402 00131$:
      00005B BE 03 05         [24]  403 	cjne	r6,#0x03,00132$
      00005E BF 00 02         [24]  404 	cjne	r7,#0x00,00132$
      000061 80 11            [24]  405 	sjmp	00104$
      000063                        406 00132$:
                                    407 ;	matrix.c:51: case 0: P1_0 = 1;
      000063 BE 04 13         [24]  408 	cjne	r6,#0x04,00107$
      000066 BF 00 10         [24]  409 	cjne	r7,#0x00,00107$
      000069 80 0C            [24]  410 	sjmp	00105$
      00006B                        411 00101$:
                                    412 ;	assignBit
      00006B D2 90            [12]  413 	setb	_P1_0
                                    414 ;	matrix.c:52: break;
                                    415 ;	matrix.c:53: case 1: P3_7 = 1;
      00006D 22               [24]  416 	ret
      00006E                        417 00102$:
                                    418 ;	assignBit
      00006E D2 B7            [12]  419 	setb	_P3_7
                                    420 ;	matrix.c:54: break;
                                    421 ;	matrix.c:55: case 2: P3_5 = 1;
      000070 22               [24]  422 	ret
      000071                        423 00103$:
                                    424 ;	assignBit
      000071 D2 B5            [12]  425 	setb	_P3_5
                                    426 ;	matrix.c:56: break;
                                    427 ;	matrix.c:57: case 3: P3_4 = 1;
      000073 22               [24]  428 	ret
      000074                        429 00104$:
                                    430 ;	assignBit
      000074 D2 B4            [12]  431 	setb	_P3_4
                                    432 ;	matrix.c:58: break;
                                    433 ;	matrix.c:59: case 4: P3_3 = 1;
      000076 22               [24]  434 	ret
      000077                        435 00105$:
                                    436 ;	assignBit
      000077 D2 B3            [12]  437 	setb	_P3_3
                                    438 ;	matrix.c:61: };
      000079                        439 00107$:
                                    440 ;	matrix.c:62: }
      000079 22               [24]  441 	ret
                                    442 ;------------------------------------------------------------
                                    443 ;Allocation info for local variables in function 'reset_col'
                                    444 ;------------------------------------------------------------
                                    445 ;col                       Allocated to registers r6 r7 
                                    446 ;------------------------------------------------------------
                                    447 ;	matrix.c:64: void reset_col(int col) {
                                    448 ;	-----------------------------------------
                                    449 ;	 function reset_col
                                    450 ;	-----------------------------------------
      00007A                        451 _reset_col:
      00007A AE 82            [24]  452 	mov	r6,dpl
      00007C AF 83            [24]  453 	mov	r7,dph
                                    454 ;	matrix.c:65: switch (col) {
      00007E BE 00 05         [24]  455 	cjne	r6,#0x00,00129$
      000081 BF 00 02         [24]  456 	cjne	r7,#0x00,00129$
      000084 80 20            [24]  457 	sjmp	00101$
      000086                        458 00129$:
      000086 BE 01 05         [24]  459 	cjne	r6,#0x01,00130$
      000089 BF 00 02         [24]  460 	cjne	r7,#0x00,00130$
      00008C 80 1B            [24]  461 	sjmp	00102$
      00008E                        462 00130$:
      00008E BE 02 05         [24]  463 	cjne	r6,#0x02,00131$
      000091 BF 00 02         [24]  464 	cjne	r7,#0x00,00131$
      000094 80 16            [24]  465 	sjmp	00103$
      000096                        466 00131$:
      000096 BE 03 05         [24]  467 	cjne	r6,#0x03,00132$
      000099 BF 00 02         [24]  468 	cjne	r7,#0x00,00132$
      00009C 80 11            [24]  469 	sjmp	00104$
      00009E                        470 00132$:
                                    471 ;	matrix.c:66: case 0: P1_0 = 0;
      00009E BE 04 13         [24]  472 	cjne	r6,#0x04,00107$
      0000A1 BF 00 10         [24]  473 	cjne	r7,#0x00,00107$
      0000A4 80 0C            [24]  474 	sjmp	00105$
      0000A6                        475 00101$:
                                    476 ;	assignBit
      0000A6 C2 90            [12]  477 	clr	_P1_0
                                    478 ;	matrix.c:67: break;
                                    479 ;	matrix.c:68: case 1: P3_7 = 0;
      0000A8 22               [24]  480 	ret
      0000A9                        481 00102$:
                                    482 ;	assignBit
      0000A9 C2 B7            [12]  483 	clr	_P3_7
                                    484 ;	matrix.c:69: break;
                                    485 ;	matrix.c:70: case 2: P3_5 = 0;
      0000AB 22               [24]  486 	ret
      0000AC                        487 00103$:
                                    488 ;	assignBit
      0000AC C2 B5            [12]  489 	clr	_P3_5
                                    490 ;	matrix.c:71: break;
                                    491 ;	matrix.c:72: case 3: P3_4 = 0;
      0000AE 22               [24]  492 	ret
      0000AF                        493 00104$:
                                    494 ;	assignBit
      0000AF C2 B4            [12]  495 	clr	_P3_4
                                    496 ;	matrix.c:73: break;
                                    497 ;	matrix.c:74: case 4: P3_3 = 0;
      0000B1 22               [24]  498 	ret
      0000B2                        499 00105$:
                                    500 ;	assignBit
      0000B2 C2 B3            [12]  501 	clr	_P3_3
                                    502 ;	matrix.c:76: };
      0000B4                        503 00107$:
                                    504 ;	matrix.c:77: }
      0000B4 22               [24]  505 	ret
                                    506 ;------------------------------------------------------------
                                    507 ;Allocation info for local variables in function 'set_row'
                                    508 ;------------------------------------------------------------
                                    509 ;row                       Allocated to registers r6 r7 
                                    510 ;------------------------------------------------------------
                                    511 ;	matrix.c:79: void set_row(int row) {
                                    512 ;	-----------------------------------------
                                    513 ;	 function set_row
                                    514 ;	-----------------------------------------
      0000B5                        515 _set_row:
                                    516 ;	matrix.c:80: P1 = P1 | (1 << (row + 1));
      0000B5 E5 82            [12]  517 	mov	a,dpl
      0000B7 04               [12]  518 	inc	a
      0000B8 F5 F0            [12]  519 	mov	b,a
      0000BA 05 F0            [12]  520 	inc	b
      0000BC 74 01            [12]  521 	mov	a,#0x01
      0000BE 80 02            [24]  522 	sjmp	00105$
      0000C0                        523 00103$:
      0000C0 25 E0            [12]  524 	add	a,acc
      0000C2                        525 00105$:
      0000C2 D5 F0 FB         [24]  526 	djnz	b,00103$
      0000C5 AE 90            [24]  527 	mov	r6,_P1
      0000C7 4E               [12]  528 	orl	a,r6
      0000C8 F5 90            [12]  529 	mov	_P1,a
                                    530 ;	matrix.c:81: }
      0000CA 22               [24]  531 	ret
                                    532 ;------------------------------------------------------------
                                    533 ;Allocation info for local variables in function 'reset_row'
                                    534 ;------------------------------------------------------------
                                    535 ;row                       Allocated to registers r6 r7 
                                    536 ;------------------------------------------------------------
                                    537 ;	matrix.c:83: void reset_row(int row) {
                                    538 ;	-----------------------------------------
                                    539 ;	 function reset_row
                                    540 ;	-----------------------------------------
      0000CB                        541 _reset_row:
                                    542 ;	matrix.c:84: P1 = P1 & (0xFF - (1 << (row+1)));
      0000CB E5 82            [12]  543 	mov	a,dpl
      0000CD 04               [12]  544 	inc	a
      0000CE F5 F0            [12]  545 	mov	b,a
      0000D0 05 F0            [12]  546 	inc	b
      0000D2 74 01            [12]  547 	mov	a,#0x01
      0000D4 80 02            [24]  548 	sjmp	00105$
      0000D6                        549 00103$:
      0000D6 25 E0            [12]  550 	add	a,acc
      0000D8                        551 00105$:
      0000D8 D5 F0 FB         [24]  552 	djnz	b,00103$
      0000DB FF               [12]  553 	mov	r7,a
      0000DC 74 FF            [12]  554 	mov	a,#0xff
      0000DE C3               [12]  555 	clr	c
      0000DF 9F               [12]  556 	subb	a,r7
      0000E0 AE 90            [24]  557 	mov	r6,_P1
      0000E2 5E               [12]  558 	anl	a,r6
      0000E3 F5 90            [12]  559 	mov	_P1,a
                                    560 ;	matrix.c:85: }
      0000E5 22               [24]  561 	ret
                                    562 ;------------------------------------------------------------
                                    563 ;Allocation info for local variables in function 'charToMuster'
                                    564 ;------------------------------------------------------------
                                    565 ;c                         Allocated to registers r7 
                                    566 ;------------------------------------------------------------
                                    567 ;	matrix.c:87: static uint64_t charToMuster(char c) {
                                    568 ;	-----------------------------------------
                                    569 ;	 function charToMuster
                                    570 ;	-----------------------------------------
      0000E6                        571 _charToMuster:
      0000E6 AF 82            [24]  572 	mov	r7,dpl
                                    573 ;	matrix.c:88: switch (c) {
      0000E8 BF 2B 00         [24]  574 	cjne	r7,#0x2b,00150$
      0000EB                        575 00150$:
      0000EB 50 03            [24]  576 	jnc	00151$
      0000ED 02r03rDD         [24]  577 	ljmp	00138$
      0000F0                        578 00151$:
      0000F0 EF               [12]  579 	mov	a,r7
      0000F1 24 A5            [12]  580 	add	a,#0xff - 0x5a
      0000F3 50 03            [24]  581 	jnc	00152$
      0000F5 02r03rDD         [24]  582 	ljmp	00138$
      0000F8                        583 00152$:
      0000F8 EF               [12]  584 	mov	a,r7
      0000F9 24 D5            [12]  585 	add	a,#0xd5
      0000FB FF               [12]  586 	mov	r7,a
      0000FC 24 0A            [12]  587 	add	a,#(00153$-3-.)
      0000FE 83               [24]  588 	movc	a,@a+pc
      0000FF F5 82            [12]  589 	mov	dpl,a
      000101 EF               [12]  590 	mov	a,r7
      000102 24 34            [12]  591 	add	a,#(00154$-3-.)
      000104 83               [24]  592 	movc	a,@a+pc
      000105 F5 83            [12]  593 	mov	dph,a
      000107 E4               [12]  594 	clr	a
      000108 73               [24]  595 	jmp	@a+dptr
      000109                        596 00153$:
      000109rCD                     597 	.db	00137$
      00010ArDD                     598 	.db	00138$
      00010BrDD                     599 	.db	00138$
      00010CrDD                     600 	.db	00138$
      00010DrDD                     601 	.db	00138$
      00010Er23                     602 	.db	00127$
      00010Fr34                     603 	.db	00128$
      000110r45                     604 	.db	00129$
      000111r56                     605 	.db	00130$
      000112r67                     606 	.db	00131$
      000113r78                     607 	.db	00132$
      000114r89                     608 	.db	00133$
      000115r9A                     609 	.db	00134$
      000116rAB                     610 	.db	00135$
      000117rBC                     611 	.db	00136$
      000118rDD                     612 	.db	00138$
      000119rDD                     613 	.db	00138$
      00011ArDD                     614 	.db	00138$
      00011BrDD                     615 	.db	00138$
      00011CrDD                     616 	.db	00138$
      00011DrDD                     617 	.db	00138$
      00011ErDD                     618 	.db	00138$
      00011Fr69                     619 	.db	00101$
      000120r7A                     620 	.db	00102$
      000121r8B                     621 	.db	00103$
      000122r9C                     622 	.db	00104$
      000123rAD                     623 	.db	00105$
      000124rBE                     624 	.db	00106$
      000125rCF                     625 	.db	00107$
      000126rE0                     626 	.db	00108$
      000127rF1                     627 	.db	00109$
      000128r02                     628 	.db	00110$
      000129r13                     629 	.db	00111$
      00012Ar24                     630 	.db	00112$
      00012Br35                     631 	.db	00113$
      00012Cr46                     632 	.db	00114$
      00012Dr57                     633 	.db	00115$
      00012Er68                     634 	.db	00116$
      00012Fr79                     635 	.db	00117$
      000130r8A                     636 	.db	00118$
      000131r9B                     637 	.db	00119$
      000132rAC                     638 	.db	00120$
      000133rBD                     639 	.db	00121$
      000134rCE                     640 	.db	00122$
      000135rDF                     641 	.db	00123$
      000136rF0                     642 	.db	00124$
      000137r01                     643 	.db	00125$
      000138r12                     644 	.db	00126$
      000139                        645 00154$:
      000139s03                     646 	.db	00137$>>8
      00013As03                     647 	.db	00138$>>8
      00013Bs03                     648 	.db	00138$>>8
      00013Cs03                     649 	.db	00138$>>8
      00013Ds03                     650 	.db	00138$>>8
      00013Es03                     651 	.db	00127$>>8
      00013Fs03                     652 	.db	00128$>>8
      000140s03                     653 	.db	00129$>>8
      000141s03                     654 	.db	00130$>>8
      000142s03                     655 	.db	00131$>>8
      000143s03                     656 	.db	00132$>>8
      000144s03                     657 	.db	00133$>>8
      000145s03                     658 	.db	00134$>>8
      000146s03                     659 	.db	00135$>>8
      000147s03                     660 	.db	00136$>>8
      000148s03                     661 	.db	00138$>>8
      000149s03                     662 	.db	00138$>>8
      00014As03                     663 	.db	00138$>>8
      00014Bs03                     664 	.db	00138$>>8
      00014Cs03                     665 	.db	00138$>>8
      00014Ds03                     666 	.db	00138$>>8
      00014Es03                     667 	.db	00138$>>8
      00014Fs01                     668 	.db	00101$>>8
      000150s01                     669 	.db	00102$>>8
      000151s01                     670 	.db	00103$>>8
      000152s01                     671 	.db	00104$>>8
      000153s01                     672 	.db	00105$>>8
      000154s01                     673 	.db	00106$>>8
      000155s01                     674 	.db	00107$>>8
      000156s01                     675 	.db	00108$>>8
      000157s01                     676 	.db	00109$>>8
      000158s02                     677 	.db	00110$>>8
      000159s02                     678 	.db	00111$>>8
      00015As02                     679 	.db	00112$>>8
      00015Bs02                     680 	.db	00113$>>8
      00015Cs02                     681 	.db	00114$>>8
      00015Ds02                     682 	.db	00115$>>8
      00015Es02                     683 	.db	00116$>>8
      00015Fs02                     684 	.db	00117$>>8
      000160s02                     685 	.db	00118$>>8
      000161s02                     686 	.db	00119$>>8
      000162s02                     687 	.db	00120$>>8
      000163s02                     688 	.db	00121$>>8
      000164s02                     689 	.db	00122$>>8
      000165s02                     690 	.db	00123$>>8
      000166s02                     691 	.db	00124$>>8
      000167s03                     692 	.db	00125$>>8
      000168s03                     693 	.db	00126$>>8
                                    694 ;	matrix.c:89: case 'A': return musterA;
      000169                        695 00101$:
      000169 90 C6 31         [24]  696 	mov	dptr,#0xc631
      00016C 75 F0 1F         [24]  697 	mov	b,#0x1f
      00016F 74 A3            [12]  698 	mov	a,#0xa3
      000171 7C 03            [12]  699 	mov	r4,#0x03
      000173 7D 00            [12]  700 	mov	r5,#0x00
      000175 7E 00            [12]  701 	mov	r6,#0x00
      000177 7F 00            [12]  702 	mov	r7,#0x00
      000179 22               [24]  703 	ret
                                    704 ;	matrix.c:91: case 'B': return musterB;
      00017A                        705 00102$:
      00017A 90 46 3E         [24]  706 	mov	dptr,#0x463e
      00017D 75 F0 1F         [24]  707 	mov	b,#0x1f
      000180 74 A3            [12]  708 	mov	a,#0xa3
      000182 7C 07            [12]  709 	mov	r4,#0x07
      000184 7D 00            [12]  710 	mov	r5,#0x00
      000186 7E 00            [12]  711 	mov	r6,#0x00
      000188 7F 00            [12]  712 	mov	r7,#0x00
      00018A 22               [24]  713 	ret
                                    714 ;	matrix.c:93: case 'C': return musterC;
      00018B                        715 00103$:
      00018B 90 42 0F         [24]  716 	mov	dptr,#0x420f
      00018E 75 F0 08         [24]  717 	mov	b,#0x08
      000191 74 E1            [12]  718 	mov	a,#0xe1
      000193 7C 03            [12]  719 	mov	r4,#0x03
      000195 7D 00            [12]  720 	mov	r5,#0x00
      000197 7E 00            [12]  721 	mov	r6,#0x00
      000199 7F 00            [12]  722 	mov	r7,#0x00
      00019B 22               [24]  723 	ret
                                    724 ;	matrix.c:95: case 'D': return musterD;
      00019C                        725 00104$:
      00019C 90 C6 3E         [24]  726 	mov	dptr,#0xc63e
      00019F 75 F0 18         [24]  727 	mov	b,#0x18
      0001A2 74 A3            [12]  728 	mov	a,#0xa3
      0001A4 7C 07            [12]  729 	mov	r4,#0x07
      0001A6 7D 00            [12]  730 	mov	r5,#0x00
      0001A8 7E 00            [12]  731 	mov	r6,#0x00
      0001AA 7F 00            [12]  732 	mov	r7,#0x00
      0001AC 22               [24]  733 	ret
                                    734 ;	matrix.c:97: case 'E': return musterE;
      0001AD                        735 00105$:
      0001AD 90 C2 1F         [24]  736 	mov	dptr,#0xc21f
      0001B0 75 F0 0F         [24]  737 	mov	b,#0x0f
      0001B3 74 E1            [12]  738 	mov	a,#0xe1
      0001B5 7C 07            [12]  739 	mov	r4,#0x07
      0001B7 7D 00            [12]  740 	mov	r5,#0x00
      0001B9 7E 00            [12]  741 	mov	r6,#0x00
      0001BB 7F 00            [12]  742 	mov	r7,#0x00
      0001BD 22               [24]  743 	ret
                                    744 ;	matrix.c:99: case 'F': return musterF;
      0001BE                        745 00106$:
      0001BE 90 42 10         [24]  746 	mov	dptr,#0x4210
      0001C1 75 F0 0F         [24]  747 	mov	b,#0x0f
      0001C4 74 E1            [12]  748 	mov	a,#0xe1
      0001C6 7C 07            [12]  749 	mov	r4,#0x07
      0001C8 7D 00            [12]  750 	mov	r5,#0x00
      0001CA 7E 00            [12]  751 	mov	r6,#0x00
      0001CC 7F 00            [12]  752 	mov	r7,#0x00
      0001CE 22               [24]  753 	ret
                                    754 ;	matrix.c:101: case 'G': return musterG;
      0001CF                        755 00107$:
      0001CF 90 C6 2E         [24]  756 	mov	dptr,#0xc62e
      0001D2 75 F0 0B         [24]  757 	mov	b,#0x0b
      0001D5 74 E1            [12]  758 	mov	a,#0xe1
      0001D7 7C 03            [12]  759 	mov	r4,#0x03
      0001D9 7D 00            [12]  760 	mov	r5,#0x00
      0001DB 7E 00            [12]  761 	mov	r6,#0x00
      0001DD 7F 00            [12]  762 	mov	r7,#0x00
      0001DF 22               [24]  763 	ret
                                    764 ;	matrix.c:103: case 'H': return musterH;
      0001E0                        765 00108$:
      0001E0 90 C6 31         [24]  766 	mov	dptr,#0xc631
      0001E3 75 F0 1F         [24]  767 	mov	b,#0x1f
      0001E6 74 63            [12]  768 	mov	a,#0x63
      0001E8 7C 04            [12]  769 	mov	r4,#0x04
      0001EA 7D 00            [12]  770 	mov	r5,#0x00
      0001EC 7E 00            [12]  771 	mov	r6,#0x00
      0001EE 7F 00            [12]  772 	mov	r7,#0x00
      0001F0 22               [24]  773 	ret
                                    774 ;	matrix.c:105: case 'I': return musterI;
      0001F1                        775 00109$:
      0001F1 90 10 9F         [24]  776 	mov	dptr,#0x109f
      0001F4 75 F0 42         [24]  777 	mov	b,#0x42
      0001F7 74 C8            [12]  778 	mov	a,#0xc8
      0001F9 7C 07            [12]  779 	mov	r4,#0x07
      0001FB 7D 00            [12]  780 	mov	r5,#0x00
      0001FD 7E 00            [12]  781 	mov	r6,#0x00
      0001FF 7F 00            [12]  782 	mov	r7,#0x00
      000201 22               [24]  783 	ret
                                    784 ;	matrix.c:107: case 'J': return musterJ;
      000202                        785 00110$:
      000202 90 4A 4C         [24]  786 	mov	dptr,#0x4a4c
      000205 75 F0 21         [24]  787 	mov	b,#0x21
      000208 74 84            [12]  788 	mov	a,#0x84
      00020A 7C 00            [12]  789 	mov	r4,#0x00
      00020C 7D 00            [12]  790 	mov	r5,#0x00
      00020E 7E 00            [12]  791 	mov	r6,#0x00
      000210 7F 00            [12]  792 	mov	r7,#0x00
      000212 22               [24]  793 	ret
                                    794 ;	matrix.c:109: case 'K': return musterK;
      000213                        795 00111$:
      000213 90 52 51         [24]  796 	mov	dptr,#0x5251
      000216 75 F0 4C         [24]  797 	mov	b,#0x4c
      000219 74 65            [12]  798 	mov	a,#0x65
      00021B 7C 04            [12]  799 	mov	r4,#0x04
      00021D 7D 00            [12]  800 	mov	r5,#0x00
      00021F 7E 00            [12]  801 	mov	r6,#0x00
      000221 7F 00            [12]  802 	mov	r7,#0x00
      000223 22               [24]  803 	ret
                                    804 ;	matrix.c:111: case 'L': return musterL;
      000224                        805 00112$:
      000224 90 42 1F         [24]  806 	mov	dptr,#0x421f
      000227 75 F0 08         [24]  807 	mov	b,#0x08
      00022A 74 21            [12]  808 	mov	a,#0x21
      00022C 7C 04            [12]  809 	mov	r4,#0x04
      00022E 7D 00            [12]  810 	mov	r5,#0x00
      000230 7E 00            [12]  811 	mov	r6,#0x00
      000232 7F 00            [12]  812 	mov	r7,#0x00
      000234 22               [24]  813 	ret
                                    814 ;	matrix.c:113: case 'M': return musterM;
      000235                        815 00113$:
      000235 90 C6 31         [24]  816 	mov	dptr,#0xc631
      000238 75 F0 58         [24]  817 	mov	b,#0x58
      00023B 74 77            [12]  818 	mov	a,#0x77
      00023D 7C 04            [12]  819 	mov	r4,#0x04
      00023F 7D 00            [12]  820 	mov	r5,#0x00
      000241 7E 00            [12]  821 	mov	r6,#0x00
      000243 7F 00            [12]  822 	mov	r7,#0x00
      000245 22               [24]  823 	ret
                                    824 ;	matrix.c:115: case 'N': return musterN;
      000246                        825 00114$:
      000246 90 CE 31         [24]  826 	mov	dptr,#0xce31
      000249 75 F0 9A         [24]  827 	mov	b,#0x9a
      00024C 74 63            [12]  828 	mov	a,#0x63
      00024E 7C 04            [12]  829 	mov	r4,#0x04
      000250 7D 00            [12]  830 	mov	r5,#0x00
      000252 7E 00            [12]  831 	mov	r6,#0x00
      000254 7F 00            [12]  832 	mov	r7,#0x00
      000256 22               [24]  833 	ret
                                    834 ;	matrix.c:117: case 'O': return musterO;
      000257                        835 00115$:
      000257 90 C6 2E         [24]  836 	mov	dptr,#0xc62e
      00025A 75 F0 18         [24]  837 	mov	b,#0x18
      00025D 74 A3            [12]  838 	mov	a,#0xa3
      00025F 7C 03            [12]  839 	mov	r4,#0x03
      000261 7D 00            [12]  840 	mov	r5,#0x00
      000263 7E 00            [12]  841 	mov	r6,#0x00
      000265 7F 00            [12]  842 	mov	r7,#0x00
      000267 22               [24]  843 	ret
                                    844 ;	matrix.c:119: case 'P': return musterP;
      000268                        845 00116$:
      000268 90 42 10         [24]  846 	mov	dptr,#0x4210
      00026B 75 F0 1F         [24]  847 	mov	b,#0x1f
      00026E 74 A3            [12]  848 	mov	a,#0xa3
      000270 7C 07            [12]  849 	mov	r4,#0x07
      000272 7D 00            [12]  850 	mov	r5,#0x00
      000274 7E 00            [12]  851 	mov	r6,#0x00
      000276 7F 00            [12]  852 	mov	r7,#0x00
      000278 22               [24]  853 	ret
                                    854 ;	matrix.c:121: case 'Q': return musterQ;
      000279                        855 00117$:
      000279 90 D6 6F         [24]  856 	mov	dptr,#0xd66f
      00027C 75 F0 18         [24]  857 	mov	b,#0x18
      00027F 74 A3            [12]  858 	mov	a,#0xa3
      000281 7C 03            [12]  859 	mov	r4,#0x03
      000283 7D 00            [12]  860 	mov	r5,#0x00
      000285 7E 00            [12]  861 	mov	r6,#0x00
      000287 7F 00            [12]  862 	mov	r7,#0x00
      000289 22               [24]  863 	ret
                                    864 ;	matrix.c:123: case 'R': return musterR;
      00028A                        865 00118$:
      00028A 90 52 51         [24]  866 	mov	dptr,#0x5251
      00028D 75 F0 1F         [24]  867 	mov	b,#0x1f
      000290 74 A3            [12]  868 	mov	a,#0xa3
      000292 7C 07            [12]  869 	mov	r4,#0x07
      000294 7D 00            [12]  870 	mov	r5,#0x00
      000296 7E 00            [12]  871 	mov	r6,#0x00
      000298 7F 00            [12]  872 	mov	r7,#0x00
      00029A 22               [24]  873 	ret
                                    874 ;	matrix.c:125: case 'S': return musterS;
      00029B                        875 00119$:
      00029B 90 04 3E         [24]  876 	mov	dptr,#0x043e
      00029E 75 F0 07         [24]  877 	mov	b,#0x07
      0002A1 74 E1            [12]  878 	mov	a,#0xe1
      0002A3 7C 03            [12]  879 	mov	r4,#0x03
      0002A5 7D 00            [12]  880 	mov	r5,#0x00
      0002A7 7E 00            [12]  881 	mov	r6,#0x00
      0002A9 7F 00            [12]  882 	mov	r7,#0x00
      0002AB 22               [24]  883 	ret
                                    884 ;	matrix.c:127: case 'T': return musterT;
      0002AC                        885 00120$:
      0002AC 90 10 84         [24]  886 	mov	dptr,#0x1084
      0002AF 75 F0 42         [24]  887 	mov	b,#0x42
      0002B2 74 C8            [12]  888 	mov	a,#0xc8
      0002B4 7C 07            [12]  889 	mov	r4,#0x07
      0002B6 7D 00            [12]  890 	mov	r5,#0x00
      0002B8 7E 00            [12]  891 	mov	r6,#0x00
      0002BA 7F 00            [12]  892 	mov	r7,#0x00
      0002BC 22               [24]  893 	ret
                                    894 ;	matrix.c:129: case 'U': return musterU;
      0002BD                        895 00121$:
      0002BD 90 C6 2E         [24]  896 	mov	dptr,#0xc62e
      0002C0 75 F0 18         [24]  897 	mov	b,#0x18
      0002C3 74 63            [12]  898 	mov	a,#0x63
      0002C5 7C 04            [12]  899 	mov	r4,#0x04
      0002C7 7D 00            [12]  900 	mov	r5,#0x00
      0002C9 7E 00            [12]  901 	mov	r6,#0x00
      0002CB 7F 00            [12]  902 	mov	r7,#0x00
      0002CD 22               [24]  903 	ret
                                    904 ;	matrix.c:131: case 'V': return musterV;
      0002CE                        905 00122$:
      0002CE 90 C5 44         [24]  906 	mov	dptr,#0xc544
      0002D1 75 F0 18         [24]  907 	mov	b,#0x18
      0002D4 74 63            [12]  908 	mov	a,#0x63
      0002D6 7C 04            [12]  909 	mov	r4,#0x04
      0002D8 7D 00            [12]  910 	mov	r5,#0x00
      0002DA 7E 00            [12]  911 	mov	r6,#0x00
      0002DC 7F 00            [12]  912 	mov	r7,#0x00
      0002DE 22               [24]  913 	ret
                                    914 ;	matrix.c:133: case 'W': return musterW;
      0002DF                        915 00123$:
      0002DF 90 D7 71         [24]  916 	mov	dptr,#0xd771
      0002E2 75 F0 18         [24]  917 	mov	b,#0x18
      0002E5 74 63            [12]  918 	mov	a,#0x63
      0002E7 7C 04            [12]  919 	mov	r4,#0x04
      0002E9 7D 00            [12]  920 	mov	r5,#0x00
      0002EB 7E 00            [12]  921 	mov	r6,#0x00
      0002ED 7F 00            [12]  922 	mov	r7,#0x00
      0002EF 22               [24]  923 	ret
                                    924 ;	matrix.c:135: case 'X': return musterX;
      0002F0                        925 00124$:
      0002F0 90 2A 31         [24]  926 	mov	dptr,#0x2a31
      0002F3 75 F0 A2         [24]  927 	mov	b,#0xa2
      0002F6 74 62            [12]  928 	mov	a,#0x62
      0002F8 7C 04            [12]  929 	mov	r4,#0x04
      0002FA 7D 00            [12]  930 	mov	r5,#0x00
      0002FC 7E 00            [12]  931 	mov	r6,#0x00
      0002FE 7F 00            [12]  932 	mov	r7,#0x00
      000300 22               [24]  933 	ret
                                    934 ;	matrix.c:137: case 'Y': return musterY;
      000301                        935 00125$:
      000301 90 10 84         [24]  936 	mov	dptr,#0x1084
      000304 75 F0 A2         [24]  937 	mov	b,#0xa2
      000307 74 62            [12]  938 	mov	a,#0x62
      000309 7C 04            [12]  939 	mov	r4,#0x04
      00030B 7D 00            [12]  940 	mov	r5,#0x00
      00030D 7E 00            [12]  941 	mov	r6,#0x00
      00030F 7F 00            [12]  942 	mov	r7,#0x00
      000311 22               [24]  943 	ret
                                    944 ;	matrix.c:139: case 'Z': return musterZ;
      000312                        945 00126$:
      000312 90 22 1F         [24]  946 	mov	dptr,#0x221f
      000315 75 F0 22         [24]  947 	mov	b,#0x22
      000318 74 C2            [12]  948 	mov	a,#0xc2
      00031A 7C 07            [12]  949 	mov	r4,#0x07
      00031C 7D 00            [12]  950 	mov	r5,#0x00
      00031E 7E 00            [12]  951 	mov	r6,#0x00
      000320 7F 00            [12]  952 	mov	r7,#0x00
      000322 22               [24]  953 	ret
                                    954 ;	matrix.c:142: case '0': return muster0;
      000323                        955 00127$:
      000323 90 E7 2E         [24]  956 	mov	dptr,#0xe72e
      000326 75 F0 3A         [24]  957 	mov	b,#0x3a
      000329 74 A7            [12]  958 	mov	a,#0xa7
      00032B 7C 03            [12]  959 	mov	r4,#0x03
      00032D 7D 00            [12]  960 	mov	r5,#0x00
      00032F 7E 00            [12]  961 	mov	r6,#0x00
      000331 7F 00            [12]  962 	mov	r7,#0x00
      000333 22               [24]  963 	ret
                                    964 ;	matrix.c:144: case '1': return muster1;
      000334                        965 00128$:
      000334 90 10 9F         [24]  966 	mov	dptr,#0x109f
      000337 75 F0 42         [24]  967 	mov	b,#0x42
      00033A 74 19            [12]  968 	mov	a,#0x19
      00033C 7C 01            [12]  969 	mov	r4,#0x01
      00033E 7D 00            [12]  970 	mov	r5,#0x00
      000340 7E 00            [12]  971 	mov	r6,#0x00
      000342 7F 00            [12]  972 	mov	r7,#0x00
      000344 22               [24]  973 	ret
                                    974 ;	matrix.c:146: case '2': return muster2;
      000345                        975 00129$:
      000345 90 11 1F         [24]  976 	mov	dptr,#0x111f
      000348 75 F0 11         [24]  977 	mov	b,#0x11
      00034B 74 A2            [12]  978 	mov	a,#0xa2
      00034D 7C 03            [12]  979 	mov	r4,#0x03
      00034F 7D 00            [12]  980 	mov	r5,#0x00
      000351 7E 00            [12]  981 	mov	r6,#0x00
      000353 7F 00            [12]  982 	mov	r7,#0x00
      000355 22               [24]  983 	ret
                                    984 ;	matrix.c:148: case '3': return muster3;
      000356                        985 00130$:
      000356 90 06 2E         [24]  986 	mov	dptr,#0x062e
      000359 75 F0 13         [24]  987 	mov	b,#0x13
      00035C 74 A2            [12]  988 	mov	a,#0xa2
      00035E 7C 03            [12]  989 	mov	r4,#0x03
      000360 7D 00            [12]  990 	mov	r5,#0x00
      000362 7E 00            [12]  991 	mov	r6,#0x00
      000364 7F 00            [12]  992 	mov	r7,#0x00
      000366 22               [24]  993 	ret
                                    994 ;	matrix.c:150: case '4': return muster4;
      000367                        995 00131$:
      000367 90 7C 42         [24]  996 	mov	dptr,#0x7c42
      00036A 75 F0 A9         [24]  997 	mov	b,#0xa9
      00036D 74 8C            [12]  998 	mov	a,#0x8c
      00036F 7C 00            [12]  999 	mov	r4,#0x00
      000371 7D 00            [12] 1000 	mov	r5,#0x00
      000373 7E 00            [12] 1001 	mov	r6,#0x00
      000375 7F 00            [12] 1002 	mov	r7,#0x00
      000377 22               [24] 1003 	ret
                                   1004 ;	matrix.c:152: case '5': return muster5;
      000378                       1005 00132$:
      000378 90 86 2E         [24] 1006 	mov	dptr,#0x862e
      00037B 75 F0 E0         [24] 1007 	mov	b,#0xe0
      00037E 74 E1            [12] 1008 	mov	a,#0xe1
      000380 7C 07            [12] 1009 	mov	r4,#0x07
      000382 7D 00            [12] 1010 	mov	r5,#0x00
      000384 7E 00            [12] 1011 	mov	r6,#0x00
      000386 7F 00            [12] 1012 	mov	r7,#0x00
      000388 22               [24] 1013 	ret
                                   1014 ;	matrix.c:154: case '6': return muster6;
      000389                       1015 00133$:
      000389 90 46 2E         [24] 1016 	mov	dptr,#0x462e
      00038C 75 F0 0F         [24] 1017 	mov	b,#0x0f
      00038F 74 A3            [12] 1018 	mov	a,#0xa3
      000391 7C 03            [12] 1019 	mov	r4,#0x03
      000393 7D 00            [12] 1020 	mov	r5,#0x00
      000395 7E 00            [12] 1021 	mov	r6,#0x00
      000397 7F 00            [12] 1022 	mov	r7,#0x00
                                   1023 ;	matrix.c:156: case '7': return muster7;
      000399 22               [24] 1024 	ret
      00039A                       1025 00134$:
      00039A 90 10 84         [24] 1026 	mov	dptr,#0x1084
      00039D 75 F0 22         [24] 1027 	mov	b,#0x22
      0003A0 74 C2            [12] 1028 	mov	a,#0xc2
      0003A2 7C 07            [12] 1029 	mov	r4,#0x07
      0003A4 7D 00            [12] 1030 	mov	r5,#0x00
      0003A6 7E 00            [12] 1031 	mov	r6,#0x00
      0003A8 7F 00            [12] 1032 	mov	r7,#0x00
                                   1033 ;	matrix.c:158: case '8': return muster8;
      0003AA 22               [24] 1034 	ret
      0003AB                       1035 00135$:
      0003AB 90 46 2E         [24] 1036 	mov	dptr,#0x462e
      0003AE 75 F0 17         [24] 1037 	mov	b,#0x17
      0003B1 74 A3            [12] 1038 	mov	a,#0xa3
      0003B3 7C 03            [12] 1039 	mov	r4,#0x03
      0003B5 7D 00            [12] 1040 	mov	r5,#0x00
      0003B7 7E 00            [12] 1041 	mov	r6,#0x00
      0003B9 7F 00            [12] 1042 	mov	r7,#0x00
                                   1043 ;	matrix.c:160: case '9': return muster9;
      0003BB 22               [24] 1044 	ret
      0003BC                       1045 00136$:
      0003BC 90 86 2E         [24] 1046 	mov	dptr,#0x862e
      0003BF 75 F0 17         [24] 1047 	mov	b,#0x17
      0003C2 74 A3            [12] 1048 	mov	a,#0xa3
      0003C4 7C 03            [12] 1049 	mov	r4,#0x03
      0003C6 7D 00            [12] 1050 	mov	r5,#0x00
      0003C8 7E 00            [12] 1051 	mov	r6,#0x00
      0003CA 7F 00            [12] 1052 	mov	r7,#0x00
                                   1053 ;	matrix.c:163: case '+': return musterErr;
      0003CC 22               [24] 1054 	ret
      0003CD                       1055 00137$:
      0003CD 90 FF FF         [24] 1056 	mov	dptr,#0xffff
      0003D0 74 FF            [12] 1057 	mov	a,#0xff
      0003D2 F5 F0            [12] 1058 	mov	b,a
      0003D4 7C 07            [12] 1059 	mov	r4,#0x07
      0003D6 7D 00            [12] 1060 	mov	r5,#0x00
      0003D8 7E 00            [12] 1061 	mov	r6,#0x00
      0003DA 7F 00            [12] 1062 	mov	r7,#0x00
                                   1063 ;	matrix.c:166: default: return musterErr;
      0003DC 22               [24] 1064 	ret
      0003DD                       1065 00138$:
      0003DD 90 FF FF         [24] 1066 	mov	dptr,#0xffff
      0003E0 74 FF            [12] 1067 	mov	a,#0xff
      0003E2 F5 F0            [12] 1068 	mov	b,a
      0003E4 7C 07            [12] 1069 	mov	r4,#0x07
      0003E6 7D 00            [12] 1070 	mov	r5,#0x00
      0003E8 7E 00            [12] 1071 	mov	r6,#0x00
      0003EA 7F 00            [12] 1072 	mov	r7,#0x00
                                   1073 ;	matrix.c:168: }
                                   1074 ;	matrix.c:169: }
      0003EC 22               [24] 1075 	ret
                                   1076 ;------------------------------------------------------------
                                   1077 ;Allocation info for local variables in function 'matrix_draw'
                                   1078 ;------------------------------------------------------------
                                   1079 ;c                         Allocated to registers r7 
                                   1080 ;active_muster             Allocated with name '_matrix_draw_active_muster_65536_29'
                                   1081 ;i                         Allocated with name '_matrix_draw_i_131072_31'
                                   1082 ;j                         Allocated with name '_matrix_draw_j_262144_33'
                                   1083 ;index                     Allocated to registers 
                                   1084 ;val                       Allocated to registers r7 
                                   1085 ;------------------------------------------------------------
                                   1086 ;	matrix.c:171: void matrix_draw(char c) {
                                   1087 ;	-----------------------------------------
                                   1088 ;	 function matrix_draw
                                   1089 ;	-----------------------------------------
      0003ED                       1090 _matrix_draw:
                                   1091 ;	matrix.c:174: if (c > 0x60 && c < 0x7b) {
      0003ED E5 82            [12] 1092 	mov	a,dpl
      0003EF FF               [12] 1093 	mov	r7,a
      0003F0 24 9F            [12] 1094 	add	a,#0xff - 0x60
      0003F2 50 0B            [24] 1095 	jnc	00102$
      0003F4 BF 7B 00         [24] 1096 	cjne	r7,#0x7b,00147$
      0003F7                       1097 00147$:
      0003F7 50 06            [24] 1098 	jnc	00102$
                                   1099 ;	matrix.c:175: c -= 32;
      0003F9 8F 06            [24] 1100 	mov	ar6,r7
      0003FB EE               [12] 1101 	mov	a,r6
      0003FC 24 E0            [12] 1102 	add	a,#0xe0
      0003FE FF               [12] 1103 	mov	r7,a
      0003FF                       1104 00102$:
                                   1105 ;	matrix.c:178: active_muster = charToMuster(c);
      0003FF 8F 82            [24] 1106 	mov	dpl,r7
      000401 12r00rE6         [24] 1107 	lcall	_charToMuster
      000404 85 82*00         [24] 1108 	mov	_matrix_draw_active_muster_65536_29,dpl
      000407 85 83*01         [24] 1109 	mov	(_matrix_draw_active_muster_65536_29 + 1),dph
      00040A 85 F0*02         [24] 1110 	mov	(_matrix_draw_active_muster_65536_29 + 2),b
      00040D F5*03            [12] 1111 	mov	(_matrix_draw_active_muster_65536_29 + 3),a
      00040F 8C*04            [24] 1112 	mov	(_matrix_draw_active_muster_65536_29 + 4),r4
      000411 8D*05            [24] 1113 	mov	(_matrix_draw_active_muster_65536_29 + 5),r5
      000413 8E*06            [24] 1114 	mov	(_matrix_draw_active_muster_65536_29 + 6),r6
      000415 8F*07            [24] 1115 	mov	(_matrix_draw_active_muster_65536_29 + 7),r7
                                   1116 ;	matrix.c:180: for (int i=0; i<5; i++) {
      000417 E4               [12] 1117 	clr	a
      000418 F5*08            [12] 1118 	mov	_matrix_draw_i_131072_31,a
      00041A F5*09            [12] 1119 	mov	(_matrix_draw_i_131072_31 + 1),a
      00041C                       1120 00112$:
      00041C C3               [12] 1121 	clr	c
      00041D E5*08            [12] 1122 	mov	a,_matrix_draw_i_131072_31
      00041F 94 05            [12] 1123 	subb	a,#0x05
      000421 E5*09            [12] 1124 	mov	a,(_matrix_draw_i_131072_31 + 1)
      000423 64 80            [12] 1125 	xrl	a,#0x80
      000425 94 80            [12] 1126 	subb	a,#0x80
      000427 40 01            [24] 1127 	jc	00149$
      000429 22               [24] 1128 	ret
      00042A                       1129 00149$:
                                   1130 ;	matrix.c:181: matrix_reset_cols();
      00042A 12r04rDF         [24] 1131 	lcall	_matrix_reset_cols
                                   1132 ;	matrix.c:182: matrix_reset_rows();
      00042D 12r04rB9         [24] 1133 	lcall	_matrix_reset_rows
                                   1134 ;	matrix.c:183: set_col(i);
      000430 85*08 82         [24] 1135 	mov	dpl,_matrix_draw_i_131072_31
      000433 85*09 83         [24] 1136 	mov	dph,(_matrix_draw_i_131072_31 + 1)
      000436 12r00r3F         [24] 1137 	lcall	_set_col
                                   1138 ;	matrix.c:185: for (int j = 0; j<7; j++) {
      000439 E4               [12] 1139 	clr	a
      00043A F5*0A            [12] 1140 	mov	_matrix_draw_j_262144_33,a
      00043C F5*0B            [12] 1141 	mov	(_matrix_draw_j_262144_33 + 1),a
      00043E                       1142 00109$:
      00043E C3               [12] 1143 	clr	c
      00043F E5*0A            [12] 1144 	mov	a,_matrix_draw_j_262144_33
      000441 94 07            [12] 1145 	subb	a,#0x07
      000443 E5*0B            [12] 1146 	mov	a,(_matrix_draw_j_262144_33 + 1)
      000445 64 80            [12] 1147 	xrl	a,#0x80
      000447 94 80            [12] 1148 	subb	a,#0x80
      000449 50 5A            [24] 1149 	jnc	00113$
                                   1150 ;	matrix.c:186: int index = 5*j + i;
      00044B E5*0A            [12] 1151 	mov	a,_matrix_draw_j_262144_33
      00044D 75 F0 05         [24] 1152 	mov	b,#0x05
      000450 A4               [48] 1153 	mul	ab
      000451 FB               [12] 1154 	mov	r3,a
      000452 E5*08            [12] 1155 	mov	a,_matrix_draw_i_131072_31
      000454 2B               [12] 1156 	add	a,r3
                                   1157 ;	matrix.c:187: bool val = (active_muster >> (34 - index)) & 1;
      000455 D3               [12] 1158 	setb	c
      000456 94 22            [12] 1159 	subb	a,#0x22
      000458 F4               [12] 1160 	cpl	a
      000459 FB               [12] 1161 	mov	r3,a
      00045A 8B F0            [24] 1162 	mov	b,r3
      00045C 05 F0            [12] 1163 	inc	b
      00045E A8*00            [24] 1164 	mov	r0,_matrix_draw_active_muster_65536_29
      000460 A9*01            [24] 1165 	mov	r1,(_matrix_draw_active_muster_65536_29 + 1)
      000462 AA*02            [24] 1166 	mov	r2,(_matrix_draw_active_muster_65536_29 + 2)
      000464 AB*03            [24] 1167 	mov	r3,(_matrix_draw_active_muster_65536_29 + 3)
      000466 AC*04            [24] 1168 	mov	r4,(_matrix_draw_active_muster_65536_29 + 4)
      000468 AD*05            [24] 1169 	mov	r5,(_matrix_draw_active_muster_65536_29 + 5)
      00046A AE*06            [24] 1170 	mov	r6,(_matrix_draw_active_muster_65536_29 + 6)
      00046C AF*07            [24] 1171 	mov	r7,(_matrix_draw_active_muster_65536_29 + 7)
      00046E 80 19            [24] 1172 	sjmp	00152$
      000470                       1173 00151$:
      000470 C3               [12] 1174 	clr	c
      000471 EF               [12] 1175 	mov	a,r7
      000472 13               [12] 1176 	rrc	a
      000473 FF               [12] 1177 	mov	r7,a
      000474 EE               [12] 1178 	mov	a,r6
      000475 13               [12] 1179 	rrc	a
      000476 FE               [12] 1180 	mov	r6,a
      000477 ED               [12] 1181 	mov	a,r5
      000478 13               [12] 1182 	rrc	a
      000479 FD               [12] 1183 	mov	r5,a
      00047A EC               [12] 1184 	mov	a,r4
      00047B 13               [12] 1185 	rrc	a
      00047C FC               [12] 1186 	mov	r4,a
      00047D EB               [12] 1187 	mov	a,r3
      00047E 13               [12] 1188 	rrc	a
      00047F FB               [12] 1189 	mov	r3,a
      000480 EA               [12] 1190 	mov	a,r2
      000481 13               [12] 1191 	rrc	a
      000482 FA               [12] 1192 	mov	r2,a
      000483 E9               [12] 1193 	mov	a,r1
      000484 13               [12] 1194 	rrc	a
      000485 F9               [12] 1195 	mov	r1,a
      000486 E8               [12] 1196 	mov	a,r0
      000487 13               [12] 1197 	rrc	a
      000488 F8               [12] 1198 	mov	r0,a
      000489                       1199 00152$:
      000489 D5 F0 E4         [24] 1200 	djnz	b,00151$
      00048C E8               [12] 1201 	mov	a,r0
      00048D 54 01            [12] 1202 	anl	a,#0x01
                                   1203 ;	matrix.c:188: if (val) {
      00048F FF               [12] 1204 	mov	r7,a
      000490 60 09            [24] 1205 	jz	00110$
                                   1206 ;	matrix.c:189: reset_row(j);
      000492 85*0A 82         [24] 1207 	mov	dpl,_matrix_draw_j_262144_33
      000495 85*0B 83         [24] 1208 	mov	dph,(_matrix_draw_j_262144_33 + 1)
      000498 12r00rCB         [24] 1209 	lcall	_reset_row
      00049B                       1210 00110$:
                                   1211 ;	matrix.c:185: for (int j = 0; j<7; j++) {
      00049B 05*0A            [12] 1212 	inc	_matrix_draw_j_262144_33
      00049D E4               [12] 1213 	clr	a
      00049E B5*0A 9D         [24] 1214 	cjne	a,_matrix_draw_j_262144_33,00109$
      0004A1 05*0B            [12] 1215 	inc	(_matrix_draw_j_262144_33 + 1)
      0004A3 80 99            [24] 1216 	sjmp	00109$
      0004A5                       1217 00113$:
                                   1218 ;	matrix.c:180: for (int i=0; i<5; i++) {
      0004A5 05*08            [12] 1219 	inc	_matrix_draw_i_131072_31
      0004A7 E4               [12] 1220 	clr	a
      0004A8 B5*08 02         [24] 1221 	cjne	a,_matrix_draw_i_131072_31,00155$
      0004AB 05*09            [12] 1222 	inc	(_matrix_draw_i_131072_31 + 1)
      0004AD                       1223 00155$:
                                   1224 ;	matrix.c:193: }
      0004AD 02r04r1C         [24] 1225 	ljmp	00112$
                                   1226 ;------------------------------------------------------------
                                   1227 ;Allocation info for local variables in function 'matrix_setup'
                                   1228 ;------------------------------------------------------------
                                   1229 ;	matrix.c:195: void matrix_setup() {
                                   1230 ;	-----------------------------------------
                                   1231 ;	 function matrix_setup
                                   1232 ;	-----------------------------------------
      0004B0                       1233 _matrix_setup:
                                   1234 ;	matrix.c:196: matrix_reset();
                                   1235 ;	matrix.c:197: }
      0004B0 02r04rB3         [24] 1236 	ljmp	_matrix_reset
                                   1237 ;------------------------------------------------------------
                                   1238 ;Allocation info for local variables in function 'matrix_reset'
                                   1239 ;------------------------------------------------------------
                                   1240 ;	matrix.c:199: void matrix_reset() {
                                   1241 ;	-----------------------------------------
                                   1242 ;	 function matrix_reset
                                   1243 ;	-----------------------------------------
      0004B3                       1244 _matrix_reset:
                                   1245 ;	matrix.c:200: matrix_reset_rows();
      0004B3 12r04rB9         [24] 1246 	lcall	_matrix_reset_rows
                                   1247 ;	matrix.c:202: matrix_reset_cols();
                                   1248 ;	matrix.c:203: }
      0004B6 02r04rDF         [24] 1249 	ljmp	_matrix_reset_cols
                                   1250 ;------------------------------------------------------------
                                   1251 ;Allocation info for local variables in function 'matrix_reset_rows'
                                   1252 ;------------------------------------------------------------
                                   1253 ;i                         Allocated to registers r6 r7 
                                   1254 ;------------------------------------------------------------
                                   1255 ;	matrix.c:205: void matrix_reset_rows() {
                                   1256 ;	-----------------------------------------
                                   1257 ;	 function matrix_reset_rows
                                   1258 ;	-----------------------------------------
      0004B9                       1259 _matrix_reset_rows:
                                   1260 ;	matrix.c:206: for (int i = 0; i<7; i++) {
      0004B9 7E 00            [12] 1261 	mov	r6,#0x00
      0004BB 7F 00            [12] 1262 	mov	r7,#0x00
      0004BD                       1263 00103$:
      0004BD C3               [12] 1264 	clr	c
      0004BE EE               [12] 1265 	mov	a,r6
      0004BF 94 07            [12] 1266 	subb	a,#0x07
      0004C1 EF               [12] 1267 	mov	a,r7
      0004C2 64 80            [12] 1268 	xrl	a,#0x80
      0004C4 94 80            [12] 1269 	subb	a,#0x80
      0004C6 50 16            [24] 1270 	jnc	00105$
                                   1271 ;	matrix.c:207: set_row(i);
      0004C8 8E 82            [24] 1272 	mov	dpl,r6
      0004CA 8F 83            [24] 1273 	mov	dph,r7
      0004CC C0 07            [24] 1274 	push	ar7
      0004CE C0 06            [24] 1275 	push	ar6
      0004D0 12r00rB5         [24] 1276 	lcall	_set_row
      0004D3 D0 06            [24] 1277 	pop	ar6
      0004D5 D0 07            [24] 1278 	pop	ar7
                                   1279 ;	matrix.c:206: for (int i = 0; i<7; i++) {
      0004D7 0E               [12] 1280 	inc	r6
      0004D8 BE 00 E2         [24] 1281 	cjne	r6,#0x00,00103$
      0004DB 0F               [12] 1282 	inc	r7
      0004DC 80 DF            [24] 1283 	sjmp	00103$
      0004DE                       1284 00105$:
                                   1285 ;	matrix.c:209: }
      0004DE 22               [24] 1286 	ret
                                   1287 ;------------------------------------------------------------
                                   1288 ;Allocation info for local variables in function 'matrix_reset_cols'
                                   1289 ;------------------------------------------------------------
                                   1290 ;i                         Allocated to registers r6 r7 
                                   1291 ;------------------------------------------------------------
                                   1292 ;	matrix.c:211: void matrix_reset_cols() {
                                   1293 ;	-----------------------------------------
                                   1294 ;	 function matrix_reset_cols
                                   1295 ;	-----------------------------------------
      0004DF                       1296 _matrix_reset_cols:
                                   1297 ;	matrix.c:212: for (int i = 0; i<5; i++) {
      0004DF 7E 00            [12] 1298 	mov	r6,#0x00
      0004E1 7F 00            [12] 1299 	mov	r7,#0x00
      0004E3                       1300 00103$:
      0004E3 C3               [12] 1301 	clr	c
      0004E4 EE               [12] 1302 	mov	a,r6
      0004E5 94 05            [12] 1303 	subb	a,#0x05
      0004E7 EF               [12] 1304 	mov	a,r7
      0004E8 64 80            [12] 1305 	xrl	a,#0x80
      0004EA 94 80            [12] 1306 	subb	a,#0x80
      0004EC 50 16            [24] 1307 	jnc	00105$
                                   1308 ;	matrix.c:213: reset_col(i);
      0004EE 8E 82            [24] 1309 	mov	dpl,r6
      0004F0 8F 83            [24] 1310 	mov	dph,r7
      0004F2 C0 07            [24] 1311 	push	ar7
      0004F4 C0 06            [24] 1312 	push	ar6
      0004F6 12r00r7A         [24] 1313 	lcall	_reset_col
      0004F9 D0 06            [24] 1314 	pop	ar6
      0004FB D0 07            [24] 1315 	pop	ar7
                                   1316 ;	matrix.c:212: for (int i = 0; i<5; i++) {
      0004FD 0E               [12] 1317 	inc	r6
      0004FE BE 00 E2         [24] 1318 	cjne	r6,#0x00,00103$
      000501 0F               [12] 1319 	inc	r7
      000502 80 DF            [24] 1320 	sjmp	00103$
      000504                       1321 00105$:
                                   1322 ;	matrix.c:215: }
      000504 22               [24] 1323 	ret
                                   1324 	.area CSEG    (CODE)
                                   1325 	.area CONST   (CODE)
                                   1326 	.area XINIT   (CODE)
                                   1327 	.area CABS    (ABS,CODE)
